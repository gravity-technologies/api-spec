{
  "gateways": [
    {
      "name": "MarketData",
      "endpoints": [
        {
          "name": "dev",
          "url": "market-data.dev.gravitymarkets.io"
        },
        {
          "name": "staging",
          "url": "market-data.staging.gravitymarkets.io"
        },
        {
          "name": "testnet",
          "url": "market-data.testnet.grvt.io"
        },
        {
          "name": "prod",
          "url": "market-data.grvt.io"
        }
      ],
      "rpcs": [
        {
          "namespace": "Instrument",
          "name": "RPCGetInstrumentV1",
          "version": 1,
          "route": "/instrument",
          "auth_required": false,
          "request": "ApiGetInstrumentRequest",
          "response": "ApiGetInstrumentResponse",
          "on_request_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            }
          ]
        },
        {
          "namespace": "Instrument",
          "name": "RPCGetAllInstrumentsV1",
          "version": 1,
          "route": "/all_instruments",
          "auth_required": false,
          "request": "ApiGetAllInstrumentsRequest",
          "response": "ApiGetAllInstrumentsResponse",
          "on_request_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            }
          ]
        },
        {
          "namespace": "Instrument",
          "name": "RPCGetFilteredInstrumentsV1",
          "version": 1,
          "route": "/instruments",
          "auth_required": false,
          "request": "ApiGetFilteredInstrumentsRequest",
          "response": "ApiGetFilteredInstrumentsResponse",
          "on_request_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            }
          ]
        },
        {
          "namespace": "Ticker",
          "name": "RPCMiniTickerV1",
          "version": 1,
          "route": "/mini",
          "auth_required": false,
          "request": "ApiMiniTickerRequest",
          "response": "ApiMiniTickerResponse",
          "on_request_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            }
          ]
        },
        {
          "namespace": "Ticker",
          "name": "RPCTickerV1",
          "version": 1,
          "route": "/ticker",
          "auth_required": false,
          "request": "ApiTickerRequest",
          "response": "ApiTickerResponse",
          "on_request_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            }
          ]
        },
        {
          "namespace": "Orderbook",
          "name": "RPCOrderbookLevelsV1",
          "version": 1,
          "route": "/book",
          "auth_required": false,
          "request": "ApiOrderbookLevelsRequest",
          "response": "ApiOrderbookLevelsResponse",
          "on_request_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3031,
              "message": "Depth is invalid",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            }
          ]
        },
        {
          "namespace": "Trade",
          "name": "RPCTradeV1",
          "version": 1,
          "route": "/trade",
          "auth_required": false,
          "request": "ApiTradeRequest",
          "response": "ApiTradeResponse",
          "on_request_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            }
          ]
        },
        {
          "namespace": "Trade",
          "name": "RPCTradeHistoryV1",
          "version": 1,
          "route": "/trade_history",
          "auth_required": false,
          "request": "ApiTradeHistoryRequest",
          "response": "ApiTradeHistoryResponse",
          "on_request_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            }
          ]
        },
        {
          "namespace": "Candlestick",
          "name": "RPCCandlestickV1",
          "version": 1,
          "route": "/kline",
          "auth_required": false,
          "request": "ApiCandlestickRequest",
          "response": "ApiCandlestickResponse",
          "on_request_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            }
          ]
        },
        {
          "namespace": "Settlement",
          "name": "RPCFundingRateV1",
          "version": 1,
          "route": "/funding",
          "auth_required": false,
          "request": "ApiFundingRateRequest",
          "response": "ApiFundingRateResponse",
          "on_request_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            }
          ]
        }
      ],
      "streams": [
        {
          "namespace": "Ticker",
          "name": "StreamMiniTickerSnapV1",
          "channel": "v1.mini.s",
          "auth_required": false,
          "feed_selector": "WSMiniTickerFeedSelectorV1",
          "feed": "WSMiniTickerFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3030,
              "message": "Feed rate is invalid",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Ticker",
          "name": "StreamMiniTickerDeltaV1",
          "channel": "v1.mini.d",
          "auth_required": false,
          "feed_selector": "WSMiniTickerFeedSelectorV1",
          "feed": "WSMiniTickerFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3030,
              "message": "Feed rate is invalid",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Ticker",
          "name": "StreamTickerSnapV1",
          "channel": "v1.ticker.s",
          "auth_required": false,
          "feed_selector": "WSTickerFeedSelectorV1",
          "feed": "WSTickerFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3030,
              "message": "Feed rate is invalid",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Ticker",
          "name": "StreamTickerDeltaV1",
          "channel": "v1.ticker.d",
          "auth_required": false,
          "feed_selector": "WSTickerFeedSelectorV1",
          "feed": "WSTickerFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3030,
              "message": "Feed rate is invalid",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Orderbook",
          "name": "StreamOrderbookSnapV1",
          "channel": "v1.book.s",
          "auth_required": false,
          "feed_selector": "WSOrderbookLevelsFeedSelectorV1",
          "feed": "WSOrderbookLevelsFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3030,
              "message": "Feed rate is invalid",
              "status": 400
            },
            {
              "code": 3031,
              "message": "Depth is invalid",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Orderbook",
          "name": "StreamOrderbookDeltaV1",
          "channel": "v1.book.d",
          "auth_required": false,
          "feed_selector": "WSOrderbookLevelsFeedSelectorV1",
          "feed": "WSOrderbookLevelsFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3030,
              "message": "Feed rate is invalid",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Trade",
          "name": "StreamTradeV1",
          "channel": "v1.trade",
          "auth_required": false,
          "feed_selector": "WSTradeFeedSelectorV1",
          "feed": "WSTradeFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3011,
              "message": "Limit exceeds min or max value",
              "status": 400
            },
            {
              "code": 3013,
              "message": "Exact limit value is not supported",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Candlestick",
          "name": "StreamCandlestickV1",
          "channel": "v1.candle",
          "auth_required": false,
          "feed_selector": "WSCandlestickFeedSelectorV1",
          "feed": "WSCandlestickFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3040,
              "message": "Candlestick interval is invalid",
              "status": 400
            },
            {
              "code": 3041,
              "message": "Candlestick type is invalid",
              "status": 400
            }
          ]
        }
      ]
    },
    {
      "name": "Trading",
      "endpoints": [
        {
          "name": "dev",
          "url": "trades.dev.gravitymarkets.io"
        },
        {
          "name": "staging",
          "url": "trades.staging.gravitymarkets.io"
        },
        {
          "name": "testnet",
          "url": "trades.testnet.grvt.io"
        },
        {
          "name": "prod",
          "url": "trades.grvt.io"
        }
      ],
      "rpcs": [
        {
          "namespace": "Order",
          "name": "RPCCreateOrderV1",
          "version": 1,
          "route": "/create_order",
          "auth_required": true,
          "request": "ApiCreateOrderRequest",
          "response": "ApiCreateOrderResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 1005,
              "message": "Unknown Error",
              "status": 500
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1400,
              "message": "Signer does not have trade permission",
              "status": 403
            },
            {
              "code": 1009,
              "message": "We are temporarily deactivating this API endpoint, please try again later",
              "status": 503
            },
            {
              "code": 2000,
              "message": "Signature is from an unauthorized signer",
              "status": 403
            },
            {
              "code": 2001,
              "message": "Signature has expired",
              "status": 403
            },
            {
              "code": 2002,
              "message": "Signature does not match payload",
              "status": 403
            },
            {
              "code": 2003,
              "message": "Order sub account does not match logged in user",
              "status": 403
            },
            {
              "code": 2004,
              "message": "Signature is from an expired session key",
              "status": 403
            },
            {
              "code": 2006,
              "message": "Signature R/S must have exactly 64 characters long without 0x prefix",
              "status": 403
            },
            {
              "code": 2005,
              "message": "Signature V must be 27/28",
              "status": 403
            },
            {
              "code": 2007,
              "message": "Signature S must be in the lower half of the curve",
              "status": 403
            },
            {
              "code": 2010,
              "message": "Order ID should be empty when creating an order",
              "status": 400
            },
            {
              "code": 2011,
              "message": "Client Order ID should be supplied when creating an order",
              "status": 400
            },
            {
              "code": 2012,
              "message": "Client Order ID overlaps with existing active order",
              "status": 400
            },
            {
              "code": 2030,
              "message": "Orderbook Orders must have a TimeInForce of GTT/IOC/FOK",
              "status": 400
            },
            {
              "code": 2031,
              "message": "RFQ Orders must have a TimeInForce of GTT/AON/IOC/FOK",
              "status": 400
            },
            {
              "code": 2032,
              "message": "Post Only can only be set to true for GTT/AON orders",
              "status": 400
            },
            {
              "code": 2020,
              "message": "Market Order must always be supplied without a limit price",
              "status": 400
            },
            {
              "code": 2021,
              "message": "Limit Order must always be supplied with a limit price",
              "status": 400
            },
            {
              "code": 2040,
              "message": "Order must contain at least one leg",
              "status": 400
            },
            {
              "code": 2041,
              "message": "Order Legs must be sorted by Derivative.Instrument/Underlying/BaseCurrency/Expiration/StrikePrice",
              "status": 400
            },
            {
              "code": 2042,
              "message": "Orderbook Orders must contain only one leg",
              "status": 400
            },
            {
              "code": 2050,
              "message": "Order state must be empty upon creation",
              "status": 400
            },
            {
              "code": 2051,
              "message": "Order execution metadata must be empty upon creation",
              "status": 400
            },
            {
              "code": 2060,
              "message": "Order Legs contain one or more inactive derivative",
              "status": 400
            },
            {
              "code": 2061,
              "message": "Unsupported Instrument Requested",
              "status": 400
            },
            {
              "code": 2062,
              "message": "Order size smaller than min size",
              "status": 400
            },
            {
              "code": 2063,
              "message": "Order size smaller than min block size in block trade venue",
              "status": 400
            },
            {
              "code": 2064,
              "message": "Invalid limit price tick",
              "status": 400
            },
            {
              "code": 2065,
              "message": "Order size too granular",
              "status": 400
            },
            {
              "code": 2070,
              "message": "Liquidation Order is not supported",
              "status": 400
            },
            {
              "code": 2080,
              "message": "Insufficient margin to create order",
              "status": 400
            },
            {
              "code": 2081,
              "message": "Order Fill would result in exceeding maximum position size",
              "status": 400
            },
            {
              "code": 2082,
              "message": "Pre-order check failed",
              "status": 400
            },
            {
              "code": 2083,
              "message": "Order Fill would result in exceeding maximum position size under current configurable leverage tier",
              "status": 400
            },
            {
              "code": 2090,
              "message": "Max open orders exceeded",
              "status": 429
            },
            {
              "code": 2110,
              "message": "Invalid trigger by",
              "status": 400
            },
            {
              "code": 2111,
              "message": "Unsupported trigger by",
              "status": 400
            },
            {
              "code": 2112,
              "message": "Invalid trigger order",
              "status": 400
            },
            {
              "code": 2113,
              "message": "Trigger price must be non-zero",
              "status": 400
            },
            {
              "code": 2114,
              "message": "Invalid position linked TPSL orders, position linked TPSL must be a reduce-only order",
              "status": 400
            },
            {
              "code": 2115,
              "message": "Invalid position linked TPSL orders, position linked TPSL must not have smaller size than the position",
              "status": 400
            },
            {
              "code": 2116,
              "message": "Position linked TPSL order for this asset already exists",
              "status": 400
            },
            {
              "code": 3004,
              "message": "Instrument does not have a valid maintenance margin configuration",
              "status": 500
            },
            {
              "code": 3005,
              "message": "Instrument's underlying currency does not have a valid balance decimal configuration",
              "status": 500
            },
            {
              "code": 3006,
              "message": "Instrument's quote currency does not have a valid balance decimal configuration",
              "status": 500
            },
            {
              "code": 2400,
              "message": "Reduce only order with no position",
              "status": 400
            },
            {
              "code": 2401,
              "message": "Reduce only order must not increase position size",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCCancelOrderV1",
          "version": 1,
          "route": "/cancel_order",
          "auth_required": true,
          "request": "ApiCancelOrderRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 2300,
              "message": "Order cancel time-to-live settings currently disabled.",
              "status": 400
            },
            {
              "code": 2301,
              "message": "Order cancel time-to-live exceeds maximum allowed value.",
              "status": 400
            },
            {
              "code": 3021,
              "message": "Either order ID or client order ID must be supplied",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCCancelAllOrdersV1",
          "version": 1,
          "route": "/cancel_all_orders",
          "auth_required": true,
          "request": "ApiCancelAllOrdersRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCGetOrderV1",
          "version": 1,
          "route": "/order",
          "auth_required": true,
          "request": "ApiGetOrderRequest",
          "response": "ApiGetOrderResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 3021,
              "message": "Either order ID or client order ID must be supplied",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCOpenOrdersV1",
          "version": 1,
          "route": "/open_orders",
          "auth_required": true,
          "request": "ApiOpenOrdersRequest",
          "response": "ApiOpenOrdersResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCOrderHistoryV1",
          "version": 1,
          "route": "/order_history",
          "auth_required": true,
          "request": "ApiOrderHistoryRequest",
          "response": "ApiOrderHistoryResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCCancelOnDisconnectV1",
          "version": 1,
          "route": "/cancel_on_disconnect",
          "auth_required": true,
          "request": "ApiCancelOnDisconnectRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 6000,
              "message": "Countdown time is bigger than 300s supported",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Execution",
          "name": "RPCFillHistoryV1",
          "version": 1,
          "route": "/fill_history",
          "auth_required": true,
          "request": "ApiFillHistoryRequest",
          "response": "ApiFillHistoryResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Execution",
          "name": "RPCPositionsV1",
          "version": 1,
          "route": "/positions",
          "auth_required": true,
          "request": "ApiPositionsRequest",
          "response": "ApiPositionsResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Execution",
          "name": "RPCFundingPaymentHistoryV1",
          "version": 1,
          "route": "/funding_payment_history",
          "auth_required": true,
          "request": "ApiFundingPaymentHistoryRequest",
          "response": "ApiFundingPaymentHistoryResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCDepositHistoryV1",
          "version": 1,
          "route": "/deposit_history",
          "auth_required": true,
          "request": "ApiDepositHistoryRequest",
          "response": "ApiDepositHistoryResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCTransferV1",
          "version": 1,
          "route": "/transfer",
          "auth_required": true,
          "request": "ApiTransferRequest",
          "response": "ApiTransferResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 5000,
              "message": "Transfer Metadata does not match the expected structure.",
              "status": 400
            },
            {
              "code": 5001,
              "message": "Transfer Provider does not match the expected provider.",
              "status": 400
            },
            {
              "code": 4002,
              "message": "Transfer failed with an unrefined failure reason, please report to GRVT",
              "status": 400
            },
            {
              "code": 5002,
              "message": "Direction of the transfer does not match the expected direction.",
              "status": 400
            },
            {
              "code": 5003,
              "message": "Endpoint account ID is invalid.",
              "status": 400
            },
            {
              "code": 5004,
              "message": "Funding account does not exist in our system.",
              "status": 400
            },
            {
              "code": 5005,
              "message": "Invalid ChainID for the transfer request.",
              "status": 400
            },
            {
              "code": 7100,
              "message": "Unknown transaction type",
              "status": 500
            },
            {
              "code": 7101,
              "message": "Transfer account not found",
              "status": 400
            },
            {
              "code": 7102,
              "message": "Transfer sub-account not found",
              "status": 400
            },
            {
              "code": 7103,
              "message": "Charged trading fee below the config minimum",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCTransferHistoryV1",
          "version": 1,
          "route": "/transfer_history",
          "auth_required": true,
          "request": "ApiTransferHistoryRequest",
          "response": "ApiTransferHistoryResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCWithdrawalV1",
          "version": 1,
          "route": "/withdrawal",
          "auth_required": true,
          "request": "ApiWithdrawalRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 4010,
              "message": "This wallet is not supported. Please try another wallet.",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCWithdrawalHistoryV1",
          "version": 1,
          "route": "/withdrawal_history",
          "auth_required": true,
          "request": "ApiWithdrawalHistoryRequest",
          "response": "ApiWithdrawalHistoryResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Account",
          "name": "RPCSubAccountSummaryV1",
          "version": 1,
          "route": "/account_summary",
          "auth_required": true,
          "request": "ApiSubAccountSummaryRequest",
          "response": "ApiSubAccountSummaryResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Account",
          "name": "RPCSubAccountHistoryV1",
          "version": 1,
          "route": "/account_history",
          "auth_required": true,
          "request": "ApiSubAccountHistoryRequest",
          "response": "ApiSubAccountHistoryResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Account",
          "name": "RPCAggregatedAccountSummaryV1",
          "version": 1,
          "route": "/aggregated_account_summary",
          "auth_required": true,
          "request": "EmptyRequest",
          "response": "ApiAggregatedAccountSummaryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "Account",
          "name": "RPCFundingAccountSummaryV1",
          "version": 1,
          "route": "/funding_account_summary",
          "auth_required": true,
          "request": "EmptyRequest",
          "response": "ApiFundingAccountSummaryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        },
        {
          "namespace": "DeriskMMRatio",
          "name": "RPCSetDeriskMMRatioV1",
          "version": 1,
          "route": "/set_derisk_mm_ratio",
          "auth_required": true,
          "request": "ApiSetDeriskToMaintenanceMarginRatioRequest",
          "response": "ApiSetDeriskToMaintenanceMarginRatioResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 6100,
              "message": "Derisk MM Ratio is out of range",
              "status": 400
            }
          ]
        },
        {
          "namespace": "InitialLeverage",
          "name": "RPCGetAllInitialLeverageV1",
          "version": 1,
          "route": "/get_all_initial_leverage",
          "auth_required": true,
          "request": "ApiGetAllInitialLeverageRequest",
          "response": "ApiGetAllInitialLeverageResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            }
          ]
        },
        {
          "namespace": "InitialLeverage",
          "name": "RPCSetInitialLeverageV1",
          "version": 1,
          "route": "/set_initial_leverage",
          "auth_required": true,
          "request": "ApiSetInitialLeverageRequest",
          "response": "ApiSetInitialLeverageResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1004,
              "message": "Data Not Found",
              "status": 404
            },
            {
              "code": 2100,
              "message": "Invalid initial leverage",
              "status": 400
            },
            {
              "code": 2101,
              "message": "Vaults cannot configure leverage",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Vault",
          "name": "RPCVaultBurnTokensV1",
          "version": 1,
          "route": "/vault_burn_tokens",
          "auth_required": true,
          "request": "ApiVaultBurnTokensRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1009,
              "message": "We are temporarily deactivating this API endpoint, please try again later",
              "status": 503
            },
            {
              "code": 2000,
              "message": "Signature is from an unauthorized signer",
              "status": 403
            },
            {
              "code": 2001,
              "message": "Signature has expired",
              "status": 403
            },
            {
              "code": 2002,
              "message": "Signature does not match payload",
              "status": 403
            },
            {
              "code": 2004,
              "message": "Signature is from an expired session key",
              "status": 403
            },
            {
              "code": 2006,
              "message": "Signature R/S must have exactly 64 characters long without 0x prefix",
              "status": 403
            },
            {
              "code": 2005,
              "message": "Signature V must be 27/28",
              "status": 403
            },
            {
              "code": 2007,
              "message": "Signature S must be in the lower half of the curve",
              "status": 403
            },
            {
              "code": 2008,
              "message": "Signature exceeds maximum allowed duration.",
              "status": 403
            },
            {
              "code": 7000,
              "message": "Vault ID provided is invalid and does not belong to any vault",
              "status": 400
            },
            {
              "code": 7005,
              "message": "You are attempting to burn more vault tokens than you own.",
              "status": 400
            },
            {
              "code": 7006,
              "message": "You are attempting to burn vault tokens whilst having an active redemption request.",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Vault",
          "name": "RPCVaultInvestV1",
          "version": 1,
          "route": "/vault_invest",
          "auth_required": true,
          "request": "ApiVaultInvestRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1009,
              "message": "We are temporarily deactivating this API endpoint, please try again later",
              "status": 503
            },
            {
              "code": 2000,
              "message": "Signature is from an unauthorized signer",
              "status": 403
            },
            {
              "code": 2001,
              "message": "Signature has expired",
              "status": 403
            },
            {
              "code": 2002,
              "message": "Signature does not match payload",
              "status": 403
            },
            {
              "code": 2004,
              "message": "Signature is from an expired session key",
              "status": 403
            },
            {
              "code": 2006,
              "message": "Signature R/S must have exactly 64 characters long without 0x prefix",
              "status": 403
            },
            {
              "code": 2005,
              "message": "Signature V must be 27/28",
              "status": 403
            },
            {
              "code": 2007,
              "message": "Signature S must be in the lower half of the curve",
              "status": 403
            },
            {
              "code": 2008,
              "message": "Signature exceeds maximum allowed duration.",
              "status": 403
            },
            {
              "code": 4000,
              "message": "Insufficient balance to complete transfer",
              "status": 400
            },
            {
              "code": 7000,
              "message": "Vault ID provided is invalid and does not belong to any vault",
              "status": 400
            },
            {
              "code": 7003,
              "message": "This vault has been delisted/closed.",
              "status": 400
            },
            {
              "code": 7004,
              "message": "This investment would cause the vault to exceed its valuation cap.",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Vault",
          "name": "RPCVaultInvestorSummaryV1",
          "version": 1,
          "route": "/vault_investor_summary",
          "auth_required": true,
          "request": "ApiVaultInvestorSummaryRequest",
          "response": "ApiVaultInvestorSummaryResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 7000,
              "message": "Vault ID provided is invalid and does not belong to any vault",
              "status": 400
            },
            {
              "code": 7007,
              "message": "The investor is not an LP for this vault.",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Vault",
          "name": "RPCVaultRedeemV1",
          "version": 1,
          "route": "/vault_redeem",
          "auth_required": true,
          "request": "ApiVaultRedeemRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 7000,
              "message": "Vault ID provided is invalid and does not belong to any vault",
              "status": 400
            },
            {
              "code": 7001,
              "message": "Vault does not have sufficient LP token balance",
              "status": 400
            },
            {
              "code": 7002,
              "message": "User has an ongoing redemption",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Vault",
          "name": "RPCVaultRedeemCancelV1",
          "version": 1,
          "route": "/vault_redeem_cancel",
          "auth_required": true,
          "request": "ApiVaultRedeemCancelRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 7000,
              "message": "Vault ID provided is invalid and does not belong to any vault",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Vault",
          "name": "RPCVaultRedemptionQueueV1",
          "version": 1,
          "route": "/vault_view_redemption_queue",
          "auth_required": true,
          "request": "ApiVaultViewRedemptionQueueRequest",
          "response": "ApiVaultViewRedemptionQueueResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 7000,
              "message": "Vault ID provided is invalid and does not belong to any vault",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Vault",
          "name": "RPCQueryVaultManagerInvestorHistoryV1",
          "version": 1,
          "route": "/vault_manager_investor_history",
          "auth_required": true,
          "request": "ApiQueryVaultManagerInvestorHistoryRequest",
          "response": "ApiQueryVaultManagerInvestorHistoryResponse",
          "on_request_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1003,
              "message": "Request could not be processed due to malformed syntax",
              "status": 400
            },
            {
              "code": 1006,
              "message": "You have surpassed the allocated rate limit for your tier",
              "status": 429
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            }
          ]
        }
      ],
      "streams": [
        {
          "namespace": "Order",
          "name": "StreamOrderV1",
          "channel": "v1.order",
          "auth_required": true,
          "feed_selector": "WSOrderFeedSelectorV1",
          "feed": "WSOrderFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3020,
              "message": "Sub account ID must be an uint64 integer",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "StreamOrderStateV1",
          "channel": "v1.state",
          "auth_required": true,
          "feed_selector": "WSOrderStateFeedSelectorV1",
          "feed": "WSOrderStateFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3020,
              "message": "Sub account ID must be an uint64 integer",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "StreamCancelStatusV1",
          "channel": "v1.cancel",
          "auth_required": true,
          "feed_selector": "WSCancelFeedSelectorV1",
          "feed": "WSCancelFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3020,
              "message": "Sub account ID must be an uint64 integer",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Execution",
          "name": "StreamFillV1",
          "channel": "v1.fill",
          "auth_required": true,
          "feed_selector": "WSFillFeedSelectorV1",
          "feed": "WSFillFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3020,
              "message": "Sub account ID must be an uint64 integer",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Execution",
          "name": "StreamPositionsV1",
          "channel": "v1.position",
          "auth_required": true,
          "feed_selector": "WSPositionsFeedSelectorV1",
          "feed": "WSPositionsFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1000,
              "message": "You need to authenticate prior to using this functionality",
              "status": 401
            },
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1002,
              "message": "Internal Server Error",
              "status": 500
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3000,
              "message": "Instrument is invalid",
              "status": 400
            },
            {
              "code": 3020,
              "message": "Sub account ID must be an uint64 integer",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "StreamDepositV1",
          "channel": "v1.deposit",
          "auth_required": true,
          "feed_selector": "WSDepositFeedSelectorV1",
          "feed": "WSDepositFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "StreamTransferV1",
          "channel": "v1.transfer",
          "auth_required": true,
          "feed_selector": "WSTransferFeedSelectorV1",
          "feed": "WSTransferFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            },
            {
              "code": 3020,
              "message": "Sub account ID must be an uint64 integer",
              "status": 400
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "StreamWithdrawalV1",
          "channel": "v1.withdrawal",
          "auth_required": true,
          "feed_selector": "WSWithdrawalFeedSelectorV1",
          "feed": "WSWithdrawalFeedDataV1",
          "on_subscribe_errors": [
            {
              "code": 1001,
              "message": "You are not authorized to access this functionality",
              "status": 403
            },
            {
              "code": 1008,
              "message": "Your IP has not been whitelisted for access",
              "status": 401
            },
            {
              "code": 1101,
              "message": "Feed Format must be in the format of \u003cprimary\u003e@\u003csecondary\u003e",
              "status": 400
            },
            {
              "code": 1102,
              "message": "Wrong number of primary selectors",
              "status": 400
            },
            {
              "code": 1103,
              "message": "Wrong number of secondary selectors",
              "status": 400
            }
          ]
        }
      ]
    }
  ],
  "structs": [
    {
      "name": "ApiPositionsRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID to request for"
          ]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "base",
          "lite_name": "b",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['BTC', 'ETH']",
          "comment": [
            "The base filter to apply. If nil, this defaults to all bases. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be returned"
          ]
        }
      ],
      "comment": [
        "Query the positions of a sub account"
      ]
    },
    {
      "name": "Positions",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the event was emitted in unix nanoseconds"
          ]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID that participated in the trade"
          ]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The instrument being represented"
          ]
        },
        {
          "name": "size",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'2635000.50'",
          "comment": [
            "The size of the position, expressed in base asset decimal units. Negative for short positions"
          ]
        },
        {
          "name": "notional",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'2635000.50'",
          "comment": [
            "The notional value of the position, negative for short assets, expressed in quote asset decimal units"
          ]
        },
        {
          "name": "entry_price",
          "lite_name": "ep",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The entry price of the position, expressed in `9` decimals",
            "Whenever increasing the size of a position, the entry price is updated to the new average entry price",
            "`new_entry_price = (old_entry_price * old_size + trade_price * trade_size) / (old_size + trade_size)`"
          ]
        },
        {
          "name": "exit_price",
          "lite_name": "ep1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The exit price of the position, expressed in `9` decimals",
            "Whenever decreasing the size of a position, the exit price is updated to the new average exit price",
            "`new_exit_price = (old_exit_price * old_exit_trade_size + trade_price * trade_size) / (old_exit_trade_size + trade_size)`"
          ]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the position, expressed in `9` decimals"
          ]
        },
        {
          "name": "unrealized_pnl",
          "lite_name": "up",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'135000.50'",
          "comment": [
            "The unrealized PnL of the position, expressed in quote asset decimal units",
            "`unrealized_pnl = (mark_price - entry_price) * size`"
          ]
        },
        {
          "name": "realized_pnl",
          "lite_name": "rp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "'-35000.30'",
          "comment": [
            "The realized PnL of the position, expressed in quote asset decimal units",
            "`realized_pnl = (exit_price - entry_price) * exit_trade_size`"
          ]
        },
        {
          "name": "total_pnl",
          "lite_name": "tp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "example": "'100000.20'",
          "comment": [
            "The total PnL of the position, expressed in quote asset decimal units",
            "`total_pnl = realized_pnl + unrealized_pnl`"
          ]
        },
        {
          "name": "roi",
          "lite_name": "r",
          "semantic_type": "string",
          "json_type": "string",
          "index": 11,
          "array_depth": 0,
          "optional": false,
          "example": "'10.20'",
          "comment": [
            "The ROI of the position, expressed as a percentage",
            "`roi = (total_pnl / (entry_price * abs(size))) * 100^`"
          ]
        },
        {
          "name": "quote_index_price",
          "lite_name": "qi",
          "semantic_type": "string",
          "json_type": "string",
          "index": 12,
          "array_depth": 0,
          "optional": false,
          "example": "'1.0000102'",
          "comment": [
            "The index price of the quote currency. (reported in `USD`)"
          ]
        },
        {
          "name": "est_liquidation_price",
          "lite_name": "el",
          "semantic_type": "string",
          "json_type": "string",
          "index": 13,
          "array_depth": 0,
          "optional": false,
          "example": "60000.25",
          "comment": [
            "The estimated liquidation price"
          ]
        },
        {
          "name": "leverage",
          "lite_name": "l",
          "semantic_type": "string",
          "json_type": "string",
          "index": 14,
          "array_depth": 0,
          "optional": false,
          "example": "'10'",
          "comment": [
            "The current leverage value for this position"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiPositionsResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Positions",
          "json_type": "Positions",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The positions matching the request filter"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFillHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID to request for"
          ]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "base",
          "lite_name": "b",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['BTC', 'ETH']",
          "comment": [
            "The base filter to apply. If nil, this defaults to all bases. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "The start time to apply in unix nanoseconds. If nil, this defaults to all start times. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "default": "now()",
          "example": "'1697788800000000000'",
          "comment": [
            "The end time to apply in unix nanoseconds. If nil, this defaults to all end times. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 6,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "''",
          "comment": [
            "The cursor to indicate when to start the query from"
          ]
        }
      ],
      "comment": [
        "Query for all historical fills made by a single account. A single order can be matched multiple times, hence there is no real way to uniquely identify a trade.",
        "",
        "Pagination works as follows:\u003cul\u003e\u003cli\u003eWe perform a reverse chronological lookup, starting from `end_time`. If `end_time` is not set, we start from the most recent data.\u003c/li\u003e\u003cli\u003eThe lookup is limited to `limit` records. If more data is requested, the response will contain a `next` cursor for you to query the next page.\u003c/li\u003e\u003cli\u003eIf a `cursor` is provided, it will be used to fetch results from that point onwards.\u003c/li\u003e\u003cli\u003ePagination will continue until the `start_time` is reached. If `start_time` is not set, pagination will continue as far back as our data retention policy allows.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "Fill",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the event was emitted in unix nanoseconds"
          ]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID that participated in the trade"
          ]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The instrument being represented"
          ]
        },
        {
          "name": "is_buyer",
          "lite_name": "ib",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": [
            "The side that the subaccount took on the trade"
          ]
        },
        {
          "name": "is_taker",
          "lite_name": "it",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": [
            "The role that the subaccount took on the trade"
          ]
        },
        {
          "name": "size",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'0.30'",
          "comment": [
            "The number of assets being traded, expressed in base asset decimal units"
          ]
        },
        {
          "name": "price",
          "lite_name": "p",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The traded price, expressed in `9` decimals"
          ]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the instrument at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "index_price",
          "lite_name": "ip",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The index price of the instrument at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "interest_rate",
          "lite_name": "ir",
          "semantic_type": "string",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "0.0003",
          "comment": [
            "The interest rate of the underlying at point of trade, expressed in centibeeps (1/100th of a basis point)"
          ]
        },
        {
          "name": "forward_price",
          "lite_name": "fp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "[Options] The forward price of the option at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "realized_pnl",
          "lite_name": "rp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 11,
          "array_depth": 0,
          "optional": false,
          "example": "'2400.50'",
          "comment": [
            "The realized PnL of the trade, expressed in quote asset decimal units (0 if increasing position size)"
          ]
        },
        {
          "name": "fee",
          "lite_name": "f",
          "semantic_type": "string",
          "json_type": "string",
          "index": 12,
          "array_depth": 0,
          "optional": false,
          "example": "'9.75'",
          "comment": [
            "The fees paid on the trade, expressed in quote asset decimal unit (negative if maker rebate applied)"
          ]
        },
        {
          "name": "fee_rate",
          "lite_name": "fr",
          "semantic_type": "string",
          "json_type": "string",
          "index": 13,
          "array_depth": 0,
          "optional": false,
          "example": "0.0003",
          "comment": [
            "The fee rate paid on the trade"
          ]
        },
        {
          "name": "trade_id",
          "lite_name": "ti",
          "semantic_type": "string",
          "json_type": "string",
          "index": 14,
          "array_depth": 0,
          "optional": false,
          "example": "'209358-2'",
          "comment": [
            "A trade identifier, globally unique, and monotonically increasing (not by `1`).",
            "All trades sharing a single taker execution share the same first component (before `-`), and `event_time`.",
            "`trade_id` is guaranteed to be consistent across MarketData `Trade` and Trading `Fill`."
          ]
        },
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 15,
          "array_depth": 0,
          "optional": false,
          "example": "'0x10000101000203040506'",
          "comment": [
            "An order identifier"
          ]
        },
        {
          "name": "venue",
          "lite_name": "v",
          "semantic_type": "Venue",
          "json_type": "Venue",
          "index": 16,
          "array_depth": 0,
          "optional": false,
          "example": "'ORDERBOOK'",
          "comment": [
            "The venue where the trade occurred"
          ]
        },
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 18,
          "array_depth": 0,
          "optional": false,
          "example": "'23042'",
          "comment": [
            "A unique identifier for the active order within a subaccount, specified by the client",
            "This is used to identify the order in the client's system",
            "This field can be used for order amendment/cancellation, but has no bearing on the smart contract layer",
            "This field will not be propagated to the smart contract, and should not be signed by the client",
            "This value must be unique for all active orders in a subaccount, or amendment/cancellation will not work as expected",
            "Gravity UI will generate a random clientOrderID for each order in the range [0, 2^63 - 1]",
            "To prevent any conflicts, client machines should generate a random clientOrderID in the range [2^63, 2^64 - 1]",
            "",
            "When GRVT Backend receives an order with an overlapping clientOrderID, we will reject the order with rejectReason set to overlappingClientOrderId"
          ]
        },
        {
          "name": "signer",
          "lite_name": "s1",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 20,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The address (public key) of the wallet signing the payload"
          ]
        },
        {
          "name": "broker",
          "lite_name": "b",
          "semantic_type": "BrokerTag",
          "json_type": "BrokerTag",
          "index": 21,
          "array_depth": 0,
          "optional": true,
          "default": "",
          "comment": [
            "Specifies the broker who brokered the order"
          ]
        },
        {
          "name": "is_rpi",
          "lite_name": "ir1",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 22,
          "array_depth": 0,
          "optional": false,
          "example": "false",
          "comment": [
            "If the trade is a RPI trade"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFillHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Fill",
          "json_type": "Fill",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The private trades matching the request asset"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the query from"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFundingPaymentHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID to request for"
          ]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "all",
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The perpetual instrument to filter for"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "The start time to apply in unix nanoseconds. If nil, this defaults to all start times. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "now()",
          "example": "'1697788800000000000'",
          "comment": [
            "The end time to apply in unix nanoseconds. If nil, this defaults to all end times. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "''",
          "comment": [
            "The cursor to indicate when to start the query from"
          ]
        }
      ],
      "comment": [
        "Query for all historical funding payments made by a single account.",
        "",
        "Pagination works as follows:\u003cul\u003e\u003cli\u003eWe perform a reverse chronological lookup, starting from `end_time`. If `end_time` is not set, we start from the most recent data.\u003c/li\u003e\u003cli\u003eThe lookup is limited to `limit` records. If more data is requested, the response will contain a `next` cursor for you to query the next page.\u003c/li\u003e\u003cli\u003eIf a `cursor` is provided, it will be used to fetch results from that point onwards.\u003c/li\u003e\u003cli\u003ePagination will continue until the `start_time` is reached. If `start_time` is not set, pagination will continue as far back as our data retention policy allows.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "FundingPayment",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the event was emitted in unix nanoseconds"
          ]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID that made the funding payment"
          ]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The perpetual instrument being funded"
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The currency of the funding payment"
          ]
        },
        {
          "name": "amount",
          "lite_name": "a",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'9.75'",
          "comment": [
            "The amount of the funding payment. Positive if paid, negative if received"
          ]
        },
        {
          "name": "tx_id",
          "lite_name": "ti",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'209358'",
          "comment": [
            "The transaction ID of the funding payment.",
            "Funding payments can be triggered by a trade, transfer, or liquidation.",
            "The `tx_id` will match the corresponding `trade_id` or `tx_id`."
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFundingPaymentHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "FundingPayment",
          "json_type": "FundingPayment",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The funding payments matching the request asset"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the query from"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiSubAccountSummaryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID to filter by"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "SpotBalance",
      "is_root": false,
      "fields": [
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The currency you hold a spot balance in"
          ]
        },
        {
          "name": "balance",
          "lite_name": "b",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "This currency's balance in this trading account."
          ]
        },
        {
          "name": "index_price",
          "lite_name": "ip",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1.0000102'",
          "comment": [
            "The index price of this currency. (reported in `USD`)"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "SubAccount",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the event was emitted in unix nanoseconds"
          ]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID this entry refers to"
          ]
        },
        {
          "name": "margin_type",
          "lite_name": "mt",
          "semantic_type": "MarginType",
          "json_type": "MarginType",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'SIMPLE_CROSS_MARGIN'",
          "comment": [
            "The type of margin algorithm this subaccount uses"
          ]
        },
        {
          "name": "settle_currency",
          "lite_name": "sc",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The settlement, margin, and reporting currency of this account.",
            "This subaccount can only open positions quoted in this currency",
            "",
            "In the future, when users select a Multi-Currency Margin Type, this will be USD",
            "All other assets are converted to this currency for the purpose of calculating margin"
          ]
        },
        {
          "name": "unrealized_pnl",
          "lite_name": "up",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The total unrealized PnL of all positions owned by this subaccount, denominated in quote currency decimal units.",
            "`unrealized_pnl = sum(position.unrealized_pnl * position.quote_index_price) / settle_index_price`"
          ]
        },
        {
          "name": "total_equity",
          "lite_name": "te",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The notional value of your account if all positions are closed, excluding trading fees (reported in `settle_currency`).",
            "`total_equity = sum(spot_balance.balance * spot_balance.index_price) / settle_index_price + unrealized_pnl`"
          ]
        },
        {
          "name": "initial_margin",
          "lite_name": "im",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The `total_equity` required to open positions in the account (reported in `settle_currency`).",
            "Computation is different depending on account's `margin_type`"
          ]
        },
        {
          "name": "maintenance_margin",
          "lite_name": "mm",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The `total_equity` required to avoid liquidation of positions in the account (reported in `settle_currency`).",
            "Computation is different depending on account's `margin_type`"
          ]
        },
        {
          "name": "available_balance",
          "lite_name": "ab",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The notional value available to transfer out of the trading account into the funding account (reported in `settle_currency`).",
            "`available_balance = total_equity - initial_margin - min(unrealized_pnl, 0)`"
          ]
        },
        {
          "name": "spot_balances",
          "lite_name": "sb",
          "semantic_type": "SpotBalance",
          "json_type": "SpotBalance",
          "index": 9,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of spot assets owned by this sub account, and their balances"
          ]
        },
        {
          "name": "positions",
          "lite_name": "p",
          "semantic_type": "Positions",
          "json_type": "Positions",
          "index": 10,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of positions owned by this sub account"
          ]
        },
        {
          "name": "settle_index_price",
          "lite_name": "si",
          "semantic_type": "string",
          "json_type": "string",
          "index": 11,
          "array_depth": 0,
          "optional": false,
          "example": "'1.0000102'",
          "comment": [
            "The index price of the settle currency. (reported in `USD`)"
          ]
        },
        {
          "name": "is_vault",
          "lite_name": "iv",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 12,
          "array_depth": 0,
          "optional": true,
          "comment": [
            "Whether this sub account is a vault"
          ]
        },
        {
          "name": "vault_im_additions",
          "lite_name": "vi",
          "semantic_type": "string",
          "json_type": "string",
          "index": 13,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "Total amount of IM (reported in `settle_currency`) deducted from the vault due to redemptions nearing the end of their redemption period"
          ]
        },
        {
          "name": "derisk_margin",
          "lite_name": "dm",
          "semantic_type": "string",
          "json_type": "string",
          "index": 14,
          "array_depth": 0,
          "optional": false,
          "example": "'185185.77'",
          "comment": [
            "The derisk margin of this sub account"
          ]
        },
        {
          "name": "derisk_to_maintenance_margin_ratio",
          "lite_name": "dt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 15,
          "array_depth": 0,
          "optional": false,
          "example": "'1.5'",
          "comment": [
            "The derisk margin to maintenance margin ratio of this sub account"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiSubAccountSummaryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "SubAccount",
          "json_type": "SubAccount",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The sub account matching the request sub account"
          ]
        }
      ],
      "comment": [
        "Query for sub-account details, including base currency balance, all derivative positions, margin levels, and P\u0026L."
      ]
    },
    {
      "name": "ApiSubAccountHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID to request for"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "Start time of sub account history in unix nanoseconds"
          ]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "now()",
          "example": "'1697788800000000000'",
          "comment": [
            "End time of sub account history in unix nanoseconds"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "''",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        }
      ],
      "comment": [
        "The request to get the history of a sub account",
        "SubAccount Summary values are snapshotted once every hour",
        "No snapshots are taken if the sub account has no activity in the hourly window",
        "History is preserved only for the last 30 days",
        "",
        "Pagination works as follows:\u003cul\u003e\u003cli\u003eWe perform a reverse chronological lookup, starting from `end_time`. If `end_time` is not set, we start from the most recent data.\u003c/li\u003e\u003cli\u003eThe lookup is limited to `limit` records. If more data is requested, the response will contain a `next` cursor for you to query the next page.\u003c/li\u003e\u003cli\u003eIf a `cursor` is provided, it will be used to fetch results from that point onwards.\u003c/li\u003e\u003cli\u003ePagination will continue until the `start_time` is reached. If `start_time` is not set, pagination will continue as far back as our data retention policy allows.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "ApiSubAccountHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "SubAccount",
          "json_type": "SubAccount",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The sub account history matching the request sub account"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "AggregatedAccountSummary",
      "is_root": false,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The main account ID of the account to which the summary belongs"
          ]
        },
        {
          "name": "total_equity",
          "lite_name": "te",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3945034.23'",
          "comment": [
            "Total equity of the main (+ sub) account, denominated in USD"
          ]
        },
        {
          "name": "spot_balances",
          "lite_name": "sb",
          "semantic_type": "SpotBalance",
          "json_type": "SpotBalance",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of spot assets owned by this main (+ sub) account, and their balances"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiAggregatedAccountSummaryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "AggregatedAccountSummary",
          "json_type": "AggregatedAccountSummary",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The aggregated account summary"
          ]
        }
      ],
      "comment": [
        "The aggregated account summary, that reports the total equity and spot balances of a funding (main) account, and its constituent trading (sub) accounts"
      ]
    },
    {
      "name": "FundingAccountSummary",
      "is_root": false,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The main account ID of the account to which the summary belongs"
          ]
        },
        {
          "name": "total_equity",
          "lite_name": "te",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3945034.23'",
          "comment": [
            "Total equity of the main account, denominated in USD"
          ]
        },
        {
          "name": "spot_balances",
          "lite_name": "sb",
          "semantic_type": "SpotBalance",
          "json_type": "SpotBalance",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of spot assets owned by this main account, and their balances"
          ]
        }
      ],
      "comment": [
        "The funding account summary, that reports the total equity and spot balances of a funding (main) account"
      ]
    },
    {
      "name": "ClientTier",
      "is_root": false,
      "fields": [
        {
          "name": "tier",
          "lite_name": "t",
          "semantic_type": "uint8",
          "json_type": "integer",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": []
        },
        {
          "name": "futures_taker_fee",
          "lite_name": "ft",
          "semantic_type": "int32",
          "json_type": "integer",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": []
        },
        {
          "name": "futures_maker_fee",
          "lite_name": "fm",
          "semantic_type": "int32",
          "json_type": "integer",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": []
        },
        {
          "name": "options_taker_fee",
          "lite_name": "ot",
          "semantic_type": "int32",
          "json_type": "integer",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": []
        },
        {
          "name": "options_maker_fee",
          "lite_name": "om",
          "semantic_type": "int32",
          "json_type": "integer",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": []
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFundingAccountSummaryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "FundingAccountSummary",
          "json_type": "FundingAccountSummary",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The funding account summary"
          ]
        },
        {
          "name": "tier",
          "lite_name": "t",
          "semantic_type": "ClientTier",
          "json_type": "ClientTier",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Client fee tier at the time of query"
          ]
        }
      ],
      "comment": [
        "The funding account summary, that reports the total equity and spot balances of a funding (main) account"
      ]
    },
    {
      "name": "ApiSetInitialLeverageRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID to set the leverage for"
          ]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The instrument to set the leverage for"
          ]
        },
        {
          "name": "leverage",
          "lite_name": "l",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'10'",
          "comment": [
            "The leverage to set for the sub account"
          ]
        }
      ],
      "comment": [
        "The request to set the initial leverage of a sub account"
      ]
    },
    {
      "name": "ApiSetInitialLeverageResponse",
      "is_root": true,
      "fields": [
        {
          "name": "success",
          "lite_name": "s",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'true'",
          "comment": [
            "Whether the leverage was set successfully"
          ]
        }
      ],
      "comment": [
        "The response to set the initial leverage of a sub account"
      ]
    },
    {
      "name": "ApiGetAllInitialLeverageRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID to get the leverage for"
          ]
        }
      ],
      "comment": [
        "The request to get the initial leverage of a sub account"
      ]
    },
    {
      "name": "InitialLeverageResult",
      "is_root": false,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The instrument to get the leverage for"
          ]
        },
        {
          "name": "leverage",
          "lite_name": "l",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'10'",
          "comment": [
            "The initial leverage of the sub account"
          ]
        },
        {
          "name": "min_leverage",
          "lite_name": "ml",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'10'",
          "comment": [
            "The min leverage this sub account can set"
          ]
        },
        {
          "name": "max_leverage",
          "lite_name": "ml1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'50'",
          "comment": [
            "The max leverage this sub account can set"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetAllInitialLeverageResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "InitialLeverageResult",
          "json_type": "InitialLeverageResult",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The initial leverage of the sub account"
          ]
        }
      ],
      "comment": [
        "The response to get the initial leverage of a sub account"
      ]
    },
    {
      "name": "Signature",
      "is_root": false,
      "fields": [
        {
          "name": "signer",
          "lite_name": "s",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The address (public key) of the wallet signing the payload"
          ]
        },
        {
          "name": "r",
          "lite_name": "r",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xb788d96fee91c7cdc35918e0441b756d4000ec1d07d900c73347d9abbc20acc8'",
          "comment": [
            "Signature R"
          ]
        },
        {
          "name": "s",
          "lite_name": "s1",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'0x3d786193125f7c29c958647da64d0e2875ece2c3f845a591bdd7dae8c475e26d'",
          "comment": [
            "Signature S"
          ]
        },
        {
          "name": "v",
          "lite_name": "v",
          "semantic_type": "uint8",
          "json_type": "integer",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'28'",
          "comment": [
            "Signature V"
          ]
        },
        {
          "name": "expiration",
          "lite_name": "e",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Timestamp after which this signature expires, expressed in unix nanoseconds. Must be capped at 30 days"
          ]
        },
        {
          "name": "nonce",
          "lite_name": "n",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'1234567890'",
          "comment": [
            "Users can randomly generate this value, used as a signature deconflicting key.",
            "ie. You can send the same exact instruction twice with different nonces.",
            "When the same nonce is used, the same payload will generate the same signature.",
            "Our system will consider the payload a duplicate, and ignore it."
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiSetDeriskToMaintenanceMarginRatioRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID to set the leverage for"
          ]
        },
        {
          "name": "ratio",
          "lite_name": "r",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'1.5'",
          "comment": [
            "The derisk margin to maintenance margin ratio of this sub account"
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The signature of this operation"
          ]
        }
      ],
      "comment": [
        "The request to set the derisk margin to maintenance margin ratio of a sub account"
      ]
    },
    {
      "name": "ApiSetDeriskToMaintenanceMarginRatioResponse",
      "is_root": true,
      "fields": [
        {
          "name": "success",
          "lite_name": "s",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'true'",
          "comment": [
            "Whether the derisk margin to maintenance margin ratio was set successfully"
          ]
        }
      ],
      "comment": [
        "The response to set the derisk margin to maintenance margin ratio of a sub account"
      ]
    },
    {
      "name": "JSONRPCRequest",
      "is_root": true,
      "fields": [
        {
          "name": "jsonrpc",
          "lite_name": "j",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2.0'",
          "comment": [
            "The JSON RPC version to use for the request"
          ]
        },
        {
          "name": "method",
          "lite_name": "m",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'subscribe'",
          "comment": [
            "The method to use for the request (eg: `subscribe` / `unsubscribe` / `v1/instrument` )"
          ]
        },
        {
          "name": "params",
          "lite_name": "p",
          "semantic_type": "any",
          "json_type": "object",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The parameters for the request"
          ]
        },
        {
          "name": "id",
          "lite_name": "i",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "123",
          "comment": [
            "Optional Field which is used to match the response by the client.",
            "If not passed, this field will not be returned"
          ]
        }
      ],
      "comment": [
        "All Websocket JSON RPC Requests are housed in this wrapper. You may specify a stream, and a list of feeds to subscribe to.",
        "If a `request_id` is supplied in this JSON RPC request, it will be propagated back to any relevant JSON RPC responses (including error).",
        "When subscribing to the same primary selector again, the previous secondary selector will be replaced. See `Overview` page for more details."
      ]
    },
    {
      "name": "Error",
      "is_root": true,
      "fields": [
        {
          "name": "code",
          "lite_name": "c",
          "semantic_type": "uint16",
          "json_type": "integer",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "123",
          "comment": [
            "The error code for the request"
          ]
        },
        {
          "name": "message",
          "lite_name": "m",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'An error occurred'",
          "comment": [
            "The error message for the request"
          ]
        }
      ],
      "comment": [
        "An error response"
      ]
    },
    {
      "name": "JSONRPCResponse",
      "is_root": true,
      "fields": [
        {
          "name": "jsonrpc",
          "lite_name": "j",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2.0'",
          "comment": [
            "The JSON RPC version to use for the request"
          ]
        },
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "any",
          "json_type": "object",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "null",
          "comment": [
            "The result for the request"
          ]
        },
        {
          "name": "error",
          "lite_name": "e",
          "semantic_type": "Error",
          "json_type": "Error",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "null",
          "comment": [
            "The error for the request"
          ]
        },
        {
          "name": "id",
          "lite_name": "i",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "123",
          "comment": [
            "Optional Field which is used to match the response by the client.",
            "If not passed, this field will not be returned"
          ]
        },
        {
          "name": "method",
          "lite_name": "m",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'subscribe'",
          "comment": [
            "The method used in the request for this response (eg: `subscribe` / `unsubscribe` / `v1/instrument` )"
          ]
        }
      ],
      "comment": [
        "All Websocket JSON RPC Responses are housed in this wrapper. It returns a confirmation of the JSON RPC subscribe request.",
        "If a `request_id` is supplied in the JSON RPC request, it will be propagated back in this JSON RPC response."
      ]
    },
    {
      "name": "WSSubscribeParams",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.d'",
          "comment": [
            "The channel to subscribe to (eg: ticker.s / ticker.d)"
          ]
        },
        {
          "name": "selectors",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp@500', 'ETH_USDT_Perp@500']",
          "comment": [
            "The list of feeds to subscribe to"
          ]
        },
        {
          "name": "use_global_sequence_number",
          "lite_name": "ug",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "false",
          "example": "true",
          "comment": [
            "Whether to use the global sequence number for the stream"
          ]
        }
      ],
      "comment": [
        "All V1 Websocket Subscription Requests are housed in this wrapper. You may specify a stream and a list of feeds to subscribe to.",
        "When subscribing to the same primary selector again, the previous secondary selector will be replaced. See `Overview` page for more details.",
        "Sequence numbers can be either gateway-specific or global:",
        "- **Gateway Unique Sequence Number**: Increments by one per stream, resets to 0 on gateway restart.",
        "- **Global Unique Sequence Number**: A cluster-wide unique number assigned to each cluster payload, does not reset on gateway restarts, and can be used to track and identify message order across streams using `sequence_number` and `prev_sequence_number` in the feed response.",
        "Set `useGlobalSequenceNumber = true` if you need a persistent, unique identifier across all streams or ordering across multiple feeds."
      ]
    },
    {
      "name": "WSSubscribeResult",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.d'",
          "comment": [
            "The channel to subscribe to (eg: ticker.s / ticker.d)"
          ]
        },
        {
          "name": "subs",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp@500', 'ETH_USDT_Perp@500']",
          "comment": [
            "The list of feeds subscribed to"
          ]
        },
        {
          "name": "unsubs",
          "lite_name": "u",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp@500', 'ETH_USDT_Perp@500']",
          "comment": [
            "The list of feeds unsubscribed from"
          ]
        },
        {
          "name": "num_snapshots",
          "lite_name": "ns",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "example": "10",
          "comment": [
            "The number of snapshot payloads to expect for each subscribed feed. Returned in same order as `subs`"
          ]
        },
        {
          "name": "first_sequence_number",
          "lite_name": "fs",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 1,
          "optional": false,
          "example": "872634876",
          "comment": [
            "The first sequence number to expect for each subscribed feed. Returned in same order as `subs`"
          ]
        },
        {
          "name": "latest_sequence_number",
          "lite_name": "ls",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 5,
          "array_depth": 1,
          "optional": false,
          "example": "872634875",
          "comment": [
            "The sequence number of the most recent message in the stream. Next received sequence number must be larger than this one. Returned in same order as `subs`"
          ]
        }
      ],
      "comment": [
        "To ensure you always know if you have missed any payloads, GRVT servers apply the following heuristics to sequence numbers:\u003cul\u003e\u003cli\u003eAll snapshot payloads will have a sequence number of `0`. All delta payloads will have a sequence number of `1+`. So its easy to distinguish between snapshots, and deltas\u003c/li\u003e\u003cli\u003eNum snapshots returned in Response (per stream): You can ensure that you received the right number of snapshots\u003c/li\u003e\u003cli\u003eFirst sequence number returned in Response (per stream): You can ensure that you received the first stream, without gaps from snapshots\u003c/li\u003e\u003cli\u003eSequence numbers should always monotonically increase by `1`. If it decreases, or increases by more than `1`. Please reconnect\u003c/li\u003e\u003cli\u003eDuplicate sequence numbers are possible due to network retries. If you receive a duplicate, please ignore it, or idempotently re-update it.\u003c/li\u003e\u003c/ul\u003e",
        "When subscribing to the same primary selector again, the previous secondary selector will be replaced. See `Overview` page for more details."
      ]
    },
    {
      "name": "WSUnsubscribeParams",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.d'",
          "comment": [
            "The channel to unsubscribe from (eg: ticker.s / ticker.d)"
          ]
        },
        {
          "name": "selectors",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp', 'ETH_USDT_Perp']",
          "comment": [
            "The list of feeds to unsubscribe from"
          ]
        },
        {
          "name": "use_global_sequence_number",
          "lite_name": "ug",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "false",
          "example": "true",
          "comment": [
            "Whether to use the global sequence number for the stream"
          ]
        }
      ],
      "comment": [
        "All V1 Websocket Unsubscription Requests are housed in this wrapper. You may specify a stream, a list of feeds and whether those feeds use global sequence numbers to unsubscribe from."
      ]
    },
    {
      "name": "WSUnsubscribeResult",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.d'",
          "comment": [
            "The channel to subscribe to (eg: ticker.s / ticker.d)"
          ]
        },
        {
          "name": "unsubs",
          "lite_name": "u",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp@500', 'ETH_USDT_Perp@500']",
          "comment": [
            "The list of feeds unsubscribed from"
          ]
        }
      ],
      "comment": [
        "Returns a confirmation of all unsubscribes"
      ]
    },
    {
      "name": "WSSubscribeRequestV1Legacy",
      "is_root": true,
      "fields": [
        {
          "name": "request_id",
          "lite_name": "ri",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 0,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "123",
          "comment": [
            "Optional Field which is used to match the response by the client.",
            "If not passed, this field will not be returned"
          ]
        },
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.d'",
          "comment": [
            "The channel to subscribe to (eg: ticker.s / ticker.d)"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp', 'ETH_USDT_Perp']",
          "comment": [
            "The list of feeds to subscribe to"
          ]
        },
        {
          "name": "method",
          "lite_name": "m",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'subscribe'",
          "comment": [
            "The method to use for the request (eg: subscribe / unsubscribe)"
          ]
        },
        {
          "name": "is_full",
          "lite_name": "if",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "false",
          "example": "true",
          "comment": [
            "Whether the request is for full data or lite data"
          ]
        }
      ],
      "comment": [
        "All V1 Websocket Requests are housed in this wrapper. You may specify a stream, and a list of feeds to subscribe to.",
        "If a `request_id` is supplied in this JSON RPC request, it will be propagated back to any relevant JSON RPC responses (including error).",
        "When subscribing to the same primary selector again, the previous secondary selector will be replaced. See `Overview` page for more details."
      ]
    },
    {
      "name": "WSSubscribeResponseV1Legacy",
      "is_root": true,
      "fields": [
        {
          "name": "request_id",
          "lite_name": "ri",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 0,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "123",
          "comment": [
            "Optional Field which is used to match the response by the client.",
            "If not passed, this field will not be returned"
          ]
        },
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.d'",
          "comment": [
            "The channel to subscribe to (eg: ticker.s / ticker.d)"
          ]
        },
        {
          "name": "subs",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp@500', 'ETH_USDT_Perp@500']",
          "comment": [
            "The list of feeds subscribed to"
          ]
        },
        {
          "name": "unsubs",
          "lite_name": "u",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp@500', 'ETH_USDT_Perp@500']",
          "comment": [
            "The list of feeds unsubscribed from"
          ]
        },
        {
          "name": "num_snapshots",
          "lite_name": "ns",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 4,
          "array_depth": 1,
          "optional": false,
          "example": "10",
          "comment": [
            "The number of snapshot payloads to expect for each subscribed feed. Returned in same order as `subs`"
          ]
        },
        {
          "name": "first_sequence_number",
          "lite_name": "fs",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 5,
          "array_depth": 1,
          "optional": false,
          "example": "872634876",
          "comment": [
            "The first sequence number to expect for each subscribed feed. Returned in same order as `subs`"
          ]
        },
        {
          "name": "latest_sequence_number",
          "lite_name": "ls",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 6,
          "array_depth": 1,
          "optional": false,
          "example": "872634875",
          "comment": [
            "The sequence number of the most recent message in the stream. Next received sequence number must be larger than this one. Returned in same order as `subs`"
          ]
        }
      ],
      "comment": [
        "All V1 Websocket Responses are housed in this wrapper. It returns a confirmation of the JSON RPC subscribe request.",
        "If a `request_id` is supplied in the JSON RPC request, it will be propagated back in this JSON RPC response.",
        "To ensure you always know if you have missed any payloads, GRVT servers apply the following heuristics to sequence numbers:\u003cul\u003e\u003cli\u003eAll snapshot payloads will have a sequence number of `0`. All delta payloads will have a sequence number of `1+`. So its easy to distinguish between snapshots, and deltas\u003c/li\u003e\u003cli\u003eNum snapshots returned in Response (per stream): You can ensure that you received the right number of snapshots\u003c/li\u003e\u003cli\u003eFirst sequence number returned in Response (per stream): You can ensure that you received the first stream, without gaps from snapshots\u003c/li\u003e\u003cli\u003eSequence numbers should always monotonically increase by `1`. If it decreases, or increases by more than `1`. Please reconnect\u003c/li\u003e\u003cli\u003eDuplicate sequence numbers are possible due to network retries. If you receive a duplicate, please ignore it, or idempotently re-update it.\u003c/li\u003e\u003c/ul\u003e",
        "When subscribing to the same primary selector again, the previous secondary selector will be replaced. See `Overview` page for more details."
      ]
    },
    {
      "name": "WSOrderbookLevelsFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ],
          "selector": "primary"
        },
        {
          "name": "rate",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": [
            "The minimal rate at which we publish feeds (in milliseconds)",
            "Delta (50, 100, 500, 1000)",
            "Snapshot (500, 1000)"
          ],
          "selector": "secondary"
        },
        {
          "name": "depth",
          "lite_name": "d",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "'0'",
          "example": "50",
          "comment": [
            "Depth of the order book to be retrieved",
            "Delta(0 - `unlimited`)",
            "Snapshot(10, 50, 100, 500)"
          ],
          "selector": "secondary"
        }
      ],
      "comment": [
        "Subscribes to aggregated orderbook updates for a single instrument. The `book.s` channel offers simpler integration. To experience higher publishing rates, please use the `book.d` channel.",
        "Unlike the `book.d` channel which publishes an initial snapshot, then only streams deltas after, the `book.s` channel publishes full snapshots at each feed.",
        "",
        "The Delta feed will work as follows:\u003cul\u003e\u003cli\u003eOn subscription, the server will send a full snapshot of all levels of the Orderbook.\u003c/li\u003e\u003cli\u003eAfter the snapshot, the server will only send levels that have changed in value.\u003c/li\u003e\u003c/ul\u003e",
        "",
        "Subscription Pattern:\u003cul\u003e\u003cli\u003eDelta - `instrument@rate`\u003c/li\u003e\u003cli\u003eSnapshot - `instrument@rate-depth`\u003c/li\u003e\u003c/ul\u003e",
        "",
        "Field Semantics:\u003cul\u003e\u003cli\u003e[DeltaOnly] If a level is not updated, level not published\u003c/li\u003e\u003cli\u003eIf a level is updated, {size: '123'}\u003c/li\u003e\u003cli\u003eIf a level is set to zero, {size: '0'}\u003c/li\u003e\u003cli\u003eIncoming levels will be published as soon as price moves\u003c/li\u003e\u003cli\u003eOutgoing levels will be published with `size = 0`\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "OrderbookLevel",
      "is_root": false,
      "fields": [
        {
          "name": "price",
          "lite_name": "p",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The price of the level, expressed in `9` decimals"
          ]
        },
        {
          "name": "size",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3456.78'",
          "comment": [
            "The number of assets offered, expressed in base asset decimal units"
          ]
        },
        {
          "name": "num_orders",
          "lite_name": "no",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'123'",
          "comment": [
            "The number of open orders at this level"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "OrderbookLevels",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the event was emitted in unix nanoseconds"
          ]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "bids",
          "lite_name": "b",
          "semantic_type": "OrderbookLevel",
          "json_type": "OrderbookLevel",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of best bids up till query depth"
          ]
        },
        {
          "name": "asks",
          "lite_name": "a",
          "semantic_type": "OrderbookLevel",
          "json_type": "OrderbookLevel",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of best asks up till query depth"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSOrderbookLevelsFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.book.s'",
          "comment": [
            "Stream name"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "OrderbookLevels",
          "json_type": "OrderbookLevels",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "An orderbook levels object matching the request filter"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSMiniTickerFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ],
          "selector": "primary"
        },
        {
          "name": "rate",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": [
            "The minimal rate at which we publish feeds (in milliseconds)",
            "Delta (0 - `raw`, 50, 100, 200, 500, 1000, 5000)",
            "Snapshot (200, 500, 1000, 5000)"
          ],
          "selector": "secondary"
        }
      ],
      "comment": [
        "Subscribes to a mini ticker feed for a single instrument. The `mini.s` channel offers simpler integration. To experience higher publishing rates, please use the `mini.d` channel.",
        "Unlike the `mini.d` channel which publishes an initial snapshot, then only streams deltas after, the `mini.s` channel publishes full snapshots at each feed.",
        "",
        "The Delta feed will work as follows:\u003cul\u003e\u003cli\u003eOn subscription, the server will send a full snapshot of the mini ticker.\u003c/li\u003e\u003cli\u003eAfter the snapshot, the server will only send deltas of the mini ticker.\u003c/li\u003e\u003cli\u003eThe server will send a delta if any of the fields in the mini ticker have changed.\u003c/li\u003e\u003c/ul\u003e",
        "",
        "Field Semantics:\u003cul\u003e\u003cli\u003e[DeltaOnly] If a field is not updated, {}\u003c/li\u003e\u003cli\u003eIf a field is updated, {field: '123'}\u003c/li\u003e\u003cli\u003eIf a field is set to zero, {field: '0'}\u003c/li\u003e\u003cli\u003eIf a field is set to null, {field: ''}\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "MiniTicker",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": true,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the event was emitted in unix nanoseconds"
          ]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "index_price",
          "lite_name": "ip",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The index price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "last_price",
          "lite_name": "lp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The last traded price of the instrument (also close price), expressed in `9` decimals"
          ]
        },
        {
          "name": "last_size",
          "lite_name": "ls",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets traded in the last trade, expressed in base asset decimal units"
          ]
        },
        {
          "name": "mid_price",
          "lite_name": "mp1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The mid price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_bid_price",
          "lite_name": "bb",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The best bid price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_bid_size",
          "lite_name": "bb1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets offered on the best bid price of the instrument, expressed in base asset decimal units"
          ]
        },
        {
          "name": "best_ask_price",
          "lite_name": "ba",
          "semantic_type": "string",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The best ask price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_ask_size",
          "lite_name": "ba1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 10,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets offered on the best ask price of the instrument, expressed in base asset decimal units"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSMiniTickerFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.mini.s'",
          "comment": [
            "Stream name"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "MiniTicker",
          "json_type": "MiniTicker",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "A mini ticker matching the request filter"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSTickerFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ],
          "selector": "primary"
        },
        {
          "name": "rate",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": [
            "The minimal rate at which we publish feeds (in milliseconds)",
            "Delta (100, 200, 500, 1000, 5000)",
            "Snapshot (500, 1000, 5000)"
          ],
          "selector": "secondary"
        }
      ],
      "comment": [
        "Subscribes to a ticker feed for a single instrument. The `ticker.s` channel offers simpler integration. To experience higher publishing rates, please use the `ticker.d` channel.",
        "Unlike the `ticker.d` channel which publishes an initial snapshot, then only streams deltas after, the `ticker.s` channel publishes full snapshots at each feed.",
        "",
        "The Delta feed will work as follows:\u003cul\u003e\u003cli\u003eOn subscription, the server will send a full snapshot of the ticker.\u003c/li\u003e\u003cli\u003eAfter the snapshot, the server will only send deltas of the ticker.\u003c/li\u003e\u003cli\u003eThe server will send a delta if any of the fields in the ticker have changed.\u003c/li\u003e\u003c/ul\u003e",
        "",
        "Field Semantics:\u003cul\u003e\u003cli\u003e[DeltaOnly] If a field is not updated, {}\u003c/li\u003e\u003cli\u003eIf a field is updated, {field: '123'}\u003c/li\u003e\u003cli\u003eIf a field is set to zero, {field: '0'}\u003c/li\u003e\u003cli\u003eIf a field is set to null, {field: ''}\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "Ticker",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": true,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the event was emitted in unix nanoseconds"
          ]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "index_price",
          "lite_name": "ip",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The index price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "last_price",
          "lite_name": "lp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The last traded price of the instrument (also close price), expressed in `9` decimals"
          ]
        },
        {
          "name": "last_size",
          "lite_name": "ls",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets traded in the last trade, expressed in base asset decimal units"
          ]
        },
        {
          "name": "mid_price",
          "lite_name": "mp1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The mid price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_bid_price",
          "lite_name": "bb",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The best bid price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_bid_size",
          "lite_name": "bb1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets offered on the best bid price of the instrument, expressed in base asset decimal units"
          ]
        },
        {
          "name": "best_ask_price",
          "lite_name": "ba",
          "semantic_type": "string",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The best ask price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_ask_size",
          "lite_name": "ba1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 10,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets offered on the best ask price of the instrument, expressed in base asset decimal units"
          ]
        },
        {
          "name": "funding_rate_8h_curr",
          "lite_name": "fr",
          "semantic_type": "string",
          "json_type": "string",
          "index": 11,
          "array_depth": 0,
          "optional": true,
          "example": "0.0003",
          "comment": [
            "The current funding rate of the instrument, expressed in percentage points"
          ]
        },
        {
          "name": "funding_rate_8h_avg",
          "lite_name": "fr1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 12,
          "array_depth": 0,
          "optional": true,
          "example": "0.0003",
          "comment": [
            "The average funding rate of the instrument (over last 8h), expressed in percentage points"
          ]
        },
        {
          "name": "interest_rate",
          "lite_name": "ir",
          "semantic_type": "string",
          "json_type": "string",
          "index": 13,
          "array_depth": 0,
          "optional": true,
          "example": "0.0003",
          "comment": [
            "The interest rate of the underlying, expressed in centibeeps (1/100th of a basis point)"
          ]
        },
        {
          "name": "forward_price",
          "lite_name": "fp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 14,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "[Options] The forward price of the option, expressed in `9` decimals"
          ]
        },
        {
          "name": "buy_volume_24h_b",
          "lite_name": "bv",
          "semantic_type": "string",
          "json_type": "string",
          "index": 15,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The 24 hour taker buy volume of the instrument, expressed in base asset decimal units"
          ]
        },
        {
          "name": "sell_volume_24h_b",
          "lite_name": "sv",
          "semantic_type": "string",
          "json_type": "string",
          "index": 16,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The 24 hour taker sell volume of the instrument, expressed in base asset decimal units"
          ]
        },
        {
          "name": "buy_volume_24h_q",
          "lite_name": "bv1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 17,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The 24 hour taker buy volume of the instrument, expressed in quote asset decimal units"
          ]
        },
        {
          "name": "sell_volume_24h_q",
          "lite_name": "sv1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 18,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The 24 hour taker sell volume of the instrument, expressed in quote asset decimal units"
          ]
        },
        {
          "name": "high_price",
          "lite_name": "hp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 19,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The 24 hour highest traded price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "low_price",
          "lite_name": "lp1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 20,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The 24 hour lowest traded price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "open_price",
          "lite_name": "op",
          "semantic_type": "string",
          "json_type": "string",
          "index": 21,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The 24 hour first traded price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "open_interest",
          "lite_name": "oi",
          "semantic_type": "string",
          "json_type": "string",
          "index": 22,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The open interest in the instrument, expressed in base asset decimal units"
          ]
        },
        {
          "name": "long_short_ratio",
          "lite_name": "ls1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 23,
          "array_depth": 0,
          "optional": true,
          "example": "'0.5'",
          "comment": [
            "The ratio of accounts that are net long vs net short on this instrument"
          ]
        }
      ],
      "comment": [
        "Derived data such as the below, will not be included by default:",
        "  - 24 hour volume (`buyVolume + sellVolume`)",
        "  - 24 hour taker buy/sell ratio (`buyVolume / sellVolume`)",
        "  - 24 hour average trade price (`volumeQ / volumeU`)",
        "  - 24 hour average trade volume (`volume / trades`)",
        "  - 24 hour percentage change (`24hStatChange / 24hStat`)",
        "  - 48 hour statistics (`2 * 24hStat - 24hStatChange`)",
        "",
        "To query for an extended ticker payload, leverage the `greeks` and the `derived` flags.",
        "Ticker extensions are currently under design to offer you more convenience.",
        "These flags are only supported on the `Ticker Snapshot` WS endpoint, and on the `Ticker` API endpoint.",
        ""
      ]
    },
    {
      "name": "WSTickerFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.s'",
          "comment": [
            "Stream name"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Ticker",
          "json_type": "Ticker",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "A ticker matching the request filter"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSTradeFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ],
          "selector": "primary"
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": [
            "The limit to query for. Valid values are (50, 200, 500, 1000). Default is 50"
          ],
          "selector": "secondary"
        }
      ],
      "comment": [
        "Subscribes to a stream of Public Trades for an instrument."
      ]
    },
    {
      "name": "Trade",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the event was emitted in unix nanoseconds"
          ]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "is_taker_buyer",
          "lite_name": "it",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": [
            "If taker was the buyer on the trade"
          ]
        },
        {
          "name": "size",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The number of assets being traded, expressed in base asset decimal units"
          ]
        },
        {
          "name": "price",
          "lite_name": "p",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The traded price, expressed in `9` decimals"
          ]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the instrument at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "index_price",
          "lite_name": "ip",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The index price of the instrument at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "interest_rate",
          "lite_name": "ir",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "0.0003",
          "comment": [
            "The interest rate of the underlying at point of trade, expressed in centibeeps (1/100th of a basis point)"
          ]
        },
        {
          "name": "forward_price",
          "lite_name": "fp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "[Options] The forward price of the option at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "trade_id",
          "lite_name": "ti",
          "semantic_type": "string",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "'209358-2'",
          "comment": [
            "A trade identifier, globally unique, and monotonically increasing (not by `1`).",
            "All trades sharing a single taker execution share the same first component (before `-`), and `event_time`.",
            "`trade_id` is guaranteed to be consistent across MarketData `Trade` and Trading `Fill`."
          ]
        },
        {
          "name": "venue",
          "lite_name": "v",
          "semantic_type": "Venue",
          "json_type": "Venue",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The venue where the trade occurred"
          ]
        },
        {
          "name": "is_rpi",
          "lite_name": "ir1",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 13,
          "array_depth": 0,
          "optional": false,
          "example": "false",
          "comment": [
            "If the trade is a RPI trade"
          ]
        }
      ],
      "comment": [
        "All private RFQs and Private AXEs will be filtered out from the responses"
      ]
    },
    {
      "name": "WSTradeFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.trade'",
          "comment": [
            "Stream name"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Trade",
          "json_type": "Trade",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "A public trade matching the request filter"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSCandlestickFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ],
          "selector": "primary"
        },
        {
          "name": "interval",
          "lite_name": "i1",
          "semantic_type": "CandlestickInterval",
          "json_type": "CandlestickInterval",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The interval of each candlestick"
          ],
          "selector": "secondary"
        },
        {
          "name": "type",
          "lite_name": "t",
          "semantic_type": "CandlestickType",
          "json_type": "CandlestickType",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The type of candlestick data to retrieve"
          ],
          "selector": "secondary"
        }
      ],
      "comment": [
        "Subscribes to a stream of Kline/Candlestick updates for an instrument. A Kline is uniquely identified by its open time.",
        "A new Kline is published every interval (if it exists). Upon subscription, the server will send the 5 most recent Kline for the requested interval."
      ]
    },
    {
      "name": "Candlestick",
      "is_root": false,
      "fields": [
        {
          "name": "open_time",
          "lite_name": "ot",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Open time of kline bar in unix nanoseconds"
          ]
        },
        {
          "name": "close_time",
          "lite_name": "ct",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Close time of kline bar in unix nanosecond"
          ]
        },
        {
          "name": "open",
          "lite_name": "o",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The open price, expressed in underlying currency resolution units"
          ]
        },
        {
          "name": "close",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The close price, expressed in underlying currency resolution units"
          ]
        },
        {
          "name": "high",
          "lite_name": "h",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The high price, expressed in underlying currency resolution units"
          ]
        },
        {
          "name": "low",
          "lite_name": "l",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The low price, expressed in underlying currency resolution units"
          ]
        },
        {
          "name": "volume_b",
          "lite_name": "vb",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The underlying volume transacted, expressed in base asset decimal units"
          ]
        },
        {
          "name": "volume_q",
          "lite_name": "vq",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The quote volume transacted, expressed in quote asset decimal units"
          ]
        },
        {
          "name": "trades",
          "lite_name": "t",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "123456",
          "comment": [
            "The number of trades transacted"
          ]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        }
      ],
      "comment": [
        ""
      ]
    },
    {
      "name": "WSCandlestickFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.candle'",
          "comment": [
            "Stream name"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Candlestick",
          "json_type": "Candlestick",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "A candlestick entry matching the request filters"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSUnsubscribeAllParams",
      "is_root": true,
      "fields": [],
      "comment": [
        "All V1 Websocket Unsubscription Request to unsubscribe from all active websocket streams."
      ]
    },
    {
      "name": "StreamReference",
      "is_root": false,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.d'",
          "comment": [
            "The channel to subscribe to (eg: ticker.s / ticker.d)"
          ]
        },
        {
          "name": "selectors",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp', 'ETH_USDT_Perp']",
          "comment": [
            "The list of selectors for the stream"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSUnsubscribeAllResult",
      "is_root": true,
      "fields": [
        {
          "name": "stream_reference",
          "lite_name": "sr",
          "semantic_type": "StreamReference",
          "json_type": "StreamReference",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of stream references unsubscribed from"
          ]
        }
      ],
      "comment": [
        "Returns a list of all rooms the client has unsubscribed from."
      ]
    },
    {
      "name": "WSListStreamsParams",
      "is_root": true,
      "fields": [],
      "comment": [
        "List down all the streams this connection has connected to."
      ]
    },
    {
      "name": "WSListStreamsResult",
      "is_root": true,
      "fields": [
        {
          "name": "stream_reference",
          "lite_name": "sr",
          "semantic_type": "StreamReference",
          "json_type": "StreamReference",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of stream references  the connection is connected to"
          ]
        }
      ],
      "comment": [
        "Returns a list of all rooms the client has subscribed to."
      ]
    },
    {
      "name": "ApiOrderbookLevelsRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "depth",
          "lite_name": "d",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "50",
          "comment": [
            "Depth of the order book to be retrieved (10, 50, 100, 500)"
          ]
        }
      ],
      "comment": [
        "Retrieves aggregated price depth for a single instrument, with a maximum depth of 10 levels. Do not use this to poll for data -- a websocket subscription is much more performant, and useful."
      ]
    },
    {
      "name": "ApiOrderbookLevelsResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "OrderbookLevels",
          "json_type": "OrderbookLevels",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The orderbook levels objects matching the request asset"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiMiniTickerRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        }
      ],
      "comment": [
        "Retrieves a single mini ticker value for a single instrument. Please do not use this to repeatedly poll for data -- a websocket subscription is much more performant, and useful."
      ]
    },
    {
      "name": "ApiMiniTickerResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "MiniTicker",
          "json_type": "MiniTicker",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The mini ticker matching the request asset"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiTickerRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        }
      ],
      "comment": [
        "Retrieves a single ticker value for a single instrument. Please do not use this to repeatedly poll for data -- a websocket subscription is much more performant, and useful."
      ]
    },
    {
      "name": "ApiTickerResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Ticker",
          "json_type": "Ticker",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The mini ticker matching the request asset"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiTradeRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        }
      ],
      "comment": [
        "Retrieves up to 1000 of the most recent trades in any given instrument. Do not use this to poll for data -- a websocket subscription is much more performant, and useful.",
        "This endpoint offers public trading data, use the Trading APIs instead to query for your personalized trade tape."
      ]
    },
    {
      "name": "ApiTradeResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Trade",
          "json_type": "Trade",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The public trades matching the request asset"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiTradeHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "The start time to apply in nanoseconds. If nil, this defaults to all start times. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "now()",
          "example": "'1697788800000000000'",
          "comment": [
            "The end time to apply in nanoseconds. If nil, this defaults to all end times. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "''",
          "comment": [
            "The cursor to indicate when to start the query from"
          ]
        }
      ],
      "comment": [
        "Perform historical lookup of public trades in any given instrument.",
        "This endpoint offers public trading data, use the Trading APIs instead to query for your personalized trade tape.",
        "Only data from the last three months will be retained.",
        "",
        "Pagination works as follows:\u003cul\u003e\u003cli\u003eWe perform a reverse chronological lookup, starting from `end_time`. If `end_time` is not set, we start from the most recent data.\u003c/li\u003e\u003cli\u003eThe lookup is limited to `limit` records. If more data is requested, the response will contain a `next` cursor for you to query the next page.\u003c/li\u003e\u003cli\u003eIf a `cursor` is provided, it will be used to fetch results from that point onwards.\u003c/li\u003e\u003cli\u003ePagination will continue until the `start_time` is reached. If `start_time` is not set, pagination will continue as far back as our data retention policy allows.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "ApiTradeHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Trade",
          "json_type": "Trade",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The public trades matching the request asset"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetInstrumentRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        }
      ],
      "comment": [
        "Fetch a single instrument by supplying the asset or instrument name"
      ]
    },
    {
      "name": "Instrument",
      "is_root": false,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "instrument_hash",
          "lite_name": "ih",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0x030501'",
          "comment": [
            "The asset ID used for instrument signing."
          ]
        },
        {
          "name": "base",
          "lite_name": "b",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC'",
          "comment": [
            "The base currency"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The quote currency"
          ]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'PERPETUAL'",
          "comment": [
            "The kind of instrument"
          ]
        },
        {
          "name": "venues",
          "lite_name": "v",
          "semantic_type": "Venue",
          "json_type": "Venue",
          "index": 7,
          "array_depth": 1,
          "optional": false,
          "example": "['ORDERBOOK']",
          "comment": [
            "Venues that this instrument can be traded at"
          ]
        },
        {
          "name": "settlement_period",
          "lite_name": "sp1",
          "semantic_type": "InstrumentSettlementPeriod",
          "json_type": "InstrumentSettlementPeriod",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'PERPETUAL'",
          "comment": [
            "The settlement period of the instrument"
          ]
        },
        {
          "name": "base_decimals",
          "lite_name": "bd",
          "semantic_type": "int8",
          "json_type": "integer",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "3",
          "comment": [
            "The smallest denomination of the base asset supported by GRVT (+3 represents 0.001, -3 represents 1000, 0 represents 1)"
          ]
        },
        {
          "name": "quote_decimals",
          "lite_name": "qd",
          "semantic_type": "int8",
          "json_type": "integer",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "example": "3",
          "comment": [
            "The smallest denomination of the quote asset supported by GRVT (+3 represents 0.001, -3 represents 1000, 0 represents 1)"
          ]
        },
        {
          "name": "tick_size",
          "lite_name": "ts",
          "semantic_type": "string",
          "json_type": "string",
          "index": 11,
          "array_depth": 0,
          "optional": false,
          "example": "'0.01'",
          "comment": [
            "The size of a single tick, expressed in price decimal units"
          ]
        },
        {
          "name": "min_size",
          "lite_name": "ms",
          "semantic_type": "string",
          "json_type": "string",
          "index": 12,
          "array_depth": 0,
          "optional": false,
          "example": "'0.01'",
          "comment": [
            "The minimum contract size, expressed in base asset decimal units"
          ]
        },
        {
          "name": "create_time",
          "lite_name": "ct",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 14,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Creation time in unix nanoseconds"
          ]
        },
        {
          "name": "max_position_size",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 15,
          "array_depth": 0,
          "optional": false,
          "example": "'100.0'",
          "comment": [
            "The maximum position size, expressed in base asset decimal units"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetInstrumentResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Instrument",
          "json_type": "Instrument",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The instrument matching the request asset"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetFilteredInstrumentsRequest",
      "is_root": true,
      "fields": [
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 0,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "base",
          "lite_name": "b",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['BTC', 'ETH']",
          "comment": [
            "The base filter to apply. If nil, this defaults to all bases. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "is_active",
          "lite_name": "ia",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "false",
          "example": "true",
          "comment": [
            "Request for active instruments only"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 100000"
          ]
        }
      ],
      "comment": [
        "Fetch a list of instruments based on the filters provided"
      ]
    },
    {
      "name": "ApiGetFilteredInstrumentsResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Instrument",
          "json_type": "Instrument",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The instruments matching the request filter"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiCandlestickRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "interval",
          "lite_name": "i1",
          "semantic_type": "CandlestickInterval",
          "json_type": "CandlestickInterval",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The interval of each candlestick"
          ]
        },
        {
          "name": "type",
          "lite_name": "t",
          "semantic_type": "CandlestickType",
          "json_type": "CandlestickType",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The type of candlestick data to retrieve"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "Start time of kline data in unix nanoseconds"
          ]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "now()",
          "example": "'1697788800000000000'",
          "comment": [
            "End time of kline data in unix nanoseconds"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "''",
          "comment": [
            "The cursor to indicate when to start the query from"
          ]
        }
      ],
      "comment": [
        "Kline/Candlestick bars for an instrument. Klines are uniquely identified by their instrument, type, interval, and open time.",
        "",
        "Pagination works as follows:\u003cul\u003e\u003cli\u003eWe perform a reverse chronological lookup, starting from `end_time`. If `end_time` is not set, we start from the most recent data.\u003c/li\u003e\u003cli\u003eThe lookup is limited to `limit` records. If more data is requested, the response will contain a `next` cursor for you to query the next page.\u003c/li\u003e\u003cli\u003eIf a `cursor` is provided, it will be used to fetch results from that point onwards.\u003c/li\u003e\u003cli\u003ePagination will continue until the `start_time` is reached. If `start_time` is not set, pagination will continue as far back as our data retention policy allows.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "ApiCandlestickResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Candlestick",
          "json_type": "Candlestick",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The candlestick result set for given interval"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFundingRateRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "Start time of funding rate in unix nanoseconds"
          ]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "now()",
          "example": "'1697788800000000000'",
          "comment": [
            "End time of funding rate in unix nanoseconds"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "''",
          "comment": [
            "The cursor to indicate when to start the query from"
          ]
        }
      ],
      "comment": [
        "Lookup the historical funding rate of a perpetual future.",
        "",
        "Pagination works as follows:\u003cul\u003e\u003cli\u003eWe perform a reverse chronological lookup, starting from `end_time`. If `end_time` is not set, we start from the most recent data.\u003c/li\u003e\u003cli\u003eThe lookup is limited to `limit` records. If more data is requested, the response will contain a `next` cursor for you to query the next page.\u003c/li\u003e\u003cli\u003eIf a `cursor` is provided, it will be used to fetch results from that point onwards.\u003c/li\u003e\u003cli\u003ePagination will continue until the `start_time` is reached. If `start_time` is not set, pagination will continue as far back as our data retention policy allows.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "FundingRate",
      "is_root": false,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable instrument name:\u003cul\u003e\u003cli\u003ePerpetual: `ETH_USDT_Perp`\u003c/li\u003e\u003cli\u003eFuture: `BTC_USDT_Fut_20Oct23`\u003c/li\u003e\u003cli\u003eCall: `ETH_USDT_Call_20Oct23_2800`\u003c/li\u003e\u003cli\u003ePut: `ETH_USDT_Put_20Oct23_2800`\u003c/li\u003e\u003c/ul\u003e"
          ]
        },
        {
          "name": "funding_rate",
          "lite_name": "fr",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "0.0003",
          "comment": [
            "The funding rate of the instrument, expressed in percentage points"
          ]
        },
        {
          "name": "funding_time",
          "lite_name": "ft",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "The funding timestamp of the funding rate, expressed in unix nanoseconds"
          ]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the instrument at funding timestamp, expressed in `9` decimals"
          ]
        },
        {
          "name": "funding_rate_8_h_avg",
          "lite_name": "fr1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "0.0003",
          "comment": [
            "The 8h average funding rate of the instrument, expressed in percentage points"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFundingRateResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "FundingRate",
          "json_type": "FundingRate",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The funding rate result set for given interval"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetAllInstrumentsRequest",
      "is_root": true,
      "fields": [
        {
          "name": "is_active",
          "lite_name": "ia",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 0,
          "array_depth": 0,
          "optional": true,
          "default": "false",
          "example": "true",
          "comment": [
            "Fetch only active instruments"
          ]
        }
      ],
      "comment": [
        "Fetch all instruments"
      ]
    },
    {
      "name": "ApiGetAllInstrumentsResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Instrument",
          "json_type": "Instrument",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "List of instruments"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiQueryVaultManagerInvestorHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "vault_id",
          "lite_name": "vi",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2312134'",
          "comment": [
            "The unique identifier of the vault to filter by"
          ]
        },
        {
          "name": "only_own_investments",
          "lite_name": "oo",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": [
            "Whether to only return investments made by the manager"
          ]
        }
      ],
      "comment": [
        "Request for the manager to retrieve the vault investor history for their vault"
      ]
    },
    {
      "name": "ApiVaultInvestorHistory",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the event was emitted in unix nanoseconds"
          ]
        },
        {
          "name": "off_chain_account_id",
          "lite_name": "oc",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'ACC:123456'",
          "comment": [
            "The off chain account id of the investor, only visible to the manager"
          ]
        },
        {
          "name": "vault_id",
          "lite_name": "vi",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'2312134'",
          "comment": [
            "The unique identifier of the vault."
          ]
        },
        {
          "name": "type",
          "lite_name": "t",
          "semantic_type": "VaultInvestorAction",
          "json_type": "VaultInvestorAction",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'vaultInvest'",
          "comment": [
            "The type of transaction that occurred. List of types: vaultInvest, vaultBurnLpToken, vaultRedeem"
          ]
        },
        {
          "name": "price",
          "lite_name": "p",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The price of the vault LP tokens at the time of the event."
          ]
        },
        {
          "name": "size",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The amount of Vault LP tokens invested or redeemed."
          ]
        },
        {
          "name": "realized_pnl",
          "lite_name": "rp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The realized PnL of the vault."
          ]
        },
        {
          "name": "performance_fee",
          "lite_name": "pf",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The performance fee of the vault."
          ]
        }
      ],
      "comment": [
        "The vault investor history returned by the service to client"
      ]
    },
    {
      "name": "ApiQueryVaultManagerInvestorHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "ApiVaultInvestorHistory",
          "json_type": "ApiVaultInvestorHistory",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of vault investor history belong to the manager"
          ]
        }
      ],
      "comment": [
        "Response to retrieve the vault summary for a given vault"
      ]
    },
    {
      "name": "OrderLeg",
      "is_root": false,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The instrument to trade in this leg"
          ]
        },
        {
          "name": "size",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'10.5'",
          "comment": [
            "The total number of assets to trade in this leg, expressed in base asset decimal units."
          ]
        },
        {
          "name": "limit_price",
          "lite_name": "lp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'65038.01'",
          "comment": [
            "The limit price of the order leg, expressed in `9` decimals.",
            "This is the number of quote currency units to pay/receive for this leg.",
            "This should be `null/0` if the order is a market order"
          ]
        },
        {
          "name": "is_buying_asset",
          "lite_name": "ib",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": [
            "Specifies if the order leg is a buy or sell"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "TPSLOrderMetadata",
      "is_root": false,
      "fields": [
        {
          "name": "trigger_by",
          "lite_name": "tb",
          "semantic_type": "TriggerBy",
          "json_type": "TriggerBy",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'LAST'",
          "comment": [
            "Defines the price type that activates a Take Profit (TP) or Stop Loss (SL) order"
          ]
        },
        {
          "name": "trigger_price",
          "lite_name": "tp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.10'",
          "comment": [
            "The Trigger Price of the order, expressed in `9` decimals."
          ]
        },
        {
          "name": "close_position",
          "lite_name": "cp",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "false",
          "comment": [
            "If True, the order will close the position when the trigger price is reached"
          ]
        }
      ],
      "comment": [
        "Contains metadata for Take Profit (TP) and Stop Loss (SL) trigger orders.",
        "",
        "### Fields:",
        "- **triggerBy**: Defines the price type that activates the order (e.g., index price).",
        "- **triggerPrice**: The price at which the order is triggered, expressed in `9` decimal precision.",
        "",
        ""
      ]
    },
    {
      "name": "TriggerOrderMetadata",
      "is_root": false,
      "fields": [
        {
          "name": "trigger_type",
          "lite_name": "tt",
          "semantic_type": "TriggerType",
          "json_type": "TriggerType",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'TAKE_PROFIT'",
          "comment": [
            "Type of the trigger order. eg: Take Profit, Stop Loss, etc"
          ]
        },
        {
          "name": "tpsl",
          "lite_name": "t",
          "semantic_type": "TPSLOrderMetadata",
          "json_type": "TPSLOrderMetadata",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Contains metadata for Take Profit (TP) and Stop Loss (SL) trigger orders.",
            "",
            ""
          ]
        }
      ],
      "comment": [
        "Contains metadata related to trigger orders, such as Take Profit (TP) or Stop Loss (SL).",
        "",
        "Trigger orders are used to automatically execute an order when a predefined price condition is met, allowing traders to implement risk management strategies.",
        "",
        ""
      ]
    },
    {
      "name": "OrderMetadata",
      "is_root": false,
      "fields": [
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'23042'",
          "comment": [
            "A unique identifier for the active order within a subaccount, specified by the client",
            "This is used to identify the order in the client's system",
            "This field can be used for order amendment/cancellation, but has no bearing on the smart contract layer",
            "This field will not be propagated to the smart contract, and should not be signed by the client",
            "This value must be unique for all active orders in a subaccount, or amendment/cancellation will not work as expected",
            "Gravity UI will generate a random clientOrderID for each order in the range [0, 2^63 - 1]",
            "To prevent any conflicts, client machines should generate a random clientOrderID in the range [2^63, 2^64 - 1]",
            "",
            "When GRVT Backend receives an order with an overlapping clientOrderID, we will reject the order with rejectReason set to overlappingClientOrderId"
          ]
        },
        {
          "name": "create_time",
          "lite_name": "ct",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "[Filled by GRVT Backend] Time at which the order was received by GRVT in unix nanoseconds"
          ]
        },
        {
          "name": "trigger",
          "lite_name": "t",
          "semantic_type": "TriggerOrderMetadata",
          "json_type": "TriggerOrderMetadata",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "",
          "comment": [
            "Trigger fields are used to support any type of trigger order such as TP/SL"
          ]
        },
        {
          "name": "broker",
          "lite_name": "b",
          "semantic_type": "BrokerTag",
          "json_type": "BrokerTag",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "",
          "example": "'BROKER_CODE'",
          "comment": [
            "Specifies the broker who brokered the order"
          ]
        }
      ],
      "comment": [
        "Metadata fields are used to support Backend only operations. These operations are not trustless by nature.",
        "Hence, fields in here are never signed, and is never transmitted to the smart contract."
      ]
    },
    {
      "name": "OrderState",
      "is_root": false,
      "fields": [
        {
          "name": "status",
          "lite_name": "s",
          "semantic_type": "OrderStatus",
          "json_type": "OrderStatus",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The status of the order"
          ]
        },
        {
          "name": "reject_reason",
          "lite_name": "rr",
          "semantic_type": "OrderRejectReason",
          "json_type": "OrderRejectReason",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'CLIENT_CANCEL'",
          "comment": [
            "The reason for rejection or cancellation"
          ]
        },
        {
          "name": "book_size",
          "lite_name": "bs",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['10.5']",
          "comment": [
            "The number of assets available for orderbook/RFQ matching. Sorted in same order as Order.Legs"
          ]
        },
        {
          "name": "traded_size",
          "lite_name": "ts",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "example": "['1.5']",
          "comment": [
            "The total number of assets traded. Sorted in same order as Order.Legs"
          ]
        },
        {
          "name": "update_time",
          "lite_name": "ut",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the order was updated by GRVT, expressed in unix nanoseconds"
          ]
        },
        {
          "name": "avg_fill_price",
          "lite_name": "af",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 1,
          "optional": false,
          "example": "['60000.4']",
          "comment": [
            "The average fill price of the order. Sorted in same order as Order.Legs"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "Order",
      "is_root": false,
      "fields": [
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'0x1234567890abcdef'",
          "comment": [
            "[Filled by GRVT Backend] A unique 128-bit identifier for the order, deterministically generated within the GRVT backend"
          ]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount initiating the order"
          ]
        },
        {
          "name": "is_market",
          "lite_name": "im",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "false",
          "example": "false",
          "comment": [
            "If the order is a market order",
            "Market Orders do not have a limit price, and are always executed according to the maker order price.",
            "Market Orders must always be taker orders"
          ]
        },
        {
          "name": "time_in_force",
          "lite_name": "ti",
          "semantic_type": "TimeInForce",
          "json_type": "TimeInForce",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Four supported types of orders: GTT, IOC, AON, FOK:\u003cul\u003e",
            "\u003cli\u003ePARTIAL EXECUTION = GTT / IOC - allows partial size execution on each leg\u003c/li\u003e",
            "\u003cli\u003eFULL EXECUTION = AON / FOK - only allows full size execution on all legs\u003c/li\u003e",
            "\u003cli\u003eTAKER ONLY = IOC / FOK - only allows taker orders\u003c/li\u003e",
            "\u003cli\u003eMAKER OR TAKER = GTT / AON - allows maker or taker orders\u003c/li\u003e",
            "\u003c/ul\u003eExchange only supports (GTT, IOC, FOK)",
            "RFQ Maker only supports (GTT, AON), RFQ Taker only supports (FOK)"
          ]
        },
        {
          "name": "post_only",
          "lite_name": "po",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "false",
          "example": "false",
          "comment": [
            "If True, Order must be a maker order. It has to fill the orderbook instead of match it.",
            "If False, Order can be either a maker or taker order. \u003cb\u003eIn this case, order creation is currently subject to a speedbump of 25ms to ensure orders are matched against updated orderbook quotes.\u003c/b\u003e",
            "",
            "|               | Must Fill All | Can Fill Partial |",
            "| -             | -             | -                |",
            "| Must Be Taker | FOK + False   | IOC + False      |",
            "| Can Be Either | AON + False   | GTC + False      |",
            "| Must Be Maker | AON + True    | GTC + True       |",
            ""
          ]
        },
        {
          "name": "reduce_only",
          "lite_name": "ro",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "default": "false",
          "example": "false",
          "comment": [
            "If True, Order must reduce the position size, or be cancelled"
          ]
        },
        {
          "name": "legs",
          "lite_name": "l",
          "semantic_type": "OrderLeg",
          "json_type": "OrderLeg",
          "index": 6,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The legs present in this order",
            "The legs must be sorted by Asset.Instrument/Underlying/Quote/Expiration/StrikePrice"
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The signature approving this order"
          ]
        },
        {
          "name": "metadata",
          "lite_name": "m",
          "semantic_type": "OrderMetadata",
          "json_type": "OrderMetadata",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Order Metadata, ignored by the smart contract, and unsigned by the client"
          ]
        },
        {
          "name": "state",
          "lite_name": "s1",
          "semantic_type": "OrderState",
          "json_type": "OrderState",
          "index": 9,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "comment": [
            "[Filled by GRVT Backend] The current state of the order, ignored by the smart contract, and unsigned by the client"
          ]
        }
      ],
      "comment": [
        "Order is a typed payload used throughout the GRVT platform to express all orderbook, RFQ, and liquidation orders.",
        "GRVT orders are capable of expressing both single-legged, and multi-legged orders by default.",
        "This increases the learning curve slightly but reduces overall integration load, since the order payload is used across all GRVT trading venues.",
        "Given GRVT's trustless settlement model, the Order payload also carries the signature, required to trade the order on our ZKSync Hyperchain.",
        "",
        "All fields in the Order payload (except `id`, `metadata`, and `state`) are trustlessly enforced on our Hyperchain.",
        "This minimizes the amount of trust users have to offer to GRVT"
      ]
    },
    {
      "name": "ApiCreateOrderRequest",
      "is_root": true,
      "fields": [
        {
          "name": "order",
          "lite_name": "o",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The order to create"
          ]
        }
      ],
      "comment": [
        "Create an order on the orderbook for this trading account."
      ]
    },
    {
      "name": "ApiCreateOrderResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The created order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiCancelOrderRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID cancelling the order"
          ]
        },
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'0x1028403'",
          "comment": [
            "Cancel the order with this `order_id`"
          ]
        },
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'23042'",
          "comment": [
            "Cancel the order with this `client_order_id`"
          ]
        },
        {
          "name": "time_to_live_ms",
          "lite_name": "tt",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "100",
          "example": "'500'",
          "comment": [
            "Specifies the time-to-live (in milliseconds) for this cancellation.",
            "During this period, any order creation with a matching `client_order_id` will be cancelled and not be added to the GRVT matching engine.",
            "This mechanism helps mitigate time-of-flight issues where cancellations might arrive before the corresponding orders.",
            "Hence, cancellation by `order_id` ignores this field as the exchange can only assign `order_id`s to already-processed order creations.",
            "The duration cannot be negative, is rounded down to the nearest 100ms (e.g., `'670'` -\u003e `'600'`, `'30'` -\u003e `'0'`) and capped at 5 seconds (i.e., `'5000'`).",
            "Value of `'0'` or omission results in the default time-to-live value being applied.",
            "If the caller requests multiple successive cancellations for a given order, such that the time-to-live windows overlap, only the first request will be considered.",
            ""
          ]
        }
      ],
      "comment": [
        "Cancel an order on the orderbook for this trading account. Either `order_id` or `client_order_id` must be provided."
      ]
    },
    {
      "name": "ApiCancelAllOrdersRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID cancelling all orders"
          ]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be cancelled"
          ]
        },
        {
          "name": "base",
          "lite_name": "b",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['BTC', 'ETH']",
          "comment": [
            "The base filter to apply. If nil, this defaults to all bases. Otherwise, only entries matching the filter will be cancelled"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be cancelled"
          ]
        }
      ],
      "comment": [
        "Cancel all orders on the orderbook for this trading account. This may not match new orders in flight."
      ]
    },
    {
      "name": "ApiOpenOrdersRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID to filter by"
          ]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "base",
          "lite_name": "b",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['BTC', 'ETH']",
          "comment": [
            "The base filter to apply. If nil, this defaults to all bases. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be returned"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiOpenOrdersResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The Open Orders matching the request filter"
          ]
        }
      ],
      "comment": [
        "Retrieves all open orders for the account. This may not match new orders in flight."
      ]
    },
    {
      "name": "ApiOrderHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID to filter by"
          ]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "base",
          "lite_name": "b",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['BTC', 'ETH']",
          "comment": [
            "The base filter to apply. If nil, this defaults to all bases. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 1,
          "optional": true,
          "default": "all",
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "The start time to apply in nanoseconds. If nil, this defaults to all start times. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "default": "now()",
          "example": "'1697788800000000000'",
          "comment": [
            "The end time to apply in nanoseconds. If nil, this defaults to all end times. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 6,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "''",
          "comment": [
            "The cursor to indicate when to start the query from"
          ]
        }
      ],
      "comment": [
        "Retrieves the order history for the account.",
        "",
        "Pagination works as follows:\u003cul\u003e\u003cli\u003eWe perform a reverse chronological lookup, starting from `end_time`. If `end_time` is not set, we start from the most recent data.\u003c/li\u003e\u003cli\u003eThe lookup is limited to `limit` records. If more data is requested, the response will contain a `next` cursor for you to query the next page.\u003c/li\u003e\u003cli\u003eIf a `cursor` is provided, it will be used to fetch results from that point onwards.\u003c/li\u003e\u003cli\u003ePagination will continue until the `start_time` is reached. If `start_time` is not set, pagination will continue as far back as our data retention policy allows.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "ApiOrderHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The Open Orders matching the request filter"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the query from"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "EmptyRequest",
      "is_root": true,
      "fields": [],
      "comment": [
        "Used for requests that do not require any parameters"
      ]
    },
    {
      "name": "Ack",
      "is_root": false,
      "fields": [
        {
          "name": "ack",
          "lite_name": "a",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'true'",
          "comment": [
            "Gravity has acknowledged that the request has been successfully received and it will process it in the backend"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "AckResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Ack",
          "json_type": "Ack",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The Ack Object"
          ]
        }
      ],
      "comment": [
        "Used to acknowledge a request has been received and will be processed"
      ]
    },
    {
      "name": "ApiGetOrderRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID to filter by"
          ]
        },
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'0x1028403'",
          "comment": [
            "Filter for `order_id`"
          ]
        },
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'23042'",
          "comment": [
            "Filter for `client_order_id`"
          ]
        }
      ],
      "comment": [
        "Retrieve the order for the account. Either `order_id` or `client_order_id` must be provided."
      ]
    },
    {
      "name": "ApiGetOrderResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The order object for the requested filter"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiCancelOnDisconnectRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID cancelling the orders for"
          ]
        },
        {
          "name": "countdown_time",
          "lite_name": "ct",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "1000",
          "example": "300",
          "comment": [
            "Countdown time in milliseconds (ex. 120000 for 120s).",
            "",
            "0 to disable the timer.",
            "",
            "Does not accept negative values.",
            "",
            "Minimum acceptable value is 1,000.",
            "",
            "Maximum acceptable value is 300,000"
          ]
        }
      ],
      "comment": [
        "Auto-Cancel All Open Orders when the countdown time hits zero.",
        "",
        "Market Maker inputs a countdown time parameter in milliseconds (e.g. 120000 for 120s) rounded down to the smallest second follows the following logic:",
        "  - Market Maker initially entered a value between 0 -\u003e 1000, which is rounded to 0: will result in termination of their COD",
        "  - Market Maker initially entered a value between 1001 -\u003e 300_000, which is rounded to the nearest second: will result in refresh of their COD",
        "  - Market Maker initially entered a value bigger than 300_000, which will result in error (upper bound)",
        "Market Maker will send a heartbeat message by calling the endpoint at specific intervals (ex. every 30 seconds) to the server to refresh the count down.",
        "",
        "If the server does not receive a heartbeat message within the countdown time, it will cancel all open orders for the specified Sub Account ID."
      ]
    },
    {
      "name": "WSOrderFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID to filter by"
          ],
          "selector": "primary"
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "'all'",
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The instrument filter to apply."
          ],
          "selector": "primary"
        }
      ],
      "comment": [
        "Subscribes to a feed of order updates pertaining to orders made by your account.",
        "Each Order can be uniquely identified by its `order_id` or `client_order_id`.",
        "To subscribe to all orders, specify an empty `instrument` (eg. `2345123`).",
        "Otherwise, specify the `instrument` to only receive orders for that instrument (eg. `2345123-BTC_USDT_Perp`)."
      ]
    },
    {
      "name": "WSOrderFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.order'",
          "comment": [
            "Stream name"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The order object being created or updated"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSOrderStateFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID to filter by"
          ],
          "selector": "primary"
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "'all'",
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The instrument filter to apply."
          ],
          "selector": "primary"
        }
      ],
      "comment": [
        "Subscribes to a feed of order updates pertaining to orders made by your account.",
        "Unlike the Order Stream, this only streams state updates, drastically improving throughput, and latency.",
        "Each Order can be uniquely identified by its `order_id` or `client_order_id`.",
        "To subscribe to all orders, specify an empty `instrument` (eg. `2345123`).",
        "Otherwise, specify the `instrument` to only receive orders for that instrument (eg. `2345123-BTC_USDT_Perp`)."
      ]
    },
    {
      "name": "OrderStateFeed",
      "is_root": false,
      "fields": [
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": [
            "A unique 128-bit identifier for the order, deterministically generated within the GRVT backend"
          ]
        },
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'23042'",
          "comment": [
            "A unique identifier for the active order within a subaccount, specified by the client"
          ]
        },
        {
          "name": "order_state",
          "lite_name": "os",
          "semantic_type": "OrderState",
          "json_type": "OrderState",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The order state object being created or updated"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSOrderStateFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.state'",
          "comment": [
            "Stream name"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "OrderStateFeed",
          "json_type": "OrderStateFeed",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The Order State Feed"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSPositionsFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID to filter by"
          ],
          "selector": "primary"
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "'all'",
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The instrument filter to apply."
          ],
          "selector": "primary"
        }
      ],
      "comment": [
        "Subscribes to a feed of position updates.",
        "Updates get published when a trade is executed, and when leverage configurations are changed for instruments with ongoing positions.",
        "To subscribe to all positions, specify an empty `instrument` (eg. `2345123`).",
        "Otherwise, specify the `instrument` to only receive positions for that instrument (eg. `2345123-BTC_USDT_Perp`)."
      ]
    },
    {
      "name": "WSPositionsFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.position'",
          "comment": [
            "Stream name"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Positions",
          "json_type": "Positions",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "A Position being created or updated matching the request filter"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSFillFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID to request for"
          ],
          "selector": "primary"
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "'all'",
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The instrument filter to apply."
          ],
          "selector": "primary"
        }
      ],
      "comment": [
        "Subscribes to a feed of private trade updates. This happens when a trade is executed.",
        "To subscribe to all private trades, specify an empty `instrument` (eg. `2345123`).",
        "Otherwise, specify the `instrument` to only receive private trades for that instrument (eg. `2345123-BTC_USDT_Perp`)."
      ]
    },
    {
      "name": "WSFillFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.fill'",
          "comment": [
            "The websocket channel to which the response is sent"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Fill",
          "json_type": "Fill",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "A private trade matching the request filter"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSTransferFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_MAIN_ACCOUNT_ID'",
          "comment": [
            "The main account ID to request for"
          ],
          "selector": "primary"
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "'0'",
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The sub account ID to request for"
          ],
          "selector": "primary"
        }
      ],
      "comment": [
        "Subscribes to a feed of transfers. This will execute when there is any transfer to or from the selected account.",
        "To subscribe to a main account, specify the account ID (eg. `0x9fe3758b67ce7a2875ee4b452f01a5282d84ed8a`).",
        "To subscribe to a sub account, specify the main account and the sub account dash separated (eg. `0x9fe3758b67ce7a2875ee4b452f01a5282d84ed8a-1920109784202388`)."
      ]
    },
    {
      "name": "TransferHistory",
      "is_root": false,
      "fields": [
        {
          "name": "tx_id",
          "lite_name": "ti",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1028403'",
          "comment": [
            "The transaction ID of the transfer"
          ]
        },
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The account to transfer from"
          ]
        },
        {
          "name": "from_sub_account_id",
          "lite_name": "fs",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount to transfer from (0 if transferring from main account)"
          ]
        },
        {
          "name": "to_account_id",
          "lite_name": "ta",
          "semantic_type": "address",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The account to deposit into"
          ]
        },
        {
          "name": "to_sub_account_id",
          "lite_name": "ts",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount to transfer to (0 if transferring to main account)"
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The token currency to transfer"
          ]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": [
            "The number of tokens to transfer"
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The signature of the transfer"
          ]
        },
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "The timestamp of the transfer in unix nanoseconds"
          ]
        },
        {
          "name": "transfer_type",
          "lite_name": "tt",
          "semantic_type": "TransferType",
          "json_type": "TransferType",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The type of transfer"
          ]
        },
        {
          "name": "transfer_metadata",
          "lite_name": "tm",
          "semantic_type": "string",
          "json_type": "string",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The metadata of the transfer"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSTransferFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.transfer'",
          "comment": [
            "The websocket channel to which the response is sent"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "TransferHistory",
          "json_type": "TransferHistory",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The transfer history matching the requested filters"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": [
        "Subscribes to a feed of transfer updates."
      ]
    },
    {
      "name": "WSDepositFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_MAIN_ACCOUNT_ID'",
          "comment": [
            "The main account ID to request for"
          ],
          "selector": "primary"
        }
      ],
      "comment": [
        "Subscribes to a feed of deposits. This will execute when there is any deposit to selected account.",
        "To subscribe to a main account, specify the account ID (eg. `0x9fe3758b67ce7a2875ee4b452f01a5282d84ed8a`)."
      ]
    },
    {
      "name": "Deposit",
      "is_root": false,
      "fields": [
        {
          "name": "tx_hash",
          "lite_name": "th",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0x1234567890123456789012345678901234567890123456789012345678901234'",
          "comment": [
            "The hash of the bridgemint event producing the deposit"
          ]
        },
        {
          "name": "to_account_id",
          "lite_name": "ta",
          "semantic_type": "address",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The account to deposit into"
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The token currency to deposit"
          ]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'10.50'",
          "comment": [
            "The number of tokens to deposit"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSDepositFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.deposit'",
          "comment": [
            "The websocket channel to which the response is sent"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Deposit",
          "json_type": "Deposit",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The Deposit object"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": [
        "Subscribes to a feed of deposit updates."
      ]
    },
    {
      "name": "WSWithdrawalFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_MAIN_ACCOUNT_ID'",
          "comment": [
            "The main account ID to request for"
          ],
          "selector": "primary"
        }
      ],
      "comment": [
        "Subscribes to a feed of withdrawals. This will execute when there is any withdrawal from the selected account.",
        "To subscribe to a main account, specify the account ID (eg. `0x9fe3758b67ce7a2875ee4b452f01a5282d84ed8a`)."
      ]
    },
    {
      "name": "Withdrawal",
      "is_root": false,
      "fields": [
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The subaccount to withdraw from"
          ]
        },
        {
          "name": "to_eth_address",
          "lite_name": "te",
          "semantic_type": "address",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The ethereum address to withdraw to"
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The token currency to withdraw"
          ]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'10.50'",
          "comment": [
            "The number of tokens to withdraw"
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The signature of the withdrawal"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSWithdrawalFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.withdrawal'",
          "comment": [
            "The websocket channel to which the response is sent"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Withdrawal",
          "json_type": "Withdrawal",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The Withdrawal object"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": [
        "Subscribes to a feed of withdrawal updates."
      ]
    },
    {
      "name": "CancelStatusFeed",
      "is_root": false,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID that requested the cancellation"
          ]
        },
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'23042'",
          "comment": [
            "A unique identifier for the active order within a subaccount, specified by the client"
          ]
        },
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": [
            "A unique 128-bit identifier for the order, deterministically generated within the GRVT backend"
          ]
        },
        {
          "name": "reason",
          "lite_name": "r",
          "semantic_type": "OrderRejectReason",
          "json_type": "OrderRejectReason",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The user-provided reason for cancelling the order"
          ]
        },
        {
          "name": "update_time",
          "lite_name": "ut",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "[Filled by GRVT Backend] Time at which the cancellation status was updated by GRVT in unix nanoseconds"
          ]
        },
        {
          "name": "cancel_status",
          "lite_name": "cs",
          "semantic_type": "CancelStatus",
          "json_type": "CancelStatus",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Status of the cancellation attempt"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSCancelFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.cancel'",
          "comment": [
            "Stream name"
          ]
        },
        {
          "name": "selector",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "Primary selector"
          ]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A sequence number used to determine message order within a stream.",
            "- If `useGlobalSequenceNumber` is **false**, this returns the gateway sequence number, which increments by one locally within each stream and resets on gateway restarts.",
            "- If `useGlobalSequenceNumber` is **true**, this returns the global sequence number, which uniquely identifies messages across the cluster.",
            "  - A single cluster payload can be multiplexed into multiple stream payloads.",
            "  - To distinguish each stream payload, a `dedupCounter` is included.",
            "  - The returned sequence number is computed as: `cluster_sequence_number * 10^5 + dedupCounter`."
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "CancelStatusFeed",
          "json_type": "CancelStatusFeed",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Data relating to the status of the cancellation attempt"
          ]
        },
        {
          "name": "prev_sequence_number",
          "lite_name": "ps",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'872634875'",
          "comment": [
            "The previous sequence number that determines the message order"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSCancelFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount ID to filter by"
          ],
          "selector": "primary"
        }
      ],
      "comment": [
        "Subscribes to a feed of time-to-live expiry events for order cancellations requested by a given subaccount.",
        "**This stream presently only provides expiry updates for cancel-order requests set with a valid TTL value**.",
        "Successful order cancellations will reflect as updates published to the [order-state stream](https://api-docs.grvt.io/trading_streams/#order-state).",
        "_A future release will expand the functionality of this stream to provide more general status updates on order cancellation requests._",
        "Each Order can be uniquely identified by its `client_order_id`.",
        ""
      ]
    },
    {
      "name": "ApiWithdrawalRequest",
      "is_root": true,
      "fields": [
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The main account to withdraw from"
          ]
        },
        {
          "name": "to_eth_address",
          "lite_name": "te",
          "semantic_type": "address",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The Ethereum wallet to withdraw into"
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The token currency to withdraw"
          ]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": [
            "The number of tokens to withdraw, quoted in tokenCurrency decimal units"
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The signature of the withdrawal"
          ]
        }
      ],
      "comment": [
        "Leverage this API to initialize a withdrawal from GRVT's Hyperchain onto Ethereum.",
        "Do take note that the bridging process does take time. The GRVT UI will help you keep track of bridging progress, and notify you once its complete.",
        "",
        "If not withdrawing the entirety of your balance, there is a minimum withdrawal amount. Currently that amount is ~25 USDT.",
        "Withdrawal fees also apply to cover the cost of the Ethereum transaction.",
        "Note that your funds will always remain in self-custory throughout the withdrawal process. At no stage does GRVT gain control over your funds."
      ]
    },
    {
      "name": "ApiTransferRequest",
      "is_root": true,
      "fields": [
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The main account to transfer from"
          ]
        },
        {
          "name": "from_sub_account_id",
          "lite_name": "fs",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount to transfer from (0 if transferring from main account)"
          ]
        },
        {
          "name": "to_account_id",
          "lite_name": "ta",
          "semantic_type": "address",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The main account to deposit into"
          ]
        },
        {
          "name": "to_sub_account_id",
          "lite_name": "ts",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The subaccount to transfer to (0 if transferring to main account)"
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The token currency to transfer"
          ]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": [
            "The number of tokens to transfer, quoted in tokenCurrency decimal units"
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The signature of the transfer"
          ]
        },
        {
          "name": "transfer_type",
          "lite_name": "tt",
          "semantic_type": "TransferType",
          "json_type": "TransferType",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The type of transfer"
          ]
        },
        {
          "name": "transfer_metadata",
          "lite_name": "tm",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "{\"provider\":\"XY\",\"direction\":\"WITHDRAWAL\",\"provider_tx_id\":\"txn123456\",\"chainid\":\"42161\",\"endpoint\":\"0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0\"}",
          "comment": [
            "The metadata of the transfer"
          ]
        }
      ],
      "comment": [
        "This API allows you to transfer funds in multiple different ways\u003cul\u003e",
        "\u003cli\u003eBetween SubAccounts within your Main Account\u003c/li\u003e",
        "\u003cli\u003eBetween your MainAccount and your SubAccounts\u003c/li\u003e",
        "\u003cli\u003eTo other MainAccounts that you have previously allowlisted\u003c/li\u003e",
        "\u003c/ul\u003e\u003cb\u003eFast Withdrawal Funding Address\u003c/b\u003e",
        "For fast withdrawals, funds must be sent to the designated funding account address. Please ensure you use the correct address based on the environment:",
        "\u003cb\u003eProduction Environment Address:\u003c/b\u003e",
        "\u003cem\u003e[To be updated, not ready yet]\u003c/em\u003e",
        "This address should be specified as the \u003ccode\u003eto_account_id\u003c/code\u003e in your API requests for transferring funds using the transfer API. Ensure accurate input to avoid loss of funds or use the UI.",
        ""
      ]
    },
    {
      "name": "ApiTransferAck",
      "is_root": false,
      "fields": [
        {
          "name": "ack",
          "lite_name": "a",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'true'",
          "comment": [
            "Gravity has acknowledged that the transfer has been successfully processed. If true, a `tx_id` will be returned. If false, an error will be returned."
          ]
        },
        {
          "name": "tx_id",
          "lite_name": "ti",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'1028403'",
          "comment": [
            "The transaction ID of the transfer. This is only returned if the transfer is successful."
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiTransferResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "ApiTransferAck",
          "json_type": "ApiTransferAck",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The Transfer response object"
          ]
        }
      ],
      "comment": [
        "Used to acknowledge a transfer request outcome"
      ]
    },
    {
      "name": "ApiDepositHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The token currency to query for, if nil or empty, return all deposits. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "The start time to query for in unix nanoseconds"
          ]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "now()",
          "example": "'1697788800000000000'",
          "comment": [
            "The end time to query for in unix nanoseconds"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        },
        {
          "name": "cursor",
          "lite_name": "c1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "''",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        },
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "default": "",
          "example": "",
          "comment": [
            "Main account ID being queried. By default, applies the requestor's main account ID."
          ]
        }
      ],
      "comment": [
        "The request to get the historical deposits of an account",
        "The history is returned in reverse chronological order",
        "",
        "Pagination works as follows:\u003cul\u003e\u003cli\u003eWe perform a reverse chronological lookup, starting from `end_time`. If `end_time` is not set, we start from the most recent data.\u003c/li\u003e\u003cli\u003eThe lookup is limited to `limit` records. If more data is requested, the response will contain a `next` cursor for you to query the next page.\u003c/li\u003e\u003cli\u003eIf a `cursor` is provided, it will be used to fetch results from that point onwards.\u003c/li\u003e\u003cli\u003ePagination will continue until the `start_time` is reached. If `start_time` is not set, pagination will continue as far back as our data retention policy allows.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "DepositHistory",
      "is_root": false,
      "fields": [
        {
          "name": "l_1_hash",
          "lite_name": "l1",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0x10000101000203040506'",
          "comment": [
            "The L1 txHash of the deposit"
          ]
        },
        {
          "name": "l_2_hash",
          "lite_name": "l2",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0x10000101000203040506'",
          "comment": [
            "The L2 txHash of the deposit"
          ]
        },
        {
          "name": "to_account_id",
          "lite_name": "ta",
          "semantic_type": "address",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The account to deposit into"
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The token currency to deposit"
          ]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": [
            "The number of tokens to deposit"
          ]
        },
        {
          "name": "initiated_time",
          "lite_name": "it",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "The timestamp when the deposit was initiated on L1 in unix nanoseconds"
          ]
        },
        {
          "name": "confirmed_time",
          "lite_name": "ct",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "The timestamp when the deposit was confirmed on L2 in unix nanoseconds"
          ]
        },
        {
          "name": "from_address",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The address of the sender"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiDepositHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "DepositHistory",
          "json_type": "DepositHistory",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The deposit history matching the request account"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiTransferHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The token currency to query for, if nil or empty, return all transfers. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "The start time to query for in unix nanoseconds"
          ]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "now()",
          "example": "'1697788800000000000'",
          "comment": [
            "The end time to query for in unix nanoseconds"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        },
        {
          "name": "cursor",
          "lite_name": "c1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "''",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        },
        {
          "name": "tx_id",
          "lite_name": "ti",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1028403'",
          "comment": [
            "The transaction ID to query for"
          ]
        },
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": true,
          "default": "",
          "example": "",
          "comment": [
            "Main account ID being queried. By default, applies the requestor's main account ID."
          ]
        }
      ],
      "comment": [
        "The request to get the historical transfers of an account",
        "The history is returned in reverse chronological order",
        "",
        "Pagination works as follows:\u003cul\u003e\u003cli\u003eWe perform a reverse chronological lookup, starting from `end_time`. If `end_time` is not set, we start from the most recent data.\u003c/li\u003e\u003cli\u003eThe lookup is limited to `limit` records. If more data is requested, the response will contain a `next` cursor for you to query the next page.\u003c/li\u003e\u003cli\u003eIf a `cursor` is provided, it will be used to fetch results from that point onwards.\u003c/li\u003e\u003cli\u003ePagination will continue until the `start_time` is reached. If `start_time` is not set, pagination will continue as far back as our data retention policy allows.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "ApiTransferHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "TransferHistory",
          "json_type": "TransferHistory",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The transfer history matching the request account"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiWithdrawalHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The token currency to query for, if nil or empty, return all withdrawals. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "0",
          "example": "'1697788800000000000'",
          "comment": [
            "The start time to query for in unix nanoseconds"
          ]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "default": "now()",
          "example": "'1697788800000000000'",
          "comment": [
            "The end time to query for in unix nanoseconds"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "integer",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "default": "500",
          "example": "500",
          "comment": [
            "The limit to query for. Defaults to 500; Max 1000"
          ]
        },
        {
          "name": "cursor",
          "lite_name": "c1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "''",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        },
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "default": "",
          "example": "",
          "comment": [
            "Main account ID being queried. By default, applies the requestor's main account ID."
          ]
        }
      ],
      "comment": [
        "The request to get the historical withdrawals of an account",
        "The history is returned in reverse chronological order",
        "",
        "Pagination works as follows:\u003cul\u003e\u003cli\u003eWe perform a reverse chronological lookup, starting from `end_time`. If `end_time` is not set, we start from the most recent data.\u003c/li\u003e\u003cli\u003eThe lookup is limited to `limit` records. If more data is requested, the response will contain a `next` cursor for you to query the next page.\u003c/li\u003e\u003cli\u003eIf a `cursor` is provided, it will be used to fetch results from that point onwards.\u003c/li\u003e\u003cli\u003ePagination will continue until the `start_time` is reached. If `start_time` is not set, pagination will continue as far back as our data retention policy allows.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "WithdrawalHistory",
      "is_root": false,
      "fields": [
        {
          "name": "tx_id",
          "lite_name": "ti",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1028403'",
          "comment": [
            "The transaction ID of the withdrawal"
          ]
        },
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The subaccount to withdraw from"
          ]
        },
        {
          "name": "to_eth_address",
          "lite_name": "te",
          "semantic_type": "address",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The ethereum address to withdraw to"
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The token currency to withdraw"
          ]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": [
            "The number of tokens to withdraw"
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The signature of the withdrawal"
          ]
        },
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "The timestamp of the withdrawal in unix nanoseconds"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiWithdrawalHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "result",
          "lite_name": "r",
          "semantic_type": "WithdrawalHistory",
          "json_type": "WithdrawalHistory",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The withdrawals history matching the request account"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "default": "''",
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiVaultInvestRequest",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The address of the main account initiating the investment."
          ]
        },
        {
          "name": "vault_id",
          "lite_name": "vi",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3477045127917224'",
          "comment": [
            "The unique identifier of the vault to invest in."
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The currency used for the investment. This should be the vault's quote currency."
          ]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The investment sum, in terms of the token currency specified (i.e., `numTokens` of '1000' with `tokenCurrency` of 'USDT' denotes investment of 1,000 USDT)."
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The digital signature from the investing account.",
            "This signature must be generated by the main account ID and is used to verify the authenticity of the request.",
            "The signature must comply with AccountPermExternalTransfer permission."
          ]
        }
      ],
      "comment": [
        "Request payload for investing in a vault.",
        "",
        "This API allows a client to invest a specified amount of tokens in a particular vault."
      ]
    },
    {
      "name": "ApiVaultRedeemRequest",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The address of the main account initiating the redemption."
          ]
        },
        {
          "name": "vault_id",
          "lite_name": "vi",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3477045127917224'",
          "comment": [
            "The unique identifier of the vault to redeem from."
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The currency used for the redemption. This should be the vault's quote currency."
          ]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The number of shares to redeem."
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The digital signature from the investing account.",
            "This signature must be generated by the main account ID and is used to verify the authenticity of the request.",
            "The signature must comply with AccountPermExternalTransfer permission."
          ]
        }
      ],
      "comment": [
        "Request payload for redeeming from a vault.",
        "",
        "This API allows a client to redeem a specified amount of tokens from a particular vault."
      ]
    },
    {
      "name": "ApiVaultRedeemCancelRequest",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The address of the main account initiating the cancellation."
          ]
        },
        {
          "name": "vault_id",
          "lite_name": "vi",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3477045127917224'",
          "comment": [
            "The unique identifier of the vault to cancel the redemption from."
          ]
        }
      ],
      "comment": [
        "Request payload for canceling a vault redemption.",
        "",
        "This API allows a client to cancel a previously initiated redemption from a vault."
      ]
    },
    {
      "name": "ApiVaultViewRedemptionQueueRequest",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The address of the vault manager making the request."
          ]
        },
        {
          "name": "vault_id",
          "lite_name": "vi",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3477045127917224'",
          "comment": [
            "The unique identifier of the vault to fetch the redemption queue for."
          ]
        }
      ],
      "comment": [
        "Request payload for a vault manager to view the redemption queue for their vault.",
        "",
        "Fetches the redemption queue for a vault, ordered by descending priority.",
        "",
        "\u003cb\u003eUrgent\u003c/b\u003e redemption requests, defined as having been pending \u003e90% of the manager-defined maximum redemption period, have top priority (following insertion order).",
        "",
        "\u003cb\u003eNon-urgent\u003c/b\u003e redemption requests are otherwise prioritized by insertion order, \u003cb\u003eunless\u003c/b\u003e they are \u003e5x the size of the smallest redemption request.",
        "",
        "E.g., If FIFO ordering (all non-urgent) is 1k -\u003e 50k -\u003e 100k -\u003e 20k -\u003e 10k -\u003e 25k, then priority ordering is 1k -\u003e 10k -\u003e 50k -\u003e 20k -\u003e 100k -\u003e 25k.",
        "",
        "Only displays redemption requests that are eligible for automated redemption, i.e., have been pending for the manager-defined minimum redemption period."
      ]
    },
    {
      "name": "VaultRedemptionRequest",
      "is_root": false,
      "fields": [
        {
          "name": "request_time",
          "lite_name": "rt",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "[Filled by GRVT Backend] Time at which the redemption request was received by GRVT in unix nanoseconds"
          ]
        },
        {
          "name": "num_lp_tokens",
          "lite_name": "nl",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The number of shares to redeem"
          ]
        },
        {
          "name": "max_redemption_period_timestamp",
          "lite_name": "mr",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "1727788800000000000",
          "comment": [
            "[Filled by GRVT Backend] Time in unix nanoseconds, beyond which the request will be force-redeemed."
          ]
        },
        {
          "name": "age_category",
          "lite_name": "ac",
          "semantic_type": "VaultRedemptionReqAgeCategory",
          "json_type": "VaultRedemptionReqAgeCategory",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'NORMAL'",
          "comment": [
            "Age category of this redemption request."
          ]
        },
        {
          "name": "is_manager",
          "lite_name": "im",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "example": "true",
          "comment": [
            "`true` if this request belongs to the vault manager, omitted otherwise."
          ]
        }
      ],
      "comment": [
        "Representation of a pending redemption request for a given vault."
      ]
    },
    {
      "name": "ApiVaultViewRedemptionQueueResponse",
      "is_root": true,
      "fields": [
        {
          "name": "redemption_queue",
          "lite_name": "rq",
          "semantic_type": "VaultRedemptionRequest",
          "json_type": "VaultRedemptionRequest",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "Outstanding vault redemption requests, ordered by descending priority. Excludes requests that have not yet aged past the minmimum redemption period."
          ]
        },
        {
          "name": "pending_redemption_token_count",
          "lite_name": "pr",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Number of shares eligible for automated redemption (held in queue for at least the minimum redemption period)."
          ]
        },
        {
          "name": "urgent_redemption_token_count",
          "lite_name": "ur",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Number of shares nearing the maximum redemption period (\u003e= 90% of maximum redemption period)."
          ]
        },
        {
          "name": "auto_redeemable_balance",
          "lite_name": "ar",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Amount available for automated redemption request servicing (in USD)."
          ]
        },
        {
          "name": "share_price",
          "lite_name": "sp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Current share price (in USD)."
          ]
        }
      ],
      "comment": [
        "Response payload for a vault manager to view the redemption queue for their vault, ordered by descending priority.",
        "",
        "Excludes requests that have not yet aged past the minmimum redemption period.",
        "",
        "Also includes counters for total redemption sizes pending as well as urgent (refer to API integration guide for more detail on redemption request classifications).",
        "",
        ""
      ]
    },
    {
      "name": "ApiVaultInvestorSummaryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The address of the main account initiating the request."
          ]
        },
        {
          "name": "vault_id",
          "lite_name": "vi",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3477045127917224'",
          "comment": [
            "The unique identifier of the vault to fetch the summary for."
          ]
        }
      ],
      "comment": [
        "Request payload for fetching the summary of a vault investor.",
        "",
        "This API allows a client to retrieve the summary of investments in a specific vault."
      ]
    },
    {
      "name": "VaultRedemption",
      "is_root": false,
      "fields": [
        {
          "name": "num_lp_tokens",
          "lite_name": "nl",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The number of LP Tokens requested for redemption."
          ]
        },
        {
          "name": "request_valuation",
          "lite_name": "rv",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The valuation (in USD) of the redemption request."
          ]
        },
        {
          "name": "request_time",
          "lite_name": "rt",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "[Filled by GRVT Backend] Time at which the redemption request was received by GRVT in unix nanoseconds"
          ]
        },
        {
          "name": "max_redemption_period_timestamp",
          "lite_name": "mr",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "1727788800000000000",
          "comment": [
            "[Filled by GRVT Backend] Time in unix nanoseconds, beyond which the request will be force-redeemed."
          ]
        }
      ],
      "comment": [
        "Vault redemption information.",
        "",
        "This struct contains information about a pending redemption from a vault."
      ]
    },
    {
      "name": "VaultInvestorSummary",
      "is_root": false,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'$GRVT_SUB_ACCOUNT_ID'",
          "comment": [
            "The unique identifier of the vault sub account."
          ]
        },
        {
          "name": "num_lp_tokens",
          "lite_name": "nl",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The number of Vault LP tokens held by the investor."
          ]
        },
        {
          "name": "avg_entry_price",
          "lite_name": "ae",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The average entry price (in USD) of the vault LP tokens."
          ]
        },
        {
          "name": "current_price",
          "lite_name": "cp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The current price (in USD) of the vault LP tokens."
          ]
        },
        {
          "name": "total_equity",
          "lite_name": "te",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The current valuation (in USD) of all held vault LP tokens."
          ]
        },
        {
          "name": "all_time_realized_pnl",
          "lite_name": "at",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The all-time realized PnL (in USD) that the investor has received from the vault."
          ]
        },
        {
          "name": "pending_redemption",
          "lite_name": "pr",
          "semantic_type": "VaultRedemption",
          "json_type": "VaultRedemption",
          "index": 6,
          "array_depth": 0,
          "optional": true,
          "comment": [
            "The singleton pending redemption (omitted if none)."
          ]
        }
      ],
      "comment": [
        "Vault investor summary information.",
        "",
        "This struct contains the summary of investments in a vault."
      ]
    },
    {
      "name": "ApiVaultInvestorSummaryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "vault_investor_summary",
          "lite_name": "vi",
          "semantic_type": "VaultInvestorSummary",
          "json_type": "VaultInvestorSummary",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The summary of investments in the vault."
          ]
        }
      ],
      "comment": [
        "Response payload for the summary of a vault investor.",
        "",
        "This API provides the summary of investments in a specific vault."
      ]
    },
    {
      "name": "ApiVaultBurnTokensRequest",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The address of the main account initiating the burn."
          ]
        },
        {
          "name": "vault_id",
          "lite_name": "vi",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3477045127917224'",
          "comment": [
            "The unique identifier of the vault to burn tokens from."
          ]
        },
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The currency used for the burn. This should be the vault's quote currency."
          ]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "1000000",
          "comment": [
            "The number of tokens to burn."
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "The digital signature from the investing account.",
            "This signature must be generated by the main account ID and is used to verify the authenticity of the request.",
            "The signature must comply with AccountPermExternalTransfer permission."
          ]
        }
      ],
      "comment": [
        "Request payload for burning tokens in a vault.",
        "",
        "This API allows a client to burn a specified amount of tokens in a particular vault."
      ]
    }
  ],
  "enums": [
    {
      "name": "BrokerTag",
      "values": [
        {
          "name": "UNSPECIFIED",
          "value": 0,
          "comment": []
        },
        {
          "name": "COIN_ROUTES",
          "value": 1,
          "comment": [
            "CoinRoutes"
          ]
        },
        {
          "name": "ALERTATRON",
          "value": 2,
          "comment": [
            "Alertatron"
          ]
        },
        {
          "name": "ORIGAMI",
          "value": 3,
          "comment": [
            "Origami"
          ]
        }
      ],
      "comment": [
        "BrokerTag is a tag for the broker that the order is sent from."
      ]
    },
    {
      "name": "CancelStatus",
      "values": [
        {
          "name": "EXPIRED",
          "value": 1,
          "comment": [
            "Cancellation has expired because corresponding order had not arrived within the defined time-to-live window."
          ]
        },
        {
          "name": "DROPPED_DUPLICATE",
          "value": 2,
          "comment": [
            "This cancellation request was dropped because its TTL window overlaps with another cancellation request for the same order."
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "CandlestickInterval",
      "values": [
        {
          "name": "CI_1_M",
          "value": 1,
          "comment": [
            "1 minute"
          ]
        },
        {
          "name": "CI_3_M",
          "value": 2,
          "comment": [
            "3 minutes"
          ]
        },
        {
          "name": "CI_5_M",
          "value": 3,
          "comment": [
            "5 minutes"
          ]
        },
        {
          "name": "CI_15_M",
          "value": 4,
          "comment": [
            "15 minutes"
          ]
        },
        {
          "name": "CI_30_M",
          "value": 5,
          "comment": [
            "30 minutes"
          ]
        },
        {
          "name": "CI_1_H",
          "value": 6,
          "comment": [
            "1 hour"
          ]
        },
        {
          "name": "CI_2_H",
          "value": 7,
          "comment": [
            "2 hour"
          ]
        },
        {
          "name": "CI_4_H",
          "value": 8,
          "comment": [
            "4 hour"
          ]
        },
        {
          "name": "CI_6_H",
          "value": 9,
          "comment": [
            "6 hour"
          ]
        },
        {
          "name": "CI_8_H",
          "value": 10,
          "comment": [
            "8 hour"
          ]
        },
        {
          "name": "CI_12_H",
          "value": 11,
          "comment": [
            "12 hour"
          ]
        },
        {
          "name": "CI_1_D",
          "value": 12,
          "comment": [
            "1 day"
          ]
        },
        {
          "name": "CI_3_D",
          "value": 13,
          "comment": [
            "3 days"
          ]
        },
        {
          "name": "CI_5_D",
          "value": 14,
          "comment": [
            "5 days"
          ]
        },
        {
          "name": "CI_1_W",
          "value": 15,
          "comment": [
            "1 week"
          ]
        },
        {
          "name": "CI_2_W",
          "value": 16,
          "comment": [
            "2 weeks"
          ]
        },
        {
          "name": "CI_3_W",
          "value": 17,
          "comment": [
            "3 weeks"
          ]
        },
        {
          "name": "CI_4_W",
          "value": 18,
          "comment": [
            "4 weeks"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "CandlestickType",
      "values": [
        {
          "name": "TRADE",
          "value": 1,
          "comment": [
            "Tracks traded prices"
          ]
        },
        {
          "name": "MARK",
          "value": 2,
          "comment": [
            "Tracks mark prices"
          ]
        },
        {
          "name": "INDEX",
          "value": 3,
          "comment": [
            "Tracks index prices"
          ]
        },
        {
          "name": "MID",
          "value": 4,
          "comment": [
            "Tracks book mid prices"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "InstrumentSettlementPeriod",
      "values": [
        {
          "name": "PERPETUAL",
          "value": 1,
          "comment": [
            "Instrument settles through perpetual funding cycles"
          ]
        },
        {
          "name": "DAILY",
          "value": 2,
          "comment": [
            "Instrument settles at an expiry date, marked as a daily instrument"
          ]
        },
        {
          "name": "WEEKLY",
          "value": 3,
          "comment": [
            "Instrument settles at an expiry date, marked as a weekly instrument"
          ]
        },
        {
          "name": "MONTHLY",
          "value": 4,
          "comment": [
            "Instrument settles at an expiry date, marked as a monthly instrument"
          ]
        },
        {
          "name": "QUARTERLY",
          "value": 5,
          "comment": [
            "Instrument settles at an expiry date, marked as a quarterly instrument"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "Kind",
      "values": [
        {
          "name": "PERPETUAL",
          "value": 1,
          "comment": [
            "the perpetual asset kind"
          ]
        },
        {
          "name": "FUTURE",
          "value": 2,
          "comment": [
            "the future asset kind"
          ]
        },
        {
          "name": "CALL",
          "value": 3,
          "comment": [
            "the call option asset kind"
          ]
        },
        {
          "name": "PUT",
          "value": 4,
          "comment": [
            "the put option asset kind"
          ]
        }
      ],
      "comment": [
        "The list of asset kinds that are supported on the GRVT exchange"
      ]
    },
    {
      "name": "MarginType",
      "values": [
        {
          "name": "SIMPLE_CROSS_MARGIN",
          "value": 2,
          "comment": [
            "Simple Cross Margin Mode: all assets have a predictable margin impact, the whole subaccount shares a single margin"
          ]
        },
        {
          "name": "PORTFOLIO_CROSS_MARGIN",
          "value": 3,
          "comment": [
            "Portfolio Cross Margin Mode: asset margin impact is analysed on portfolio level, the whole subaccount shares a single margin"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "OrderRejectReason",
      "values": [
        {
          "name": "UNSPECIFIED",
          "value": 0,
          "comment": [
            "order is not cancelled or rejected"
          ]
        },
        {
          "name": "CLIENT_CANCEL",
          "value": 1,
          "comment": [
            "client called a Cancel API"
          ]
        },
        {
          "name": "CLIENT_BULK_CANCEL",
          "value": 2,
          "comment": [
            "client called a Bulk Cancel API"
          ]
        },
        {
          "name": "CLIENT_SESSION_END",
          "value": 3,
          "comment": [
            "client called a Session Cancel API, or set the WebSocket connection to 'cancelOrdersOnTerminate'"
          ]
        },
        {
          "name": "MARKET_CANCEL",
          "value": 4,
          "comment": [
            "the market order was cancelled after no/partial fill. Lower precedence than other TimeInForce cancel reasons"
          ]
        },
        {
          "name": "IOC_CANCEL",
          "value": 5,
          "comment": [
            "the IOC order was cancelled after no/partial fill"
          ]
        },
        {
          "name": "AON_CANCEL",
          "value": 6,
          "comment": [
            "the AON order was cancelled as it could not be fully matched"
          ]
        },
        {
          "name": "FOK_CANCEL",
          "value": 7,
          "comment": [
            "the FOK order was cancelled as it could not be fully matched"
          ]
        },
        {
          "name": "EXPIRED",
          "value": 8,
          "comment": [
            "the order was cancelled as it has expired"
          ]
        },
        {
          "name": "FAIL_POST_ONLY",
          "value": 9,
          "comment": [
            "the post-only order could not be posted into the orderbook"
          ]
        },
        {
          "name": "FAIL_REDUCE_ONLY",
          "value": 10,
          "comment": [
            "the reduce-only order would have caused position size to increase"
          ]
        },
        {
          "name": "MM_PROTECTION",
          "value": 11,
          "comment": [
            "the order was cancelled due to market maker protection trigger"
          ]
        },
        {
          "name": "SELF_TRADE_PROTECTION",
          "value": 12,
          "comment": [
            "the order was cancelled due to self-trade protection trigger"
          ]
        },
        {
          "name": "SELF_MATCHED_SUBACCOUNT",
          "value": 13,
          "comment": [
            "the order matched with another order from the same sub account"
          ]
        },
        {
          "name": "OVERLAPPING_CLIENT_ORDER_ID",
          "value": 14,
          "comment": [
            "an active order on your sub account shares the same clientOrderId"
          ]
        },
        {
          "name": "BELOW_MARGIN",
          "value": 15,
          "comment": [
            "the order will bring the sub account below initial margin requirement"
          ]
        },
        {
          "name": "LIQUIDATION",
          "value": 16,
          "comment": [
            "the sub account is liquidated (and all open orders are cancelled by Gravity)"
          ]
        },
        {
          "name": "INSTRUMENT_INVALID",
          "value": 17,
          "comment": [
            "instrument is invalid or not found on Gravity"
          ]
        },
        {
          "name": "INSTRUMENT_DEACTIVATED",
          "value": 18,
          "comment": [
            "instrument is no longer tradable on Gravity. (typically due to a market halt, or instrument expiry)"
          ]
        },
        {
          "name": "SYSTEM_FAILOVER",
          "value": 19,
          "comment": [
            "system failover resulting in loss of order state"
          ]
        },
        {
          "name": "UNAUTHORISED",
          "value": 20,
          "comment": [
            "the credentials used (userSession/apiKeySession/walletSignature) is not authorised to perform the action"
          ]
        },
        {
          "name": "SESSION_KEY_EXPIRED",
          "value": 21,
          "comment": [
            "the session key used to sign the order expired"
          ]
        },
        {
          "name": "SUB_ACCOUNT_NOT_FOUND",
          "value": 22,
          "comment": [
            "the subaccount does not exist"
          ]
        },
        {
          "name": "NO_TRADE_PERMISSION",
          "value": 23,
          "comment": [
            "the signature used to sign the order has no trade permission"
          ]
        },
        {
          "name": "UNSUPPORTED_TIME_IN_FORCE",
          "value": 24,
          "comment": [
            "the order payload does not contain a supported TimeInForce value"
          ]
        },
        {
          "name": "MULTI_LEGGED_ORDER",
          "value": 25,
          "comment": [
            "the order has multiple legs, but multiple legs are not supported by this venue"
          ]
        },
        {
          "name": "EXCEED_MAX_POSITION_SIZE",
          "value": 26,
          "comment": [
            "the order would have caused the subaccount to exceed the max position size"
          ]
        },
        {
          "name": "EXCEED_MAX_SIGNATURE_EXPIRATION",
          "value": 27,
          "comment": [
            "the signature supplied is more than 30 days in the future"
          ]
        },
        {
          "name": "MARKET_ORDER_WITH_LIMIT_PRICE",
          "value": 28,
          "comment": [
            "the market order has a limit price set"
          ]
        },
        {
          "name": "CLIENT_CANCEL_ON_DISCONNECT_TRIGGERED",
          "value": 29,
          "comment": [
            "client cancel on disconnect triggered"
          ]
        },
        {
          "name": "OCO_COUNTER_PART_TRIGGERED",
          "value": 30,
          "comment": [
            "the OCO counter part order was triggered"
          ]
        },
        {
          "name": "REDUCE_ONLY_LIMIT",
          "value": 31,
          "comment": [
            "the remaining order size was cancelled because it exceeded current position size"
          ]
        },
        {
          "name": "CLIENT_REPLACE",
          "value": 32,
          "comment": [
            "the order was replaced by a client replace request"
          ]
        },
        {
          "name": "DERISK_MUST_BE_IOC",
          "value": 33,
          "comment": [
            "the derisk order must be an IOC order"
          ]
        },
        {
          "name": "DERISK_MUST_BE_REDUCE_ONLY",
          "value": 34,
          "comment": [
            "the derisk order must be a reduce-only order"
          ]
        },
        {
          "name": "DERISK_NOT_SUPPORTED",
          "value": 35,
          "comment": [
            "derisk is not supported"
          ]
        },
        {
          "name": "INVALID_ORDER_TYPE",
          "value": 36,
          "comment": [
            "the order type is invalid"
          ]
        },
        {
          "name": "CURRENCY_NOT_DEFINED",
          "value": 37,
          "comment": [
            "the currency is not defined"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "OrderStatus",
      "values": [
        {
          "name": "PENDING",
          "value": 1,
          "comment": [
            "Order has been sent to the matching engine and is pending a transition to open/filled/rejected."
          ]
        },
        {
          "name": "OPEN",
          "value": 2,
          "comment": [
            "Order is actively matching on the matching engine, could be unfilled or partially filled."
          ]
        },
        {
          "name": "FILLED",
          "value": 3,
          "comment": [
            "Order is fully filled and hence closed. Taker Orders can transition directly from pending to filled, without going through open."
          ]
        },
        {
          "name": "REJECTED",
          "value": 4,
          "comment": [
            "Order is rejected by matching engine since if fails a particular check (See OrderRejectReason). Once an order is open, it cannot be rejected."
          ]
        },
        {
          "name": "CANCELLED",
          "value": 5,
          "comment": [
            "Order is cancelled by the user using one of the supported APIs (See OrderRejectReason). Before an order is open, it cannot be cancelled."
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "TimeInForce",
      "values": [
        {
          "name": "GOOD_TILL_TIME",
          "value": 1,
          "comment": [
            "GTT - Remains open until it is cancelled, or expired"
          ]
        },
        {
          "name": "ALL_OR_NONE",
          "value": 2,
          "comment": [
            "AON - Either fill the whole order or none of it (Block Trades Only)"
          ]
        },
        {
          "name": "IMMEDIATE_OR_CANCEL",
          "value": 3,
          "comment": [
            "IOC - Fill the order as much as possible, when hitting the orderbook. Then cancel it"
          ]
        },
        {
          "name": "FILL_OR_KILL",
          "value": 4,
          "comment": [
            "FOK - Both AoN and IoC. Either fill the full order when hitting the orderbook, or cancel it"
          ]
        },
        {
          "name": "RETAIL_PRICE_IMPROVEMENT",
          "value": 5,
          "comment": [
            "RPI - A GTT + PostOnly maker order, that can only be taken by non-algorithmic UI users."
          ]
        }
      ],
      "comment": [
        "|                       | Must Fill All | Can Fill Partial |",
        "| -                     | -             | -                |",
        "| Must Fill Immediately | FOK           | IOC              |",
        "| Can Fill Till Time    | AON           | GTC              |",
        ""
      ]
    },
    {
      "name": "TransferType",
      "values": [
        {
          "name": "UNSPECIFIED",
          "value": 0,
          "comment": [
            "Default transfer that has nothing to do with bridging"
          ]
        },
        {
          "name": "STANDARD",
          "value": 1,
          "comment": [
            "Standard transfer that has nothing to do with bridging"
          ]
        },
        {
          "name": "FAST_ARB_DEPOSIT",
          "value": 2,
          "comment": [
            "Fast Arb Deposit Metadata type"
          ]
        },
        {
          "name": "FAST_ARB_WITHDRAWAL",
          "value": 3,
          "comment": [
            "Fast Arb Withdrawal Metadata type"
          ]
        },
        {
          "name": "NON_NATIVE_BRIDGE_DEPOSIT",
          "value": 4,
          "comment": [
            "Transfer type for non native bridging deposit"
          ]
        },
        {
          "name": "NON_NATIVE_BRIDGE_WITHDRAWAL",
          "value": 5,
          "comment": [
            "Transfer type for non native bridging withdrawal"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "TriggerBy",
      "values": [
        {
          "name": "UNSPECIFIED",
          "value": 0,
          "comment": [
            "no trigger condition"
          ]
        },
        {
          "name": "INDEX",
          "value": 1,
          "comment": [
            "INDEX - Order is activated when the index price reaches the trigger price"
          ]
        },
        {
          "name": "LAST",
          "value": 2,
          "comment": [
            "LAST - Order is activated when the last trade price reaches the trigger price"
          ]
        },
        {
          "name": "MID",
          "value": 3,
          "comment": [
            "MID - Order is activated when the mid price reaches the trigger price"
          ]
        },
        {
          "name": "MARK",
          "value": 4,
          "comment": [
            "MARK - Order is activated when the mark price reaches the trigger price"
          ]
        }
      ],
      "comment": [
        "Defines the price type that activates a Take Profit (TP) or Stop Loss (SL) order.",
        "",
        "Trigger orders are executed when the selected price type reaches the specified trigger price.Different price types ensure flexibility in executing strategies based on market conditions.",
        "",
        ""
      ]
    },
    {
      "name": "TriggerType",
      "values": [
        {
          "name": "UNSPECIFIED",
          "value": 0,
          "comment": [
            "Not a trigger order. The order executes normally without any trigger conditions."
          ]
        },
        {
          "name": "TAKE_PROFIT",
          "value": 1,
          "comment": [
            "Take Profit Order - Executes when the price reaches a specified level to secure profits."
          ]
        },
        {
          "name": "STOP_LOSS",
          "value": 2,
          "comment": [
            "Stop Loss Order - Executes when the price reaches a specified level to limit losses."
          ]
        }
      ],
      "comment": [
        "Defines the type of trigger order used in trading, such as Take Profit or Stop Loss.",
        "",
        "Trigger orders allow execution based on pre-defined price conditions rather than immediate market conditions.",
        "",
        ""
      ]
    },
    {
      "name": "VaultInvestorAction",
      "values": [
        {
          "name": "UNSPECIFIED",
          "value": 0,
          "comment": []
        },
        {
          "name": "VAULT_INVEST",
          "value": 1,
          "comment": []
        },
        {
          "name": "VAULT_BURN_LP_TOKEN",
          "value": 2,
          "comment": []
        },
        {
          "name": "VAULT_REDEEM",
          "value": 3,
          "comment": []
        }
      ],
      "comment": []
    },
    {
      "name": "VaultRedemptionReqAgeCategory",
      "values": [
        {
          "name": "NORMAL",
          "value": 1,
          "comment": [
            "This request is at least as old as the minimum redemption period, and is eligible for automated redemption."
          ]
        },
        {
          "name": "URGENT",
          "value": 2,
          "comment": [
            "This request is nearing the maxmimum redemption period and will be factored into pre-order check margin requirements."
          ]
        },
        {
          "name": "OVERDUE",
          "value": 3,
          "comment": [
            "This request has exceeded the maximum redemption period and will be considered for forced redemptions."
          ]
        },
        {
          "name": "PRE_MIN",
          "value": 4,
          "comment": [
            "This request has yet to exceed the minimum redemption period, and is not yet eligible for automated redemption."
          ]
        }
      ],
      "comment": [
        "Denotes the age category of a given redemption request.",
        "",
        ""
      ]
    },
    {
      "name": "Venue",
      "values": [
        {
          "name": "ORDERBOOK",
          "value": 1,
          "comment": [
            "the trade is cleared on the orderbook venue"
          ]
        },
        {
          "name": "RFQ",
          "value": 2,
          "comment": [
            "the trade is cleared on the RFQ venue"
          ]
        }
      ],
      "comment": [
        "The list of Trading Venues that are supported on the GRVT exchange"
      ]
    }
  ]
}
