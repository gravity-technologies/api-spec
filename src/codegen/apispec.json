{
  "gateways": [
    {
      "name": "MarketData",
      "endpoints": [
        {
          "name": "dev",
          "url": "market-data.dev.gravitymarkets.io"
        },
        {
          "name": "stg",
          "url": "market-data.stg.gravitymarkets.io"
        },
        {
          "name": "testnet",
          "url": "market-data.testnet.grvt.io"
        },
        {
          "name": "prod",
          "url": "market-data.grvt.io"
        }
      ],
      "rpcs": [
        {
          "namespace": "Instrument",
          "name": "RPCGetInstrumentV1",
          "version": 1,
          "route": "/instrument",
          "auth_required": false,
          "request": "ApiGetInstrumentRequest",
          "response": "ApiGetInstrumentResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Instrument",
          "name": "RPCGetAllInstrumentsV1",
          "version": 1,
          "route": "/all_instruments",
          "auth_required": false,
          "request": "ApiGetAllInstrumentsRequest",
          "response": "ApiGetAllInstrumentsResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Instrument",
          "name": "RPCGetFilteredInstrumentsV1",
          "version": 1,
          "route": "/instruments",
          "auth_required": false,
          "request": "ApiGetFilteredInstrumentsRequest",
          "response": "ApiGetFilteredInstrumentsResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Ticker",
          "name": "RPCMiniTickerV1",
          "version": 1,
          "route": "/mini",
          "auth_required": false,
          "request": "ApiMiniTickerRequest",
          "response": "ApiMiniTickerResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Ticker",
          "name": "RPCTickerV1",
          "version": 1,
          "route": "/ticker",
          "auth_required": false,
          "request": "ApiTickerRequest",
          "response": "ApiTickerResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Orderbook",
          "name": "RPCOrderbookLevelsV1",
          "version": 1,
          "route": "/book",
          "auth_required": false,
          "request": "ApiOrderbookLevelsRequest",
          "response": "ApiOrderbookLevelsResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Trade",
          "name": "RPCPublicTradesV1",
          "version": 1,
          "route": "/trades",
          "auth_required": false,
          "request": "ApiPublicTradesRequest",
          "response": "ApiPublicTradesResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Trade",
          "name": "RPCPublicTradeHistoryV1",
          "version": 1,
          "route": "/trade_history",
          "auth_required": false,
          "request": "ApiPublicTradeHistoryRequest",
          "response": "ApiPublicTradeHistoryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Candlestick",
          "name": "RPCCandlestickV1",
          "version": 1,
          "route": "/kline",
          "auth_required": true,
          "request": "ApiCandlestickRequest",
          "response": "ApiCandlestickResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Settlement",
          "name": "RPCFundingRateV1",
          "version": 1,
          "route": "/funding",
          "auth_required": false,
          "request": "ApiFundingRateRequest",
          "response": "ApiFundingRateResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Settlement",
          "name": "RPCSettlementPriceV1",
          "version": 1,
          "route": "/settlement",
          "auth_required": false,
          "request": "ApiSettlementPriceRequest",
          "response": "ApiSettlementPriceResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        }
      ],
      "streams": [
        {
          "namespace": "Mini",
          "name": "StreamMiniTickerSnapV1",
          "channel": "v1.mini.s",
          "auth_required": false,
          "feed_selector": "WSMiniTickerFeedSelectorV1",
          "feed": "WSMiniTickerFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "MiniTicker",
          "name": "StreamMiniTickerDeltaV1",
          "channel": "v1.mini.d",
          "auth_required": false,
          "feed_selector": "WSMiniTickerFeedSelectorV1",
          "feed": "WSMiniTickerFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Ticker",
          "name": "StreamTickerSnapV1",
          "channel": "v1.ticker.s",
          "auth_required": false,
          "feed_selector": "WSTickerFeedSelectorV1",
          "feed": "WSTickerFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Ticker",
          "name": "StreamTickerDeltaV1",
          "channel": "v1.ticker.d",
          "auth_required": false,
          "feed_selector": "WSTickerFeedSelectorV1",
          "feed": "WSTickerFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Orderbook",
          "name": "StreamOrderbookSnapV1",
          "channel": "v1.book.s",
          "auth_required": false,
          "feed_selector": "WSOrderbookLevelsFeedSelectorV1",
          "feed": "WSOrderbookLevelsFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Orderbook",
          "name": "StreamOrderbookDeltaV1",
          "channel": "v1.book.d",
          "auth_required": false,
          "feed_selector": "WSOrderbookLevelsFeedSelectorV1",
          "feed": "WSOrderbookLevelsFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Trade",
          "name": "StreamPublicTradesV1",
          "channel": "v1.trade",
          "auth_required": false,
          "feed_selector": "WSPublicTradesFeedSelectorV1",
          "feed": "WSPublicTradesFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Candlestick",
          "name": "StreamCandlestickV1",
          "channel": "v1.candle",
          "auth_required": false,
          "feed_selector": "WSCandlestickFeedSelectorV1",
          "feed": "WSCandlestickFeedDataV1",
          "on_subscribe_errors": []
        }
      ]
    },
    {
      "name": "Trading",
      "endpoints": [
        {
          "name": "dev",
          "url": "trades.dev.gravitymarkets.io"
        },
        {
          "name": "stg",
          "url": "trades.stg.gravitymarkets.io"
        },
        {
          "name": "testnet",
          "url": "trades.testnet.grvt.io"
        },
        {
          "name": "prod",
          "url": "trades.grvt.io"
        }
      ],
      "rpcs": [
        {
          "namespace": "Order",
          "name": "RPCCreateOrderV1",
          "version": 1,
          "route": "/create_order",
          "auth_required": true,
          "request": "ApiCreateOrderRequest",
          "response": "ApiCreateOrderResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCCancelOrderV1",
          "version": 1,
          "route": "/cancel_order",
          "auth_required": true,
          "request": "ApiCancelOrderRequest",
          "response": "ApiCancelOrderResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCCancelAllOrdersV1",
          "version": 1,
          "route": "/cancel_all_orders",
          "auth_required": true,
          "request": "ApiCancelAllOrdersRequest",
          "response": "ApiCancelAllOrdersResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCGetOrderV1",
          "version": 1,
          "route": "/order",
          "auth_required": false,
          "request": "ApiGetOrderRequest",
          "response": "ApiGetOrderResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCOpenOrdersV1",
          "version": 1,
          "route": "/open_orders",
          "auth_required": true,
          "request": "ApiOpenOrdersRequest",
          "response": "ApiOpenOrdersResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Order",
          "name": "RPCOrderHistoryV1",
          "version": 1,
          "route": "/order_history",
          "auth_required": true,
          "request": "ApiOrderHistoryRequest",
          "response": "ApiOrderHistoryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Trade",
          "name": "RPCPrivateTradeHistoryV1",
          "version": 1,
          "route": "/trade_history",
          "auth_required": true,
          "request": "ApiPrivateTradeHistoryRequest",
          "response": "ApiPrivateTradeHistoryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Trade",
          "name": "RPCPositionsV1",
          "version": 1,
          "route": "/positions",
          "auth_required": true,
          "request": "ApiPositionsRequest",
          "response": "ApiPositionsResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCDepositV1",
          "version": 1,
          "route": "/deposit",
          "auth_required": true,
          "request": "ApiDepositRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCDepositHistoryV1",
          "version": 1,
          "route": "/deposit_history",
          "auth_required": true,
          "request": "ApiDepositHistoryRequest",
          "response": "ApiDepositHistoryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCTransferV1",
          "version": 1,
          "route": "/transfer",
          "auth_required": true,
          "request": "ApiTransferRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCTransferHistoryV1",
          "version": 1,
          "route": "/transfer_history",
          "auth_required": true,
          "request": "ApiTransferHistoryRequest",
          "response": "ApiTransferHistoryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCWithdrawalV1",
          "version": 1,
          "route": "/withdrawal",
          "auth_required": true,
          "request": "ApiWithdrawalRequest",
          "response": "AckResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Transfer",
          "name": "RPCWithdrawalHistoryV1",
          "version": 1,
          "route": "/withdrawal_history",
          "auth_required": true,
          "request": "ApiWithdrawalHistoryRequest",
          "response": "ApiWithdrawalHistoryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Account",
          "name": "RPCSubAccountSummaryV1",
          "version": 1,
          "route": "/account_summary",
          "auth_required": true,
          "request": "ApiSubAccountSummaryRequest",
          "response": "ApiSubAccountSummaryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Account",
          "name": "RPCSubAccountHistoryV1",
          "version": 1,
          "route": "/account_history",
          "auth_required": true,
          "request": "ApiSubAccountHistoryRequest",
          "response": "ApiSubAccountHistoryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Account",
          "name": "RPCAggregatedAccountSummaryV1",
          "version": 1,
          "route": "/aggregated_account_summary",
          "auth_required": true,
          "request": "EmptyRequest",
          "response": "ApiAggregatedAccountSummaryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        },
        {
          "namespace": "Account",
          "name": "RPCFundingAccountSummaryV1",
          "version": 1,
          "route": "/funding_account_summary",
          "auth_required": true,
          "request": "EmptyRequest",
          "response": "ApiFundingAccountSummaryResponse",
          "on_request_errors": [
            {
              "code": 1001,
              "message": "InternalServerErr",
              "status": 500
            }
          ]
        }
      ],
      "streams": [
        {
          "namespace": "Order",
          "name": "StreamOrderV1",
          "channel": "v1.order",
          "auth_required": true,
          "feed_selector": "WSOrderFeedSelectorV1",
          "feed": "WSOrderFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Order",
          "name": "StreamOrderStateV1",
          "channel": "v1.state",
          "auth_required": true,
          "feed_selector": "WSOrderStateFeedSelectorV1",
          "feed": "WSOrderStateFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Trade",
          "name": "StreamPrivateTradeV1",
          "channel": "v1.trade",
          "auth_required": true,
          "feed_selector": "WSPrivateTradeFeedSelectorV1",
          "feed": "WSPrivateTradeFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Trade",
          "name": "StreamPositionsV1",
          "channel": "v1.position",
          "auth_required": true,
          "feed_selector": "WSPositionsFeedSelectorV1",
          "feed": "WSPositionsFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Transfer",
          "name": "StreamDepositV1",
          "channel": "v1.deposit",
          "auth_required": true,
          "feed_selector": "EmptyRequest",
          "feed": "WSDepositFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Transfer",
          "name": "StreamTransferV1",
          "channel": "v1.transfer",
          "auth_required": true,
          "feed_selector": "EmptyRequest",
          "feed": "WSTransferFeedDataV1",
          "on_subscribe_errors": []
        },
        {
          "namespace": "Transfer",
          "name": "StreamWithdrawalV1",
          "channel": "v1.withdrawal",
          "auth_required": true,
          "feed_selector": "EmptyRequest",
          "feed": "WSWithdrawalFeedDataV1",
          "on_subscribe_errors": []
        }
      ]
    }
  ],
  "structs": [
    {
      "name": "ApiPositionsRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The sub account ID to request for"]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC', 'ETH']",
          "comment": [
            "The underlying filter to apply. If nil, this defaults to all underlyings. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be returned"
          ]
        }
      ],
      "comment": ["Query the positions of a sub account"]
    },
    {
      "name": "Positions",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Time at which the event was emitted in unix nanoseconds"]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The sub account ID that participated in the trade"]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": ["The instrument being represented"]
        },
        {
          "name": "balance",
          "lite_name": "b",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'2635000.50'",
          "comment": [
            "The balance of the position, expressed in underlying asset decimal units. Negative for short positions"
          ]
        },
        {
          "name": "value",
          "lite_name": "v",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'2635000.50'",
          "comment": [
            "The value of the position, negative for short assets, expressed in quote asset decimal units"
          ]
        },
        {
          "name": "entry_price",
          "lite_name": "ep",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The entry price of the position, expressed in `9` decimals",
            "Whenever increasing the balance of a position, the entry price is updated to the new average entry price",
            "newEntryPrice = (oldEntryPrice * oldBalance + tradePrice * tradeBalance) / (oldBalance + tradeBalance)"
          ]
        },
        {
          "name": "exit_price",
          "lite_name": "ep1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The exit price of the position, expressed in `9` decimals",
            "Whenever decreasing the balance of a position, the exit price is updated to the new average exit price",
            "newExitPrice = (oldExitPrice * oldExitBalance + tradePrice * tradeBalance) / (oldExitBalance + tradeBalance)"
          ]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the position, expressed in `9` decimals"
          ]
        },
        {
          "name": "unrealized_pnl",
          "lite_name": "up",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'135000.50'",
          "comment": [
            "The unrealized PnL of the position, expressed in quote asset decimal units",
            "unrealizedPnl = (markPrice - entryPrice) * balance"
          ]
        },
        {
          "name": "realized_pnl",
          "lite_name": "rp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "'-35000.30'",
          "comment": [
            "The realized PnL of the position, expressed in quote asset decimal units",
            "realizedPnl = (exitPrice - entryPrice) * exitBalance"
          ]
        },
        {
          "name": "pnl",
          "lite_name": "p",
          "semantic_type": "string",
          "json_type": "string",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "example": "'100000.20'",
          "comment": [
            "The total PnL of the position, expressed in quote asset decimal units",
            "totalPnl = realizedPnl + unrealizedPnl"
          ]
        },
        {
          "name": "roi",
          "lite_name": "r",
          "semantic_type": "string",
          "json_type": "string",
          "index": 11,
          "array_depth": 0,
          "optional": false,
          "example": "'10.20'",
          "comment": [
            "The ROI of the position, expressed as a percentage",
            "roi = (pnl / (entryPrice * balance)) * 100"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiPositionsResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "Positions",
          "json_type": "Positions",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The positions matching the request filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiPrivateTradeHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The sub account ID to request for"]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC', 'ETH']",
          "comment": [
            "The underlying filter to apply. If nil, this defaults to all underlyings. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "expiration",
          "lite_name": "e",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "The expiration time to apply in unix nanoseconds. If nil, this defaults to all expirations. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "strike_price",
          "lite_name": "sp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "65000.0",
          "comment": [
            "The strike price to apply. If nil, this defaults to all strike prices. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 500; Max 1000"]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": ["The cursor to indicate when to start the query from"]
        }
      ],
      "comment": [
        "Query for all historical trades made by a single account. A single order can be matched multiple times, hence there is no real way to uniquely identify a trade."
      ]
    },
    {
      "name": "PrivateTrade",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Time at which the event was emitted in unix nanoseconds"]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The sub account ID that participated in the trade"]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": ["The instrument being represented"]
        },
        {
          "name": "is_buyer",
          "lite_name": "ib",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": ["The side that the subaccount took on the trade"]
        },
        {
          "name": "is_taker",
          "lite_name": "it",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": ["The role that the subaccount took on the trade"]
        },
        {
          "name": "size",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'0.30'",
          "comment": [
            "The number of assets being traded, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "price",
          "lite_name": "p",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": ["The traded price, expressed in `9` decimals"]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the instrument at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "index_price",
          "lite_name": "ip",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The index price of the instrument at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "interest_rate",
          "lite_name": "ir",
          "semantic_type": "string",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "0.0003",
          "comment": [
            "The interest rate of the underlying at point of trade, expressed in centibeeps (1/100th of a basis point)"
          ]
        },
        {
          "name": "forward_price",
          "lite_name": "fp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "[Options] The forward price of the option at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "realized_pnl",
          "lite_name": "rp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 11,
          "array_depth": 0,
          "optional": false,
          "example": "'2400.50'",
          "comment": [
            "The realized PnL of the trade, expressed in quote asset decimal units (0 if increasing position size)"
          ]
        },
        {
          "name": "fee",
          "lite_name": "f",
          "semantic_type": "string",
          "json_type": "string",
          "index": 12,
          "array_depth": 0,
          "optional": false,
          "example": "'9.75'",
          "comment": [
            "The fees paid on the trade, expressed in quote asset decimal unit (negative if maker rebate applied)"
          ]
        },
        {
          "name": "fee_rate",
          "lite_name": "fr",
          "semantic_type": "string",
          "json_type": "string",
          "index": 13,
          "array_depth": 0,
          "optional": false,
          "example": "0.0003",
          "comment": ["The fee rate paid on the trade"]
        },
        {
          "name": "trade_id",
          "lite_name": "ti",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 14,
          "array_depth": 0,
          "optional": false,
          "example": "'209358'",
          "comment": ["A trade identifier"]
        },
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 15,
          "array_depth": 0,
          "optional": false,
          "example": "'0x10000101000203040506'",
          "comment": ["An order identifier"]
        },
        {
          "name": "venue",
          "lite_name": "v",
          "semantic_type": "Venue",
          "json_type": "Venue",
          "index": 16,
          "array_depth": 0,
          "optional": false,
          "example": "'ORDERBOOK'",
          "comment": ["The venue where the trade occurred"]
        },
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 18,
          "array_depth": 0,
          "optional": false,
          "example": "'23042'",
          "comment": [
            "A unique identifier for the active order within a subaccount, specified by the client",
            "This is used to identify the order in the client's system",
            "This field can be used for order amendment/cancellation, but has no bearing on the smart contract layer",
            "This field will not be propagated to the smart contract, and should not be signed by the client",
            "This value must be unique for all active orders in a subaccount, or amendment/cancellation will not work as expected",
            "Gravity UI will generate a random clientOrderID for each order in the range [0, 2^63 - 1]",
            "To prevent any conflicts, client machines should generate a random clientOrderID in the range [2^63, 2^64 - 1]",
            "",
            "When GRVT Backend receives an order with an overlapping clientOrderID, we will reject the order with rejectReason set to overlappingClientOrderId"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiPrivateTradeHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "total",
          "lite_name": "t",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "52",
          "comment": [
            "The total number of private trades matching the request filter"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": ["The cursor to indicate when to start the query from"]
        },
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "PrivateTrade",
          "json_type": "PrivateTrade",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": ["The private trades matching the request asset"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiSubAccountSummaryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount ID to filter by"]
        }
      ],
      "comment": []
    },
    {
      "name": "SpotBalance",
      "is_root": false,
      "fields": [
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The currency you hold a spot balance in"]
        },
        {
          "name": "balance",
          "lite_name": "b",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The balance of the asset, expressed in underlying asset decimal units",
            "Must take into account the value of all positions with this quote asset",
            "ie. for USDT denominated subaccounts, this is is identical to total balance"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "SubAccount",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Time at which the event was emitted in unix nanoseconds"]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The sub account ID this entry refers to"]
        },
        {
          "name": "margin_type",
          "lite_name": "mt",
          "semantic_type": "MarginType",
          "json_type": "MarginType",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'SIMPLE_CROSS_MARGIN'",
          "comment": ["The type of margin algorithm this subaccount uses"]
        },
        {
          "name": "quote_currency",
          "lite_name": "qc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": [
            "The Quote Currency that this Sub Account is denominated in",
            "This subaccount can only open derivative positions denominated in this quote currency",
            "All other assets are converted to this quote currency for the purpose of calculating margin",
            "In the future, when users select a Multi-Currency Margin Type, this will be USD"
          ]
        },
        {
          "name": "unrealized_pnl",
          "lite_name": "up",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The total unrealized PnL of all positions owned by this subaccount, denominated in quote currency decimal units"
          ]
        },
        {
          "name": "total_value",
          "lite_name": "tv",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The total value across all spot assets, or in other words, the current margin "
          ]
        },
        {
          "name": "initial_margin",
          "lite_name": "im",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The initial margin requirement of all positions owned by this vault, denominated in quote currency decimal units"
          ]
        },
        {
          "name": "maintanence_margin",
          "lite_name": "mm",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The maintanence margin requirement of all positions owned by this vault, denominated in quote currency decimal units"
          ]
        },
        {
          "name": "available_margin",
          "lite_name": "am",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The margin available for withdrawal, denominated in quote currency decimal units"
          ]
        },
        {
          "name": "spot_balances",
          "lite_name": "sb",
          "semantic_type": "SpotBalance",
          "json_type": "SpotBalance",
          "index": 9,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of spot assets owned by this sub account, and their balances"
          ]
        },
        {
          "name": "positions",
          "lite_name": "p",
          "semantic_type": "Positions",
          "json_type": "Positions",
          "index": 10,
          "array_depth": 1,
          "optional": false,
          "comment": ["The list of positions owned by this sub account"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiSubAccountSummaryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "SubAccount",
          "json_type": "SubAccount",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The sub account matching the request sub account"]
        }
      ],
      "comment": [
        "Query for sub-account details, including base currency balance, all derivative positions, margin levels, and P\u0026L."
      ]
    },
    {
      "name": "ApiSubAccountHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The sub account ID to request for"]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Start time of sub account history in unix nanoseconds"]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["End time of sub account history in unix nanoseconds"]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        }
      ],
      "comment": [
        "The request to get the history of a sub account",
        "SubAccount Summary values are snapshotted once every hour",
        "No snapshots are taken if the sub account has no activity in the hourly window",
        "The history is returned in reverse chronological order",
        "History is preserved only for the last 30 days"
      ]
    },
    {
      "name": "ApiSubAccountHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "total",
          "lite_name": "t",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "52",
          "comment": [
            "The total number of sub account snapshots matching the request filter"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        },
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "SubAccount",
          "json_type": "SubAccount",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The sub account history matching the request sub account"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiLatestSnapSubAccountsRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_i_ds",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "example": "['2376', '5821']",
          "comment": ["The list of sub account ids to query"]
        }
      ],
      "comment": [
        "The request to get the latest snapshot of list sub account",
        ""
      ]
    },
    {
      "name": "ApiLatestSnapSubAccountsResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "SubAccount",
          "json_type": "SubAccount",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The sub account history matching the request sub account"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "MarkPrice",
      "is_root": true,
      "fields": [
        {
          "name": "currency",
          "lite_name": "c",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The currency you hold a spot balance in"]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "65000.1",
          "comment": ["The mark price of the asset, expressed in `9` decimals"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiAggregatedAccountSummaryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The main account ID of the account to which the summary belongs"
          ]
        },
        {
          "name": "total_equity",
          "lite_name": "te",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3945034.23'",
          "comment": ["Total equity of the account, denominated in USD"]
        },
        {
          "name": "spot_balances",
          "lite_name": "sb",
          "semantic_type": "SpotBalance",
          "json_type": "SpotBalance",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of spot assets owned by this sub account, and their balances"
          ]
        },
        {
          "name": "mark_prices",
          "lite_name": "mp",
          "semantic_type": "MarkPrice",
          "json_type": "MarkPrice",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of mark prices for the assets owned by this account"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFundingAccountSummaryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The main account ID of the account to which the summary belongs"
          ]
        },
        {
          "name": "total_equity",
          "lite_name": "te",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3945034.23'",
          "comment": ["Total equity of the account, denominated in USD"]
        },
        {
          "name": "spot_balances",
          "lite_name": "sb",
          "semantic_type": "SpotBalance",
          "json_type": "SpotBalance",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of spot assets owned by this account, and their balances"
          ]
        },
        {
          "name": "mark_prices",
          "lite_name": "mp",
          "semantic_type": "MarkPrice",
          "json_type": "MarkPrice",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The list of mark prices for the assets owned by this account"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiOrderbookLevelsRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "depth",
          "lite_name": "d",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "100",
          "comment": [
            "Depth of the order book to be retrieved (API/Snapshot max is 100, Delta max is 1000)"
          ]
        },
        {
          "name": "aggregate",
          "lite_name": "a",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "10",
          "comment": [
            "The number of levels to aggregate into one level (1 = no aggregation, 10/100/1000 = aggregate 10/100/1000 levels into 1)"
          ]
        }
      ],
      "comment": [
        "Retrieves aggregated price depth for a single instrument, with a maximum depth of 10 levels. Do not use this to poll for data -- a websocket subscription is much more performant, and useful."
      ]
    },
    {
      "name": "OrderbookLevel",
      "is_root": false,
      "fields": [
        {
          "name": "price",
          "lite_name": "p",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": ["The price of the level, expressed in `9` decimals"]
        },
        {
          "name": "size",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'3456.78'",
          "comment": [
            "The number of assets offered, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "num_orders",
          "lite_name": "no",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'123'",
          "comment": ["The number of open orders at this level"]
        }
      ],
      "comment": []
    },
    {
      "name": "OrderbookLevels",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Time at which the event was emitted in unix nanoseconds"]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "bids",
          "lite_name": "b",
          "semantic_type": "OrderbookLevel",
          "json_type": "OrderbookLevel",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": ["The list of best bids up till query depth"]
        },
        {
          "name": "asks",
          "lite_name": "a",
          "semantic_type": "OrderbookLevel",
          "json_type": "OrderbookLevel",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "comment": ["The list of best asks up till query depth"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiOrderbookLevelsResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "OrderbookLevels",
          "json_type": "OrderbookLevels",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The orderbook levels objects matching the request asset"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiMiniTickerRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        }
      ],
      "comment": [
        "Retrieves a single mini ticker value for a single instrument. Please do not use this to repeatedly poll for data -- a websocket subscription is much more performant, and useful."
      ]
    },
    {
      "name": "MiniTicker",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": true,
          "example": "'1697788800000000000'",
          "comment": ["Time at which the event was emitted in unix nanoseconds"]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "index_price",
          "lite_name": "ip",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The index price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "last_price",
          "lite_name": "lp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The last traded price of the instrument (also close price), expressed in `9` decimals"
          ]
        },
        {
          "name": "last_size",
          "lite_name": "ls",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets traded in the last trade, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "mid_price",
          "lite_name": "mp1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The mid price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_bid_price",
          "lite_name": "bb",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The best bid price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_bid_size",
          "lite_name": "bb1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets offered on the best bid price of the instrument, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "best_ask_price",
          "lite_name": "ba",
          "semantic_type": "string",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The best ask price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_ask_size",
          "lite_name": "ba1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 10,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets offered on the best ask price of the instrument, expressed in underlying asset decimal units"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiMiniTickerResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "MiniTicker",
          "json_type": "MiniTicker",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The mini ticker matching the request asset"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiTickerRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        }
      ],
      "comment": [
        "Retrieves a single ticker value for a single instrument. Please do not use this to repeatedly poll for data -- a websocket subscription is much more performant, and useful."
      ]
    },
    {
      "name": "Ticker",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": true,
          "example": "'1697788800000000000'",
          "comment": ["Time at which the event was emitted in unix nanoseconds"]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": true,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "index_price",
          "lite_name": "ip",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The index price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "last_price",
          "lite_name": "lp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The last traded price of the instrument (also close price), expressed in `9` decimals"
          ]
        },
        {
          "name": "last_size",
          "lite_name": "ls",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets traded in the last trade, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "mid_price",
          "lite_name": "mp1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The mid price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_bid_price",
          "lite_name": "bb",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The best bid price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_bid_size",
          "lite_name": "bb1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets offered on the best bid price of the instrument, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "best_ask_price",
          "lite_name": "ba",
          "semantic_type": "string",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The best ask price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "best_ask_size",
          "lite_name": "ba1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 10,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The number of assets offered on the best ask price of the instrument, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "funding_rate_8_h_curr",
          "lite_name": "fr",
          "semantic_type": "string",
          "json_type": "string",
          "index": 11,
          "array_depth": 0,
          "optional": true,
          "example": "0.0003",
          "comment": [
            "The current funding rate of the instrument, expressed in centibeeps (1/100th of a basis point)"
          ]
        },
        {
          "name": "funding_rate_8_h_avg",
          "lite_name": "fr1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 12,
          "array_depth": 0,
          "optional": true,
          "example": "0.0003",
          "comment": [
            "The average funding rate of the instrument (over last 8h), expressed in centibeeps (1/100th of a basis point)"
          ]
        },
        {
          "name": "interest_rate",
          "lite_name": "ir",
          "semantic_type": "string",
          "json_type": "string",
          "index": 13,
          "array_depth": 0,
          "optional": true,
          "example": "0.0003",
          "comment": [
            "The interest rate of the underlying, expressed in centibeeps (1/100th of a basis point)"
          ]
        },
        {
          "name": "forward_price",
          "lite_name": "fp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 14,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "[Options] The forward price of the option, expressed in `9` decimals"
          ]
        },
        {
          "name": "buy_volume_24_h_u",
          "lite_name": "bv",
          "semantic_type": "string",
          "json_type": "string",
          "index": 15,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The 24 hour taker buy volume of the instrument, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "sell_volume_24_h_u",
          "lite_name": "sv",
          "semantic_type": "string",
          "json_type": "string",
          "index": 16,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The 24 hour taker sell volume of the instrument, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "buy_volume_24_h_q",
          "lite_name": "bv1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 17,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The 24 hour taker buy volume of the instrument, expressed in quote asset decimal units"
          ]
        },
        {
          "name": "sell_volume_24_h_q",
          "lite_name": "sv1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 18,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The 24 hour taker sell volume of the instrument, expressed in quote asset decimal units"
          ]
        },
        {
          "name": "high_price",
          "lite_name": "hp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 19,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The 24 hour highest traded price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "low_price",
          "lite_name": "lp1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 20,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The 24 hour lowest traded price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "open_price",
          "lite_name": "op",
          "semantic_type": "string",
          "json_type": "string",
          "index": 21,
          "array_depth": 0,
          "optional": true,
          "example": "'65038.01'",
          "comment": [
            "The 24 hour first traded price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "open_interest",
          "lite_name": "oi",
          "semantic_type": "string",
          "json_type": "string",
          "index": 22,
          "array_depth": 0,
          "optional": true,
          "example": "'123456.78'",
          "comment": [
            "The open interest in the instrument, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "long_short_ratio",
          "lite_name": "ls1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 23,
          "array_depth": 0,
          "optional": true,
          "example": "'0.5'",
          "comment": [
            "The ratio of accounts that are net long vs net short on this instrument"
          ]
        }
      ],
      "comment": [
        "Derived data such as the below, will not be included by default:",
        "  - 24 hour volume (`buyVolume + sellVolume`)",
        "  - 24 hour taker buy/sell ratio (`buyVolume / sellVolume`)",
        "  - 24 hour average trade price (`volumeQ / volumeU`)",
        "  - 24 hour average trade volume (`volume / trades`)",
        "  - 24 hour percentage change (`24hStatChange / 24hStat`)",
        "  - 48 hour statistics (`2 * 24hStat - 24hStatChange`)",
        "",
        "To query for an extended ticker payload, leverage the `greeks` and the `derived` flags.",
        "Ticker extensions are currently under design to offer you more convenience.",
        "These flags are only supported on the `Ticker Snapshot` WS endpoint, and on the `Ticker` API endpoint.",
        ""
      ]
    },
    {
      "name": "ApiTickerResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "Ticker",
          "json_type": "Ticker",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The mini ticker matching the request asset"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiPublicTradesRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 500; Max 1000"]
        }
      ],
      "comment": [
        "Retrieves up to 1000 of the most recent public trades in any given instrument. Do not use this to poll for data -- a websocket subscription is much more performant, and useful.",
        "This endpoint offers public trading data, use the Trading APIs instead to query for your personalized trade tape."
      ]
    },
    {
      "name": "PublicTrade",
      "is_root": false,
      "fields": [
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Time at which the event was emitted in unix nanoseconds"]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "is_taker_buyer",
          "lite_name": "it",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": ["If taker was the buyer on the trade"]
        },
        {
          "name": "size",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The number of assets being traded, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "price",
          "lite_name": "p",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": ["The traded price, expressed in `9` decimals"]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the instrument at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "index_price",
          "lite_name": "ip",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The index price of the instrument at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "interest_rate",
          "lite_name": "ir",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "0.0003",
          "comment": [
            "The interest rate of the underlying at point of trade, expressed in centibeeps (1/100th of a basis point)"
          ]
        },
        {
          "name": "forward_price",
          "lite_name": "fp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "[Options] The forward price of the option at point of trade, expressed in `9` decimals"
          ]
        },
        {
          "name": "trade_id",
          "lite_name": "ti",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "'1234567890'",
          "comment": ["A trade identifier"]
        },
        {
          "name": "venue",
          "lite_name": "v",
          "semantic_type": "Venue",
          "json_type": "Venue",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "comment": ["The venue where the trade occurred"]
        },
        {
          "name": "is_liquidation",
          "lite_name": "il",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 11,
          "array_depth": 0,
          "optional": false,
          "example": "false",
          "comment": ["If the trade was a liquidation"]
        }
      ],
      "comment": [
        "All private RFQs and Private AXEs will be filtered out from the responses"
      ]
    },
    {
      "name": "ApiPublicTradesResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "PublicTrade",
          "json_type": "PublicTrade",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The public trades matching the request asset"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiPublicTradeHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 500; Max 1000"]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": ["The cursor to indicate when to start the query from"]
        }
      ],
      "comment": [
        "Perform historical lookup of public trades in any given instrument.",
        "This endpoint offers public trading data, use the Trading APIs instead to query for your personalized trade tape.",
        "Only data from the last three months will be retained."
      ]
    },
    {
      "name": "ApiPublicTradeHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "PublicTrade",
          "json_type": "PublicTrade",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The public trades matching the request asset"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetInstrumentRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        }
      ],
      "comment": [
        "Fetch a single instrument by supplying the asset or instrument name"
      ]
    },
    {
      "name": "Instrument",
      "is_root": false,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC'",
          "comment": ["The underlying currency"]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The quote currency"]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'PERPETUAL'",
          "comment": ["The kind of instrument"]
        },
        {
          "name": "expiry",
          "lite_name": "e",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The expiry time of the instrument in unix nanoseconds"]
        },
        {
          "name": "strike_price",
          "lite_name": "sp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The strike price of the instrument, expressed in `9` decimals"
          ]
        },
        {
          "name": "venues",
          "lite_name": "v",
          "semantic_type": "Venue",
          "json_type": "Venue",
          "index": 6,
          "array_depth": 1,
          "optional": false,
          "example": "['ORDERBOOK']",
          "comment": ["Venues that this instrument can be traded at"]
        },
        {
          "name": "settlement_period",
          "lite_name": "sp1",
          "semantic_type": "InstrumentSettlementPeriod",
          "json_type": "InstrumentSettlementPeriod",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'PERPETUAL'",
          "comment": ["The settlement period of the instrument"]
        },
        {
          "name": "underlying_decimals",
          "lite_name": "ud",
          "semantic_type": "int8",
          "json_type": "number",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "3",
          "comment": [
            "The smallest denomination of the underlying asset supported by GRVT (+3 represents 0.001, -3 represents 1000, 0 represents 1)"
          ]
        },
        {
          "name": "quote_decimals",
          "lite_name": "qd",
          "semantic_type": "int8",
          "json_type": "number",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "3",
          "comment": [
            "The smallest denomination of the quote asset supported by GRVT (+3 represents 0.001, -3 represents 1000, 0 represents 1)"
          ]
        },
        {
          "name": "tick_size",
          "lite_name": "ts",
          "semantic_type": "string",
          "json_type": "string",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "example": "'0.01'",
          "comment": [
            "The size of a single tick, expressed in quote asset decimal units"
          ]
        },
        {
          "name": "min_size",
          "lite_name": "ms",
          "semantic_type": "string",
          "json_type": "string",
          "index": 11,
          "array_depth": 0,
          "optional": false,
          "example": "'0.01'",
          "comment": [
            "The minimum contract size, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "min_block_trade_size",
          "lite_name": "mb",
          "semantic_type": "string",
          "json_type": "string",
          "index": 12,
          "array_depth": 0,
          "optional": false,
          "example": "'5.0'",
          "comment": [
            "The minimum block trade size, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "create_time",
          "lite_name": "ct",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 13,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Creation time in unix nanoseconds"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetInstrumentResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "Instrument",
          "json_type": "Instrument",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The instrument matching the request asset"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetFilteredInstrumentsRequest",
      "is_root": true,
      "fields": [
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC', 'ETH']",
          "comment": [
            "The underlying filter to apply. If nil, this defaults to all underlyings. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "is_active",
          "lite_name": "ia",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": ["Request for active instruments only"]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 500; Max 100000"]
        }
      ],
      "comment": ["Fetch a list of instruments based on the filters provided"]
    },
    {
      "name": "ApiGetFilteredInstrumentsResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "Instrument",
          "json_type": "Instrument",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The instruments matching the request filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiCandlestickRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "interval",
          "lite_name": "i1",
          "semantic_type": "CandlestickInterval",
          "json_type": "CandlestickInterval",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": ["The interval of each candlestick"]
        },
        {
          "name": "type",
          "lite_name": "t",
          "semantic_type": "CandlestickType",
          "json_type": "CandlestickType",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["The type of candlestick data to retrieve"]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Start time of kline data in unix nanoseconds"]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["End time of kline data in unix nanoseconds"]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 500; Max 1500"]
        }
      ],
      "comment": [
        "Kline/Candlestick bars for an instrument. Klines are uniquely identified by their instrument, type, interval, and open time.",
        "startTime and endTime are optional parameters. The semantics of these parameters are as follows:\u003cul\u003e\u003cli\u003eIf both `startTime` and `endTime` are not set, the most recent candlesticks are returned up to `limit`.\u003c/li\u003e\u003cli\u003eIf `startTime` is set and `endTime` is not set, the candlesticks starting from `startTime` are returned up to `limit`.\u003c/li\u003e\u003cli\u003eIf `startTime` is not set and `endTime` is set, the candlesticks ending at `endTime` are returned up to `limit`.\u003c/li\u003e\u003cli\u003eIf both `startTime` and `endTime` are set, the candlesticks between `startTime` and `endTime` are returned up to `limit`.\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "Candlestick",
      "is_root": false,
      "fields": [
        {
          "name": "open_time",
          "lite_name": "ot",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Open time of kline bar in unix nanoseconds"]
        },
        {
          "name": "close_time",
          "lite_name": "ct",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Close time of kline bar in unix nanosecond"]
        },
        {
          "name": "open",
          "lite_name": "o",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The open price, expressed in underlying currency resolution units"
          ]
        },
        {
          "name": "close",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The close price, expressed in underlying currency resolution units"
          ]
        },
        {
          "name": "high",
          "lite_name": "h",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The high price, expressed in underlying currency resolution units"
          ]
        },
        {
          "name": "low",
          "lite_name": "l",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The low price, expressed in underlying currency resolution units"
          ]
        },
        {
          "name": "volume_u",
          "lite_name": "vu",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The underlying volume transacted, expressed in underlying asset decimal units"
          ]
        },
        {
          "name": "volume_q",
          "lite_name": "vq",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'123456.78'",
          "comment": [
            "The quote volume transacted, expressed in quote asset decimal units"
          ]
        },
        {
          "name": "trades",
          "lite_name": "t",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "123456",
          "comment": ["The number of trades transacted"]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        }
      ],
      "comment": [""]
    },
    {
      "name": "ApiCandlestickResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "Candlestick",
          "json_type": "Candlestick",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The candlestick result set for given interval"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFundingRateRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Start time of funding rate in unix nanoseconds"]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["End time of funding rate in unix nanoseconds"]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 90; Max 300"]
        }
      ],
      "comment": [
        "Lookup the historical funding rate of various pairs.",
        "startTime and endTime are optional parameters. The semantics of these parameters are as follows:\u003cul\u003e\u003cli\u003eIf both `startTime` and `endTime` are not set, the most recent funding rates are returned up to `limit`.\u003c/li\u003e\u003cli\u003eIf `startTime` is set and `endTime` is not set, the funding rates starting from `startTime` are returned up to `limit`.\u003c/li\u003e\u003cli\u003eIf `startTime` is not set and `endTime` is set, the funding rates ending at `endTime` are returned up to `limit`.\u003c/li\u003e\u003cli\u003eIf both `startTime` and `endTime` are set, the funding rates between `startTime` and `endTime` are returned up to `limit`.\u003c/li\u003e\u003c/ul\u003e",
        "",
        "The instrument is also optional. When left empty, all perpetual instruments are returned."
      ]
    },
    {
      "name": "FundingRate",
      "is_root": false,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "funding_rate",
          "lite_name": "fr",
          "semantic_type": "int32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'6.78'",
          "comment": [
            "The funding rate of the instrument, expressed in centibeeps"
          ]
        },
        {
          "name": "funding_time",
          "lite_name": "ft",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "The funding timestamp of the funding rate, expressed in unix nanoseconds"
          ]
        },
        {
          "name": "mark_price",
          "lite_name": "mp",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The mark price of the instrument at funding timestamp, expressed in `9` decimals"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFundingRateResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "FundingRate",
          "json_type": "FundingRate",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The funding rate result set for given interval"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiSettlementPriceRequest",
      "is_root": true,
      "fields": [
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC'",
          "comment": ["The underlying currency to select"]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The quote currency to select"]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Start time of kline data in unix nanoseconds"]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["End time of kline data in unix nanoseconds"]
        },
        {
          "name": "expiration",
          "lite_name": "e",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The expiration time to select in unix nanoseconds"]
        },
        {
          "name": "strike_price",
          "lite_name": "sp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "65000.0",
          "comment": ["The strike price to select"]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 30; Max 100"]
        }
      ],
      "comment": [
        "Lookup the historical settlement price of various pairs.",
        "startTime and endTime are optional parameters. The semantics of these parameters are as follows:\u003cul\u003e\u003cli\u003eIf both `startTime` and `endTime` are not set, the most recent settlement prices are returned up to `limit`.\u003c/li\u003e\u003cli\u003eIf `startTime` is set and `endTime` is not set, the settlement prices starting from `startTime` are returned up to `limit`.\u003c/li\u003e\u003cli\u003eIf `startTime` is not set and `endTime` is set, the settlement prices ending at `endTime` are returned up to `limit`.\u003c/li\u003e\u003cli\u003eIf both `startTime` and `endTime` are set, the settlement prices between `startTime` and `endTime` are returned up to `limit`.\u003c/li\u003e\u003c/ul\u003e",
        "",
        "The instrument is also optional. When left empty, all perpetual instruments are returned."
      ]
    },
    {
      "name": "APISettlementPrice",
      "is_root": false,
      "fields": [
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC'",
          "comment": ["The underlying currency of the settlement price"]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The quote currency of the settlement price"]
        },
        {
          "name": "settlement_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "The settlement timestamp of the settlement price, expressed in unix nanoseconds"
          ]
        },
        {
          "name": "settlement_price",
          "lite_name": "sp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": ["The settlement price, expressed in `9` decimals"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiSettlementPriceResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "APISettlementPrice",
          "json_type": "APISettlementPrice",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The funding rate result set for given interval"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSRequestV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.d'",
          "comment": ["The channel to subscribe to (eg: ticker.s / ticker.d "]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp', 'ETH_USDT_Perp']",
          "comment": ["The list of feeds to subscribe to (eg: "]
        },
        {
          "name": "method",
          "lite_name": "m",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'subscribe'",
          "comment": [
            "The method to use for the request (eg: subscribe / unsubscribe)"
          ]
        },
        {
          "name": "is_full",
          "lite_name": "if",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": ["Whether the request is for full data or lite data"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSOrderbookLevelsFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "rate",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": [
            "The minimal rate at which we publish feeds (in milliseconds)",
            "Delta (100, 200, 500, 1000, 5000)",
            "Snapshot (500, 1000, 5000)"
          ]
        },
        {
          "name": "depth",
          "lite_name": "d",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "100",
          "comment": [
            "Depth of the order book to be retrieved (API/Snapshot max is 100, Delta max is 1000)"
          ]
        },
        {
          "name": "aggregate",
          "lite_name": "a",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "10",
          "comment": [
            "The number of levels to aggregate into one level (1 = no aggregation, 10/100/1000 = aggregate 10/100/1000 levels into 1)"
          ]
        }
      ],
      "comment": [
        "Subscribes to aggregated orderbook updates for a single instrument. The `book.s` channel offers simpler integration. To experience higher publishing rates, please use the `book.d` channel.",
        "Unlike the `book.d` channel which publishes an initial snapshot, then only streams deltas after, the `book.s` channel publishes full snapshots at each feed.",
        "",
        "The Delta feed will work as follows:\u003cul\u003e\u003cli\u003eOn subscription, the server will send a full snapshot of all levels of the Orderbook.\u003c/li\u003e\u003cli\u003eAfter the snapshot, the server will only send levels that have changed in value.\u003c/li\u003e\u003c/ul\u003e",
        "",
        "Field Semantics:\u003cul\u003e\u003cli\u003e[DeltaOnly] If a level is not updated, level not published\u003c/li\u003e\u003cli\u003eIf a level is updated, {size: '123'}\u003c/li\u003e\u003cli\u003eIf a level is set to zero, {size: '0'}\u003c/li\u003e\u003cli\u003eIncoming levels will be published as soon as price moves\u003c/li\u003e\u003cli\u003eOutgoing levels will be published with `size = 0`\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "WSOrderbookLevelsFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.book.s'",
          "comment": ["Stream name"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "OrderbookLevels",
          "json_type": "OrderbookLevels",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["An orderbook levels object matching the request filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSMiniTickerFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "rate",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": [
            "The minimal rate at which we publish feeds (in milliseconds)",
            "Delta (raw, 50, 100, 200, 500, 1000, 5000)",
            "Snapshot (200, 500, 1000, 5000)"
          ]
        }
      ],
      "comment": [
        "Subscribes to a mini ticker feed for a single instrument. The `mini.s` channel offers simpler integration. To experience higher publishing rates, please use the `mini.d` channel.",
        "Unlike the `mini.d` channel which publishes an initial snapshot, then only streams deltas after, the `mini.s` channel publishes full snapshots at each feed.",
        "",
        "The Delta feed will work as follows:\u003cul\u003e\u003cli\u003eOn subscription, the server will send a full snapshot of the mini ticker.\u003c/li\u003e\u003cli\u003eAfter the snapshot, the server will only send deltas of the mini ticker.\u003c/li\u003e\u003cli\u003eThe server will send a delta if any of the fields in the mini ticker have changed.\u003c/li\u003e\u003c/ul\u003e",
        "",
        "Field Semantics:\u003cul\u003e\u003cli\u003e[DeltaOnly] If a field is not updated, {}\u003c/li\u003e\u003cli\u003eIf a field is updated, {field: '123'}\u003c/li\u003e\u003cli\u003eIf a field is set to zero, {field: '0'}\u003c/li\u003e\u003cli\u003eIf a field is set to null, {field: ''}\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "WSMiniTickerFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.mini.s'",
          "comment": ["Stream name"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "MiniTicker",
          "json_type": "MiniTicker",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["A mini ticker matching the request filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSTickerFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "rate",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": [
            "The minimal rate at which we publish feeds (in milliseconds)",
            "Delta (100, 200, 500, 1000, 5000)",
            "Snapshot (500, 1000, 5000)"
          ]
        }
      ],
      "comment": [
        "Subscribes to a ticker feed for a single instrument. The `ticker.s` channel offers simpler integration. To experience higher publishing rates, please use the `ticker.d` channel.",
        "Unlike the `ticker.d` channel which publishes an initial snapshot, then only streams deltas after, the `ticker.s` channel publishes full snapshots at each feed.",
        "",
        "The Delta feed will work as follows:\u003cul\u003e\u003cli\u003eOn subscription, the server will send a full snapshot of the ticker.\u003c/li\u003e\u003cli\u003eAfter the snapshot, the server will only send deltas of the ticker.\u003c/li\u003e\u003cli\u003eThe server will send a delta if any of the fields in the ticker have changed.\u003c/li\u003e\u003c/ul\u003e",
        "",
        "Field Semantics:\u003cul\u003e\u003cli\u003e[DeltaOnly] If a field is not updated, {}\u003c/li\u003e\u003cli\u003eIf a field is updated, {field: '123'}\u003c/li\u003e\u003cli\u003eIf a field is set to zero, {field: '0'}\u003c/li\u003e\u003cli\u003eIf a field is set to null, {field: ''}\u003c/li\u003e\u003c/ul\u003e"
      ]
    },
    {
      "name": "WSTickerFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.s'",
          "comment": ["Stream name"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Ticker",
          "json_type": "Ticker",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["A ticker matching the request filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiTickerFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "Ticker",
          "json_type": "Ticker",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The mini ticker matching the request asset"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSPublicTradesFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 500; Max 1000"]
        }
      ],
      "comment": ["Subscribes to a stream of Public Trades for an instrument."]
    },
    {
      "name": "WSPublicTradesFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.trade'",
          "comment": ["Stream name"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "PublicTrade",
          "json_type": "PublicTrade",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["A public trade matching the request filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSCandlestickFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "interval",
          "lite_name": "i1",
          "semantic_type": "CandlestickInterval",
          "json_type": "CandlestickInterval",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": ["The interval of each candlestick"]
        },
        {
          "name": "type",
          "lite_name": "t",
          "semantic_type": "CandlestickType",
          "json_type": "CandlestickType",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["The type of candlestick data to retrieve"]
        }
      ],
      "comment": [
        "Subscribes to a stream of Kline/Candlestick updates for an instrument. A Kline is uniquely identified by its open time.",
        "A new Kline is published every interval (if it exists). Upon subscription, the server will send the 5 most recent Kline for the requested interval."
      ]
    },
    {
      "name": "WSCandlestickFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.candle'",
          "comment": ["Stream name"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Candlestick",
          "json_type": "Candlestick",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["A candlestick entry matching the request filters"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSResponseV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.ticker.d'",
          "comment": ["The channel to subscribe to (eg: ticker.s / ticker.d "]
        },
        {
          "name": "subs",
          "lite_name": "s1",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp@500', 'ETH_USDT_Perp@500']",
          "comment": ["The list of feeds subscribed to"]
        },
        {
          "name": "unsubs",
          "lite_name": "u",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC_USDT_Perp@500', 'ETH_USDT_Perp@500']",
          "comment": ["The list of feeds unsubscribed to"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetAllInstrumentsRequest",
      "is_root": true,
      "fields": [
        {
          "name": "is_active",
          "lite_name": "ia",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 0,
          "array_depth": 0,
          "optional": true,
          "example": "true",
          "comment": ["Fetch only active instruments"]
        }
      ],
      "comment": ["Fetch all instruments"]
    },
    {
      "name": "ApiGetAllInstrumentsResponse",
      "is_root": true,
      "fields": [
        {
          "name": "instruments",
          "lite_name": "i",
          "semantic_type": "Instrument",
          "json_type": "Instrument",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["List of instruments"]
        }
      ],
      "comment": []
    },
    {
      "name": "OrderLeg",
      "is_root": false,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": ["The instrument to trade in this leg"]
        },
        {
          "name": "size",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'10.5'",
          "comment": [
            "The total number of assets to trade in this leg, expressed in underlying asset decimal units."
          ]
        },
        {
          "name": "limit_price",
          "lite_name": "lp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'65038.01'",
          "comment": [
            "The limit price of the order leg, expressed in `9` decimals.",
            "This is the total amount of base currency to pay/receive for all legs."
          ]
        },
        {
          "name": "oco_limit_price",
          "lite_name": "ol",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'63038.01'",
          "comment": [
            "If a OCO order is specified, this must contain the other limit price",
            "User must sign both limit prices. Depending on which trigger condition is activated, a different limit price is used",
            "The smart contract will always validate both limit prices, by arranging them in ascending order"
          ]
        },
        {
          "name": "is_buying_asset",
          "lite_name": "ib",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "true",
          "comment": ["Specifies if the order leg is a buy or sell"]
        }
      ],
      "comment": []
    },
    {
      "name": "Signature",
      "is_root": false,
      "fields": [
        {
          "name": "signer",
          "lite_name": "s",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": [
            "The address (public key) of the wallet signing the payload"
          ]
        },
        {
          "name": "r",
          "lite_name": "r",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xb788d96fee91c7cdc35918e0441b756d4000ec1d07d900c73347d9abbc20acc8'",
          "comment": ["Signature R"]
        },
        {
          "name": "s",
          "lite_name": "s1",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'0x3d786193125f7c29c958647da64d0e2875ece2c3f845a591bdd7dae8c475e26d'",
          "comment": ["Signature S"]
        },
        {
          "name": "v",
          "lite_name": "v",
          "semantic_type": "uint8",
          "json_type": "number",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'28'",
          "comment": ["Signature V"]
        },
        {
          "name": "expiration",
          "lite_name": "e",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Timestamp after which this signature expires, expressed in unix nanoseconds. Must be capped at 30 days"
          ]
        },
        {
          "name": "nonce",
          "lite_name": "n",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'1234567890'",
          "comment": [
            "Users can randomly generate this value, used as a signature deconflicting key.",
            "ie. You can send the same exact instruction twice with different nonces.",
            "When the same nonce is used, the same payload will generate the same signature.",
            "Our system will consider the payload a duplicate, and ignore it."
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "OrderMetadata",
      "is_root": false,
      "fields": [
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'23042'",
          "comment": [
            "A unique identifier for the active order within a subaccount, specified by the client",
            "This is used to identify the order in the client's system",
            "This field can be used for order amendment/cancellation, but has no bearing on the smart contract layer",
            "This field will not be propagated to the smart contract, and should not be signed by the client",
            "This value must be unique for all active orders in a subaccount, or amendment/cancellation will not work as expected",
            "Gravity UI will generate a random clientOrderID for each order in the range [0, 2^63 - 1]",
            "To prevent any conflicts, client machines should generate a random clientOrderID in the range [2^63, 2^64 - 1]",
            "",
            "When GRVT Backend receives an order with an overlapping clientOrderID, we will reject the order with rejectReason set to overlappingClientOrderId"
          ]
        },
        {
          "name": "create_time",
          "lite_name": "ct",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "[Filled by GRVT Backend] Time at which the order was received by GRVT in unix nanoseconds"
          ]
        }
      ],
      "comment": [
        "Metadata fields are used to support Backend only operations. These operations are not trustless by nature.",
        "Hence, fields in here are never signed, and is never transmitted to the smart contract."
      ]
    },
    {
      "name": "OrderState",
      "is_root": false,
      "fields": [
        {
          "name": "status",
          "lite_name": "s",
          "semantic_type": "OrderStatus",
          "json_type": "OrderStatus",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The status of the order"]
        },
        {
          "name": "reject_reason",
          "lite_name": "rr",
          "semantic_type": "OrderRejectReason",
          "json_type": "OrderRejectReason",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'CLIENT_CANCEL'",
          "comment": ["The reason for rejection or cancellation"]
        },
        {
          "name": "book_size",
          "lite_name": "bs",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['3.0', '6.0']",
          "comment": [
            "The number of assets available for orderbook/RFQ matching. Sorted in same order as Order.Legs"
          ]
        },
        {
          "name": "traded_size",
          "lite_name": "ts",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "example": "['3.0', '6.0']",
          "comment": [
            "The total number of assets traded. Sorted in same order as Order.Legs"
          ]
        },
        {
          "name": "update_time",
          "lite_name": "ut",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Time at which the order was updated by GRVT, expressed in unix nanoseconds"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "Order",
      "is_root": false,
      "fields": [
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": [
            "[Filled by GRVT Backend] A unique 128-bit identifier for the order, deterministically generated within the GRVT backend"
          ]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount initiating the order"]
        },
        {
          "name": "is_market",
          "lite_name": "im",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "false",
          "comment": [
            "If the order is a market order",
            "Market Orders do not have a limit price, and are always executed according to the maker order price.",
            "Market Orders must always be taker orders"
          ]
        },
        {
          "name": "time_in_force",
          "lite_name": "ti",
          "semantic_type": "TimeInForce",
          "json_type": "TimeInForce",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Four supported types of orders: GTT, IOC, AON, FOK:\u003cul\u003e",
            "\u003cli\u003ePARTIAL EXECUTION = GTT / IOC - allows partial size execution on each leg\u003c/li\u003e",
            "\u003cli\u003eFULL EXECUTION = AON / FOK - only allows full size execution on all legs\u003c/li\u003e",
            "\u003cli\u003eTAKER ONLY = IOC / FOK - only allows taker orders\u003c/li\u003e",
            "\u003cli\u003eMAKER OR TAKER = GTT / AON - allows maker or taker orders\u003c/li\u003e",
            "\u003c/ul\u003eExchange only supports (GTT, IOC, FOK)",
            "RFQ Maker only supports (GTT, AON), RFQ Taker only supports (FOK)"
          ]
        },
        {
          "name": "taker_fee_percentage_cap",
          "lite_name": "tf",
          "semantic_type": "int32",
          "json_type": "number",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'0.05'",
          "comment": [
            "The taker fee percentage cap signed by the order.",
            "This is the maximum taker fee percentage the order sender is willing to pay for the order.",
            "Expressed in 1/100th of a basis point. Eg. 100 = 1bps, 10,000 = 1%",
            ""
          ]
        },
        {
          "name": "maker_fee_percentage_cap",
          "lite_name": "mf",
          "semantic_type": "int32",
          "json_type": "number",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'0.03'",
          "comment": [
            "Same as TakerFeePercentageCap, but for the maker fee. Negative for maker rebates"
          ]
        },
        {
          "name": "post_only",
          "lite_name": "po",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "false",
          "comment": [
            "If True, Order must be a maker order. It has to fill the orderbook instead of match it.",
            "If False, Order can be either a maker or taker order.",
            "",
            "|               | Must Fill All | Can Fill Partial |",
            "| -             | -             | -                |",
            "| Must Be Taker | FOK + False   | IOC + False      |",
            "| Can Be Either | AON + False   | GTC + False      |",
            "| Must Be Maker | AON + True    | GTC + True       |",
            ""
          ]
        },
        {
          "name": "reduce_only",
          "lite_name": "ro",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "false",
          "comment": [
            "If True, Order must reduce the position size, or be cancelled"
          ]
        },
        {
          "name": "legs",
          "lite_name": "l",
          "semantic_type": "OrderLeg",
          "json_type": "OrderLeg",
          "index": 8,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The legs present in this order",
            "The legs must be sorted by Asset.Instrument/Underlying/Quote/Expiration/StrikePrice"
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "comment": ["The signature approving this order"]
        },
        {
          "name": "metadata",
          "lite_name": "m",
          "semantic_type": "OrderMetadata",
          "json_type": "OrderMetadata",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "Order Metadata, ignored by the smart contract, and unsigned by the client"
          ]
        },
        {
          "name": "state",
          "lite_name": "s1",
          "semantic_type": "OrderState",
          "json_type": "OrderState",
          "index": 11,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "[Filled by GRVT Backend] The current state of the order, ignored by the smart contract, and unsigned by the client"
          ]
        }
      ],
      "comment": [
        "Order is a typed payload used throughout the GRVT platform to express all orderbook, RFQ, and liquidation orders.",
        "GRVT orders are capable of expressing both single-legged, and multi-legged orders by default.",
        "This increases the learning curve slightly but reduces overall integration load, since the order payload is used across all GRVT trading venues.",
        "Given GRVT's trustless settlement model, the Order payload also carries the signature, required to trade the order on our ZKSync Hyperchain.",
        "",
        "All fields in the Order payload (except `id`, `metadata`, and `state`) are trustlessly enforced on our Hyperchain.",
        "This minimizes the amount of trust users have to offer to GRVT"
      ]
    },
    {
      "name": "ApiCreateOrderRequest",
      "is_root": true,
      "fields": [
        {
          "name": "order",
          "lite_name": "o",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The order to create"]
        }
      ],
      "comment": ["Create an order on the orderbook for this trading account."]
    },
    {
      "name": "ApiCreateOrderResponse",
      "is_root": true,
      "fields": [
        {
          "name": "order",
          "lite_name": "o",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The created order"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiCancelOrderRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount ID cancelling the order"]
        },
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0x1028403'",
          "comment": ["Cancel the order with this `order_id`"]
        },
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'23042'",
          "comment": ["Cancel the order with this `client_order_id`"]
        }
      ],
      "comment": ["Cancel an order on the orderbook for this trading account."]
    },
    {
      "name": "ApiCancelOrderResponse",
      "is_root": true,
      "fields": [
        {
          "name": "order",
          "lite_name": "o",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The cancelled order"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiCancelAllOrdersRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount ID cancelling all orders"]
        }
      ],
      "comment": [
        "Cancel all orders on the orderbook for this trading account. This may not match new orders in flight."
      ]
    },
    {
      "name": "ApiCancelAllOrdersResponse",
      "is_root": true,
      "fields": [
        {
          "name": "num_cancelled",
          "lite_name": "nc",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["The number of orders cancelled"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiOpenOrdersRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount ID to filter by"]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC', 'ETH']",
          "comment": [
            "The underlying filter to apply. If nil, this defaults to all underlyings. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be returned"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiOpenOrdersResponse",
      "is_root": true,
      "fields": [
        {
          "name": "orders",
          "lite_name": "o",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The Open Orders matching the request filter"]
        }
      ],
      "comment": [
        "Retrieves all open orders for the account. This may not match new orders in flight."
      ]
    },
    {
      "name": "ApiOrderHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount ID to filter by"]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['PERPETUAL']",
          "comment": [
            "The kind filter to apply. If nil, this defaults to all kinds. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['BTC', 'ETH']",
          "comment": [
            "The underlying filter to apply. If nil, this defaults to all underlyings. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The quote filter to apply. If nil, this defaults to all quotes. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "expiration",
          "lite_name": "e",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 4,
          "array_depth": 1,
          "optional": false,
          "example": "['1697788800000000000']",
          "comment": [
            "The expiration time to apply in nanoseconds. If nil, this defaults to all expirations. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "strike_price",
          "lite_name": "sp",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 1,
          "optional": false,
          "example": "['65000.0']",
          "comment": [
            "The strike price to apply. If nil, this defaults to all strike prices. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 500; Max 1000"]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": ["The cursor to indicate when to start the query from"]
        }
      ],
      "comment": ["Retrieves the order history for the account."]
    },
    {
      "name": "ApiOrderHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "total",
          "lite_name": "t",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The total number of orders matching the request filter"]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": ["The cursor to indicate when to start the query from"]
        },
        {
          "name": "orders",
          "lite_name": "o",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": ["The Open Orders matching the request filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "EmptyRequest",
      "is_root": true,
      "fields": [],
      "comment": ["Used for requests that do not require any parameters"]
    },
    {
      "name": "AckResponse",
      "is_root": true,
      "fields": [
        {
          "name": "acknowledgement",
          "lite_name": "a",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'true'",
          "comment": [
            "Gravity has acknowledged that the request has been successfully received and it will process it in the backend"
          ]
        }
      ],
      "comment": [
        "Used to acknowledge a request has been received and will be processed"
      ]
    },
    {
      "name": "ApiOrderStateRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount ID to filter by"]
        },
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0x1028403'",
          "comment": ["Filter for `order_id`"]
        },
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'23042'",
          "comment": ["Filter for `client_order_id`"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiOrderStateResponse",
      "is_root": true,
      "fields": [
        {
          "name": "state",
          "lite_name": "s",
          "semantic_type": "OrderState",
          "json_type": "OrderState",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The order state for the requested filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetOrderRequest",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount ID to filter by"]
        },
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0x1028403'",
          "comment": ["Filter for `order_id`"]
        },
        {
          "name": "client_order_id",
          "lite_name": "co",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'23042'",
          "comment": ["Filter for `client_order_id`"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetOrderResponse",
      "is_root": true,
      "fields": [
        {
          "name": "order",
          "lite_name": "o",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The order object for the requested filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetUserEcosystemPointRequest",
      "is_root": true,
      "fields": [
        {
          "name": "account_id",
          "lite_name": "ai",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'ACC_1234567890'",
          "comment": ["The off chain account id"]
        },
        {
          "name": "calculate_from",
          "lite_name": "cf",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Start time of the epoch - phase"]
        },
        {
          "name": "include_user_rank",
          "lite_name": "iu",
          "semantic_type": "bool",
          "json_type": "boolean",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'true'",
          "comment": ["Include user rank in the response"]
        }
      ],
      "comment": []
    },
    {
      "name": "EcosystemPoint",
      "is_root": false,
      "fields": [
        {
          "name": "account_id",
          "lite_name": "ai",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'ACC_1234567890'",
          "comment": ["The off chain account id"]
        },
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["The main account id"]
        },
        {
          "name": "total_point",
          "lite_name": "tp",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total ecosystem point"]
        },
        {
          "name": "direct_invite_count",
          "lite_name": "di",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["Direct invite count"]
        },
        {
          "name": "indirect_invite_count",
          "lite_name": "ii",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["Indirect invite count"]
        },
        {
          "name": "direct_invite_trading_volume",
          "lite_name": "di1",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Direct invite trading volume"]
        },
        {
          "name": "indirect_invite_trading_volume",
          "lite_name": "ii1",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Indirect invite trading volume"]
        },
        {
          "name": "calculate_at",
          "lite_name": "ca",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The time when the ecosystem point is calculated"]
        },
        {
          "name": "calculate_from",
          "lite_name": "cf",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Start time of the epoch - phase"]
        },
        {
          "name": "calculate_to",
          "lite_name": "ct",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 9,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["End time of the epoch - phase"]
        },
        {
          "name": "rank",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 10,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["The rank of the account in the ecosystem"]
        }
      ],
      "comment": [""]
    },
    {
      "name": "ApiGetUserEcosystemPointResponse",
      "is_root": true,
      "fields": [
        {
          "name": "points",
          "lite_name": "p",
          "semantic_type": "EcosystemPoint",
          "json_type": "EcosystemPoint",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The list of ecosystem points"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetEcosystemLeaderboardRequest",
      "is_root": true,
      "fields": [
        {
          "name": "calculate_from",
          "lite_name": "cf",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Start time of the epoch - phase"]
        },
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The number of accounts to return"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetEcosystemLeaderboardResponse",
      "is_root": true,
      "fields": [
        {
          "name": "points",
          "lite_name": "p",
          "semantic_type": "EcosystemPoint",
          "json_type": "EcosystemPoint",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The list of ecosystem points"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetEcosystemReferralStatResponse",
      "is_root": true,
      "fields": [
        {
          "name": "direct_invite_count",
          "lite_name": "di",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["Direct invite count"]
        },
        {
          "name": "indirect_invite_count",
          "lite_name": "ii",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["Indirect invite count"]
        },
        {
          "name": "direct_invite_trading_volume",
          "lite_name": "di1",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total volume traded by direct invites multiple by 1e9"]
        },
        {
          "name": "indirect_invite_trading_volume",
          "lite_name": "ii1",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total volume traded by indirect invites multiple by 1e9"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiResolveEpochEcosystemMetricResponse",
      "is_root": true,
      "fields": [
        {
          "name": "epoch_name",
          "lite_name": "en",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'Phase 1'",
          "comment": ["The name of the epoch"]
        },
        {
          "name": "point",
          "lite_name": "p",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": [
            "Ecosystem points up to the most recently calculated time within this epoch"
          ]
        },
        {
          "name": "last_calculated_time",
          "lite_name": "lc",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "The time in unix nanoseconds when the ecosystem points were last calculated"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "EcosystemMetric",
      "is_root": true,
      "fields": [
        {
          "name": "direct_invite_count",
          "lite_name": "di",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["Direct invite count"]
        },
        {
          "name": "indirect_invite_count",
          "lite_name": "ii",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["Indirect invite count"]
        },
        {
          "name": "direct_invite_trading_volume",
          "lite_name": "di1",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Direct invite trading volume"]
        },
        {
          "name": "indirect_invite_trading_volume",
          "lite_name": "ii1",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Indirect invite trading volume"]
        },
        {
          "name": "total_point",
          "lite_name": "tp",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total ecosystem point of this epoch/phase"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFindFirstEpochMetricResponse",
      "is_root": true,
      "fields": [
        {
          "name": "phase_zero_metric",
          "lite_name": "pz",
          "semantic_type": "EcosystemMetric",
          "json_type": "EcosystemMetric",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["Phase zero metric"]
        },
        {
          "name": "phase_one_metric",
          "lite_name": "po",
          "semantic_type": "EcosystemMetric",
          "json_type": "EcosystemMetric",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": ["Phase one metric"]
        },
        {
          "name": "rank",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["The rank of the account in the ecosystem"]
        },
        {
          "name": "total",
          "lite_name": "t",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "52",
          "comment": ["The total number of accounts in the ecosystem"]
        },
        {
          "name": "total_point",
          "lite_name": "tp",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total ecosystem point of the first epoch"]
        },
        {
          "name": "last_calculated_at",
          "lite_name": "lc",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The time when the ecosystem points were last calculated"]
        }
      ],
      "comment": []
    },
    {
      "name": "EcosystemLeaderboardUser",
      "is_root": true,
      "fields": [
        {
          "name": "account_id",
          "lite_name": "ai",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'ACC_1234567890'",
          "comment": ["The off chain account id"]
        },
        {
          "name": "rank",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["The rank of the account in the ecosystem"]
        },
        {
          "name": "total_point",
          "lite_name": "tp",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total ecosystem point"]
        },
        {
          "name": "twitter_username",
          "lite_name": "tu",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'elonmusk'",
          "comment": ["The twitter username of the account"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFindEcosystemLeaderboardResponse",
      "is_root": true,
      "fields": [
        {
          "name": "users",
          "lite_name": "u",
          "semantic_type": "EcosystemLeaderboardUser",
          "json_type": "EcosystemLeaderboardUser",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The list of ecosystem leaderboard users"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetListFlatReferralRequest",
      "is_root": true,
      "fields": [
        {
          "name": "referral_id",
          "lite_name": "ri",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'ACC_1234567890'",
          "comment": [
            "The off chain referrer account id to get all flat referrals"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Optional. Start time in unix nanoseconds"]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Optional. End time in unix nanoseconds"]
        },
        {
          "name": "account_id",
          "lite_name": "ai",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'ACC_1234567890'",
          "comment": ["The off chain account id to get all user's referrers"]
        }
      ],
      "comment": [
        "startTime and endTime are optional parameters. The semantics of these parameters are as follows:\u003cul\u003e"
      ]
    },
    {
      "name": "FlatReferral",
      "is_root": false,
      "fields": [
        {
          "name": "account_id",
          "lite_name": "ai",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'ACC_1234567890'",
          "comment": ["The off chain account id"]
        },
        {
          "name": "referrer_id",
          "lite_name": "ri",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'ACC_1234567890'",
          "comment": ["The off chain referrer account id"]
        },
        {
          "name": "referrer_level",
          "lite_name": "rl",
          "semantic_type": "uint8",
          "json_type": "number",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1'",
          "comment": [
            "The referrer level; 1: direct referrer, 2: indirect referrer"
          ]
        },
        {
          "name": "account_create_time",
          "lite_name": "ac",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The account creation time"]
        },
        {
          "name": "main_account_id",
          "lite_name": "ma",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["The main account id"]
        },
        {
          "name": "referrer_main_account_id",
          "lite_name": "rm",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["The referrer main account id"]
        }
      ],
      "comment": [""]
    },
    {
      "name": "ApiGetListFlatReferralResponse",
      "is_root": true,
      "fields": [
        {
          "name": "flat_referrals",
          "lite_name": "fr",
          "semantic_type": "FlatReferral",
          "json_type": "FlatReferral",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The list of flat referrals"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiSubAccountTradeRequest",
      "is_root": true,
      "fields": [
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": [
            "The readable name of the instrument. For Perpetual: ETH_USDT_Perp [Underlying Quote Perp]",
            "For Future: BTC_USDT_Fut_20Oct23 [Underlying Quote Fut DateFormat]",
            "For Call: ETH_USDT_Call_20Oct23_4123 [Underlying Quote Call DateFormat StrikePrice]",
            "For Put: ETH_USDT_Put_20Oct23_4123 [Underlying Quote Put DateFormat StrikePrice]"
          ]
        },
        {
          "name": "interval",
          "lite_name": "i1",
          "semantic_type": "SubAccountTradeInterval",
          "json_type": "SubAccountTradeInterval",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": ["The interval of each sub account trade"]
        },
        {
          "name": "sub_account_i_ds",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['2376', '5821']",
          "comment": ["The list of sub account ids to query"]
        },
        {
          "name": "start_interval",
          "lite_name": "si",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Optional. The starting time in unix nanoseconds of a specific interval to query"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Optional. Start time in unix nanoseconds"]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Optional. End time in unix nanoseconds"]
        }
      ],
      "comment": [
        "startTime are optional parameters. The semantics of these parameters are as follows:\u003cul\u003e"
      ]
    },
    {
      "name": "SubAccountTrade",
      "is_root": false,
      "fields": [
        {
          "name": "start_interval",
          "lite_name": "si",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Start of calculation epoch"]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The sub account id"]
        },
        {
          "name": "instrument",
          "lite_name": "i",
          "semantic_type": "asset",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC_USDT_Perp'",
          "comment": ["The instrument being represented"]
        },
        {
          "name": "total_fee",
          "lite_name": "tf",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total fee paid"]
        },
        {
          "name": "total_trade_volume",
          "lite_name": "tt",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total volume traded"]
        }
      ],
      "comment": [""]
    },
    {
      "name": "ApiSubAccountTradeResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "SubAccountTrade",
          "json_type": "SubAccountTrade",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The sub account trade result set for given interval"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiSubAccountTradeAggregationRequest",
      "is_root": true,
      "fields": [
        {
          "name": "interval",
          "lite_name": "i",
          "semantic_type": "SubAccountTradeInterval",
          "json_type": "SubAccountTradeInterval",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["The interval of each sub account trade"]
        },
        {
          "name": "sub_account_i_ds",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 1,
          "optional": false,
          "example": "['2376', '5821']",
          "comment": ["The list of sub account ids to query"]
        },
        {
          "name": "start_interval",
          "lite_name": "si",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": [
            "Optional. The starting time in unix nanoseconds of a specific interval to query"
          ]
        }
      ],
      "comment": [
        "startTime are optional parameters. The semantics of these parameters are as follows:\u003cul\u003e"
      ]
    },
    {
      "name": "SubAccountTradeAggregation",
      "is_root": false,
      "fields": [
        {
          "name": "start_interval",
          "lite_name": "si",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["Start of calculation epoch"]
        },
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The sub account id"]
        },
        {
          "name": "total_fee",
          "lite_name": "tf",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total fee paid"]
        },
        {
          "name": "total_trade_volume",
          "lite_name": "tt",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total volume traded"]
        }
      ],
      "comment": [
        "Similar to sub-account trade, but not divided by individual assets."
      ]
    },
    {
      "name": "ApiSubAccountTradeAggregationResponse",
      "is_root": true,
      "fields": [
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "SubAccountTradeAggregation",
          "json_type": "SubAccountTradeAggregation",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": [
            "The sub account trade aggregation result set for given interval"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiGetTraderStatResponse",
      "is_root": true,
      "fields": [
        {
          "name": "total_fee",
          "lite_name": "tf",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total fee paid"]
        }
      ],
      "comment": []
    },
    {
      "name": "TraderMetric",
      "is_root": true,
      "fields": [
        {
          "name": "total_fee",
          "lite_name": "tf",
          "semantic_type": "int64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total fee paid"]
        },
        {
          "name": "total_point",
          "lite_name": "tp",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total trader point of this epoch/phase"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFindTraderEpochMetricResponse",
      "is_root": true,
      "fields": [
        {
          "name": "metric",
          "lite_name": "m",
          "semantic_type": "TraderMetric",
          "json_type": "TraderMetric",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "comment": ["Phase zero metric"]
        },
        {
          "name": "rank",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["The rank of the account in the trader"]
        },
        {
          "name": "total",
          "lite_name": "t",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "52",
          "comment": ["The total number of accounts in the trader"]
        },
        {
          "name": "last_calculated_at",
          "lite_name": "lc",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The time when the trader points were last calculated"]
        }
      ],
      "comment": []
    },
    {
      "name": "TraderLeaderboardUser",
      "is_root": true,
      "fields": [
        {
          "name": "account_id",
          "lite_name": "ai",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'ACC_1234567890'",
          "comment": ["The off chain account id"]
        },
        {
          "name": "rank",
          "lite_name": "r",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'52'",
          "comment": ["The rank of the account in the Trader"]
        },
        {
          "name": "total_point",
          "lite_name": "tp",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": ["Total Trader point"]
        },
        {
          "name": "twitter_username",
          "lite_name": "tu",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'elonmusk'",
          "comment": ["The twitter username of the account"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiFindTraderLeaderboardResponse",
      "is_root": true,
      "fields": [
        {
          "name": "users",
          "lite_name": "u",
          "semantic_type": "TraderLeaderboardUser",
          "json_type": "TraderLeaderboardUser",
          "index": 0,
          "array_depth": 1,
          "optional": false,
          "comment": ["The list of trader leaderboard users"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSOrderFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount ID to filter by"]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'PERPETUAL'",
          "comment": ["The kind filter to apply."]
        },
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC'",
          "comment": ["The underlying filter to apply."]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The quote filter to apply."]
        },
        {
          "name": "state_filter",
          "lite_name": "sf",
          "semantic_type": "OrderStateFilter",
          "json_type": "OrderStateFilter",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": ["create only, update only, all"]
        }
      ],
      "comment": [
        "Subscribes to a feed of order updates pertaining to orders made by your account.",
        "Each Order can be uniquely identified by its `order_id` or `client_order_id` (if client designs well).",
        "Use `stateFilter = c` to only receive create events, `stateFilter = u` to only receive update events, and `stateFilter = a` to receive both."
      ]
    },
    {
      "name": "WSOrderFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.order'",
          "comment": ["Stream name"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Order",
          "json_type": "Order",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["The order object being created or updated"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSOrderStateFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount ID to filter by"]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'PERPETUAL'",
          "comment": ["The kind filter to apply."]
        },
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC'",
          "comment": ["The underlying filter to apply."]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The quote filter to apply."]
        },
        {
          "name": "state_filter",
          "lite_name": "sf",
          "semantic_type": "OrderStateFilter",
          "json_type": "OrderStateFilter",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": ["create only, update only, all"]
        }
      ],
      "comment": [
        "Subscribes to a feed of order updates pertaining to orders made by your account.",
        "Unlike the Order Stream, this only streams state updates, drastically improving throughput, and latency.",
        "Each Order can be uniquely identified by its `order_id` or `client_order_id` (if client designs well).",
        "Use `stateFilter = c` to only receive create events, `stateFilter = u` to only receive update events, and `stateFilter = a` to receive both."
      ]
    },
    {
      "name": "OrderStateFeed",
      "is_root": false,
      "fields": [
        {
          "name": "order_id",
          "lite_name": "oi",
          "semantic_type": "uint128",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'10000101000203040506'",
          "comment": [
            "A unique 128-bit identifier for the order, deterministically generated within the GRVT backend"
          ]
        },
        {
          "name": "order_state",
          "lite_name": "os",
          "semantic_type": "OrderState",
          "json_type": "OrderState",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "comment": ["The order state object being created or updated"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSOrderStateFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.state'",
          "comment": ["Stream name"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "OrderStateFeed",
          "json_type": "OrderStateFeed",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["The Order State Feed"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSPositionsFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The subaccount ID to filter by"]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'PERPETUAL'",
          "comment": ["The kind filter to apply."]
        },
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC'",
          "comment": ["The underlying filter to apply."]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The quote filter to apply."]
        }
      ],
      "comment": [
        "Subscribes to a feed of position updates. This happens when a trade is executed."
      ]
    },
    {
      "name": "WSPositionsFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.position'",
          "comment": ["Stream name"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Positions",
          "json_type": "Positions",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": [
            "A Position being created or updated matching the request filter"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "WSPrivateTradeFeedSelectorV1",
      "is_root": true,
      "fields": [
        {
          "name": "sub_account_id",
          "lite_name": "sa",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": ["The sub account ID to request for"]
        },
        {
          "name": "kind",
          "lite_name": "k",
          "semantic_type": "Kind",
          "json_type": "Kind",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'PERPETUAL'",
          "comment": ["The kind filter to apply."]
        },
        {
          "name": "underlying",
          "lite_name": "u",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'BTC'",
          "comment": ["The underlying filter to apply."]
        },
        {
          "name": "quote",
          "lite_name": "q",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The quote filter to apply."]
        }
      ],
      "comment": []
    },
    {
      "name": "WSPrivateTradeFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.trade'",
          "comment": ["The websocket channel to which the response is sent"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "PrivateTrade",
          "json_type": "PrivateTrade",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["A private trade matching the request filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "Transfer",
      "is_root": false,
      "fields": [
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The account to transfer from"]
        },
        {
          "name": "from_sub_account_id",
          "lite_name": "fs",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": [
            "The subaccount to transfer from (0 if transferring from main account)"
          ]
        },
        {
          "name": "to_account_id",
          "lite_name": "ta",
          "semantic_type": "address",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The account to deposit into"]
        },
        {
          "name": "to_sub_account_id",
          "lite_name": "ts",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": [
            "The subaccount to transfer to (0 if transferring to main account)"
          ]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The token currency to transfer"]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'10.50'",
          "comment": ["The number of tokens to transfer"]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "comment": ["The signature of the transfer"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSTransferFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.transfer'",
          "comment": ["The websocket channel to which the response is sent"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Transfer",
          "json_type": "Transfer",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["The Transfer object"]
        }
      ],
      "comment": ["Subscribes to a feed of transfer updates."]
    },
    {
      "name": "Deposit",
      "is_root": false,
      "fields": [
        {
          "name": "tx_hash",
          "lite_name": "th",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0x1234567890123456789012345678901234567890123456789012345678901234'",
          "comment": ["The hash of the bridgemint event producing the deposit"]
        },
        {
          "name": "to_account_id",
          "lite_name": "ta",
          "semantic_type": "address",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The account to deposit into"]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The token currency to deposit"]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'10.50'",
          "comment": ["The number of tokens to deposit"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSDepositFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.deposit'",
          "comment": ["The websocket channel to which the response is sent"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Deposit",
          "json_type": "Deposit",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["The Deposit object"]
        }
      ],
      "comment": ["Subscribes to a feed of deposit updates."]
    },
    {
      "name": "Withdrawal",
      "is_root": false,
      "fields": [
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The subaccount to withdraw from"]
        },
        {
          "name": "to_eth_address",
          "lite_name": "te",
          "semantic_type": "address",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The ethereum address to withdraw to"]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The token currency to withdraw"]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'10.50'",
          "comment": ["The number of tokens to withdraw"]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": ["The signature of the withdrawal"]
        }
      ],
      "comment": []
    },
    {
      "name": "WSWithdrawalFeedDataV1",
      "is_root": true,
      "fields": [
        {
          "name": "stream",
          "lite_name": "s",
          "semantic_type": "string",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'v1.withdrawal'",
          "comment": ["The websocket channel to which the response is sent"]
        },
        {
          "name": "sequence_number",
          "lite_name": "sn",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'872634876'",
          "comment": [
            "A running sequence number that determines global message order within the specific stream"
          ]
        },
        {
          "name": "feed",
          "lite_name": "f",
          "semantic_type": "Withdrawal",
          "json_type": "Withdrawal",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "comment": ["The Withdrawal object"]
        }
      ],
      "comment": ["Subscribes to a feed of withdrawal updates."]
    },
    {
      "name": "ApiDepositRequest",
      "is_root": true,
      "fields": [
        {
          "name": "to_account_id",
          "lite_name": "ta",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The main account to deposit into"]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The token currency to deposit"]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": [
            "The number of tokens to deposit, quoted in token_currency decimals"
          ]
        }
      ],
      "comment": [
        "GRVT runs on a ZKSync Hyperchain which settles directly onto Ethereum.",
        "To Deposit funds from your L1 wallet into a GRVT SubAccount, you will be required to submit a deposit transaction directly to Ethereum.",
        "GRVT's bridge verifier will scan Ethereum from time to time. Once it receives proof that your deposit has been confirmed on Ethereum, it will initiate the deposit process.",
        "",
        "This current payload is used for alpha testing only."
      ]
    },
    {
      "name": "ApiWithdrawalRequest",
      "is_root": true,
      "fields": [
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The main account to withdraw from"]
        },
        {
          "name": "to_eth_address",
          "lite_name": "te",
          "semantic_type": "address",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The Ethereum wallet to withdraw into"]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The token currency to withdraw"]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": [
            "The number of tokens to withdraw, quoted in tokenCurrency decimal units"
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "comment": ["The signature of the withdrawal"]
        }
      ],
      "comment": [
        "Leverage this API to initialize a withdrawal from GRVT's Hyperchain onto Ethereum.",
        "Do take note that the bridging process does take time. The GRVT UI will help you keep track of bridging progress, and notify you once its complete.",
        "",
        "If not withdrawing the entirety of your balance, there is a minimum withdrawal amount. Currently that amount is ~25 USDT.",
        "Withdrawal fees also apply to cover the cost of the Ethereum transaction.",
        "Note that your funds will always remain in self-custory throughout the withdrawal process. At no stage does GRVT gain control over your funds."
      ]
    },
    {
      "name": "ApiTransferRequest",
      "is_root": true,
      "fields": [
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The main account to transfer from"]
        },
        {
          "name": "from_sub_account_id",
          "lite_name": "fs",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": [
            "The subaccount to transfer from (0 if transferring from main account)"
          ]
        },
        {
          "name": "to_account_id",
          "lite_name": "ta",
          "semantic_type": "address",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The main account to deposit into"]
        },
        {
          "name": "to_sub_account_id",
          "lite_name": "ts",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": [
            "The subaccount to transfer to (0 if transferring to main account)"
          ]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The token currency to transfer"]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": [
            "The number of tokens to transfer, quoted in tokenCurrency decimal units"
          ]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "comment": ["The signature of the transfer"]
        }
      ],
      "comment": [
        "This API allows you to transfer funds in multiple different ways\u003cul\u003e",
        "\u003cli\u003eBetween SubAccounts within your Main Account\u003c/li\u003e",
        "\u003cli\u003eBetween your MainAccount and your SubAccounts\u003c/li\u003e",
        "\u003cli\u003eTo other MainAccounts that you have previously allowlisted\u003c/li\u003e",
        "\u003c/ul\u003e"
      ]
    },
    {
      "name": "ApiDepositHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 500; Max 1000"]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The token currency to query for, if nil or empty, return all deposits. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The start time to query for in unix nanoseconds"]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The end time to query for in unix nanoseconds"]
        }
      ],
      "comment": [
        "The request to get the historical deposits of an account",
        "The history is returned in reverse chronological order"
      ]
    },
    {
      "name": "DepositHistory",
      "is_root": false,
      "fields": [
        {
          "name": "tx_id",
          "lite_name": "ti",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1028403'",
          "comment": ["The transaction ID of the deposit"]
        },
        {
          "name": "tx_hash",
          "lite_name": "th",
          "semantic_type": "uint256",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0x10000101000203040506'",
          "comment": ["The txHash of the bridgemint event"]
        },
        {
          "name": "to_account_id",
          "lite_name": "ta",
          "semantic_type": "address",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The account to deposit into"]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The token currency to deposit"]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": ["The number of tokens to deposit"]
        },
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The timestamp of the deposit in unix nanoseconds"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiDepositHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "total",
          "lite_name": "t",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "52",
          "comment": [
            "The total number of deposits matching the request account"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        },
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "DepositHistory",
          "json_type": "DepositHistory",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": ["The deposit history matching the request account"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiTransferHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 500; Max 1000"]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The token currency to query for, if nil or empty, return all transfers. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The start time to query for in unix nanoseconds"]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The end time to query for in unix nanoseconds"]
        }
      ],
      "comment": [
        "The request to get the historical transfers of an account",
        "The history is returned in reverse chronological order"
      ]
    },
    {
      "name": "TransferHistory",
      "is_root": true,
      "fields": [
        {
          "name": "tx_id",
          "lite_name": "ti",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1028403'",
          "comment": ["The transaction ID of the transfer"]
        },
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The account to transfer from"]
        },
        {
          "name": "from_sub_account_id",
          "lite_name": "fs",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": [
            "The subaccount to transfer from (0 if transferring from main account)"
          ]
        },
        {
          "name": "to_account_id",
          "lite_name": "ta",
          "semantic_type": "address",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The account to deposit into"]
        },
        {
          "name": "to_sub_account_id",
          "lite_name": "ts",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'2927361400114782'",
          "comment": [
            "The subaccount to transfer to (0 if transferring to main account)"
          ]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The token currency to transfer"]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": ["The number of tokens to transfer"]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 7,
          "array_depth": 0,
          "optional": false,
          "comment": ["The signature of the transfer"]
        },
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 8,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The timestamp of the transfer in unix nanoseconds"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiTransferHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "total",
          "lite_name": "t",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "52",
          "comment": [
            "The total number of transfers matching the request account"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        },
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "TransferHistory",
          "json_type": "TransferHistory",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": ["The transfer history matching the request account"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiWithdrawalHistoryRequest",
      "is_root": true,
      "fields": [
        {
          "name": "limit",
          "lite_name": "l",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "500",
          "comment": ["The limit to query for. Defaults to 500; Max 1000"]
        },
        {
          "name": "cursor",
          "lite_name": "c",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "example": "['USDT', 'USDC']",
          "comment": [
            "The token currency to query for, if nil or empty, return all withdrawals. Otherwise, only entries matching the filter will be returned"
          ]
        },
        {
          "name": "start_time",
          "lite_name": "st",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The start time to query for in unix nanoseconds"]
        },
        {
          "name": "end_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The end time to query for in unix nanoseconds"]
        }
      ],
      "comment": [
        "The request to get the historical withdrawals of an account",
        "The history is returned in reverse chronological order"
      ]
    },
    {
      "name": "WithdrawalHistory",
      "is_root": true,
      "fields": [
        {
          "name": "tx_id",
          "lite_name": "ti",
          "semantic_type": "uint64",
          "json_type": "string",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "'1028403'",
          "comment": ["The transaction ID of the withdrawal"]
        },
        {
          "name": "from_account_id",
          "lite_name": "fa",
          "semantic_type": "address",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The subaccount to withdraw from"]
        },
        {
          "name": "to_eth_address",
          "lite_name": "te",
          "semantic_type": "address",
          "json_type": "string",
          "index": 2,
          "array_depth": 0,
          "optional": false,
          "example": "'0xc73c0c2538fd9b833d20933ccc88fdaa74fcb0d0'",
          "comment": ["The ethereum address to withdraw to"]
        },
        {
          "name": "token_currency",
          "lite_name": "tc",
          "semantic_type": "Currency",
          "json_type": "Currency",
          "index": 3,
          "array_depth": 0,
          "optional": false,
          "example": "'USDT'",
          "comment": ["The token currency to withdraw"]
        },
        {
          "name": "num_tokens",
          "lite_name": "nt",
          "semantic_type": "string",
          "json_type": "string",
          "index": 4,
          "array_depth": 0,
          "optional": false,
          "example": "'1500.0'",
          "comment": ["The number of tokens to withdraw"]
        },
        {
          "name": "signature",
          "lite_name": "s",
          "semantic_type": "Signature",
          "json_type": "Signature",
          "index": 5,
          "array_depth": 0,
          "optional": false,
          "comment": ["The signature of the withdrawal"]
        },
        {
          "name": "event_time",
          "lite_name": "et",
          "semantic_type": "timestamp",
          "json_type": "string",
          "index": 6,
          "array_depth": 0,
          "optional": false,
          "example": "'1697788800000000000'",
          "comment": ["The timestamp of the withdrawal in unix nanoseconds"]
        }
      ],
      "comment": []
    },
    {
      "name": "ApiWithdrawalHistoryResponse",
      "is_root": true,
      "fields": [
        {
          "name": "total",
          "lite_name": "t",
          "semantic_type": "uint32",
          "json_type": "number",
          "index": 0,
          "array_depth": 0,
          "optional": false,
          "example": "52",
          "comment": [
            "The total number of withdrawals matching the request account"
          ]
        },
        {
          "name": "next",
          "lite_name": "n",
          "semantic_type": "string",
          "json_type": "string",
          "index": 1,
          "array_depth": 0,
          "optional": false,
          "example": "'Qw0918='",
          "comment": [
            "The cursor to indicate when to start the next query from"
          ]
        },
        {
          "name": "results",
          "lite_name": "r",
          "semantic_type": "WithdrawalHistory",
          "json_type": "WithdrawalHistory",
          "index": 2,
          "array_depth": 1,
          "optional": false,
          "comment": ["The withdrawals history matching the request account"]
        }
      ],
      "comment": []
    }
  ],
  "enums": [
    {
      "name": "CandlestickInterval",
      "values": [
        {
          "name": "CI_1_M",
          "value": 1,
          "comment": ["1 minute"]
        },
        {
          "name": "CI_3_M",
          "value": 2,
          "comment": ["3 minutes"]
        },
        {
          "name": "CI_5_M",
          "value": 3,
          "comment": ["5 minutes"]
        },
        {
          "name": "CI_15_M",
          "value": 4,
          "comment": ["15 minutes"]
        },
        {
          "name": "CI_30_M",
          "value": 5,
          "comment": ["30 minutes"]
        },
        {
          "name": "CI_1_H",
          "value": 6,
          "comment": ["1 hour"]
        },
        {
          "name": "CI_2_H",
          "value": 7,
          "comment": ["2 hour"]
        },
        {
          "name": "CI_4_H",
          "value": 8,
          "comment": ["4 hour"]
        },
        {
          "name": "CI_6_H",
          "value": 9,
          "comment": ["6 hour"]
        },
        {
          "name": "CI_8_H",
          "value": 10,
          "comment": ["8 hour"]
        },
        {
          "name": "CI_12_H",
          "value": 11,
          "comment": ["12 hour"]
        },
        {
          "name": "CI_1_D",
          "value": 12,
          "comment": ["1 day"]
        },
        {
          "name": "CI_3_D",
          "value": 13,
          "comment": ["3 days"]
        },
        {
          "name": "CI_5_D",
          "value": 14,
          "comment": ["5 days"]
        },
        {
          "name": "CI_1_W",
          "value": 15,
          "comment": ["1 week"]
        },
        {
          "name": "CI_2_W",
          "value": 16,
          "comment": ["2 weeks"]
        },
        {
          "name": "CI_3_W",
          "value": 17,
          "comment": ["3 weeks"]
        },
        {
          "name": "CI_4_W",
          "value": 18,
          "comment": ["4 weeks"]
        }
      ],
      "comment": []
    },
    {
      "name": "CandlestickType",
      "values": [
        {
          "name": "TRADE",
          "value": 1,
          "comment": ["Tracks traded prices"]
        },
        {
          "name": "MARK",
          "value": 2,
          "comment": ["Tracks mark prices"]
        },
        {
          "name": "INDEX",
          "value": 3,
          "comment": ["Tracks index prices"]
        },
        {
          "name": "MID",
          "value": 4,
          "comment": ["Tracks book mid prices"]
        }
      ],
      "comment": []
    },
    {
      "name": "Currency",
      "values": [
        {
          "name": "USDC",
          "value": 2,
          "comment": ["the USDC token"]
        },
        {
          "name": "USDT",
          "value": 3,
          "comment": ["the USDT token"]
        },
        {
          "name": "ETH",
          "value": 4,
          "comment": ["the ETH token"]
        },
        {
          "name": "BTC",
          "value": 5,
          "comment": ["the BTC token"]
        }
      ],
      "comment": [
        "The list of Currencies that are supported on the GRVT exchange"
      ]
    },
    {
      "name": "InstrumentSettlementPeriod",
      "values": [
        {
          "name": "PERPETUAL",
          "value": 1,
          "comment": [
            "Instrument settles through perpetual hourly funding cycles"
          ]
        },
        {
          "name": "DAILY",
          "value": 2,
          "comment": [
            "Instrument settles at an expiry date, marked as a daily instrument"
          ]
        },
        {
          "name": "WEEKLY",
          "value": 3,
          "comment": [
            "Instrument settles at an expiry date, marked as a weekly instrument"
          ]
        },
        {
          "name": "MONTHLY",
          "value": 4,
          "comment": [
            "Instrument settles at an expiry date, marked as a monthly instrument"
          ]
        },
        {
          "name": "QUARTERLY",
          "value": 5,
          "comment": [
            "Instrument settles at an expiry date, marked as a quarterly instrument"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "Kind",
      "values": [
        {
          "name": "PERPETUAL",
          "value": 1,
          "comment": ["the perpetual asset kind"]
        },
        {
          "name": "FUTURE",
          "value": 2,
          "comment": ["the future asset kind"]
        },
        {
          "name": "CALL",
          "value": 3,
          "comment": ["the call option asset kind"]
        },
        {
          "name": "PUT",
          "value": 4,
          "comment": ["the put option asset kind"]
        }
      ],
      "comment": [
        "The list of asset kinds that are supported on the GRVT exchange"
      ]
    },
    {
      "name": "MarginType",
      "values": [
        {
          "name": "SIMPLE_CROSS_MARGIN",
          "value": 2,
          "comment": [
            "Simple Cross Margin Mode: all assets have a predictable margin impact, the whole subaccount shares a single margin"
          ]
        },
        {
          "name": "PORTFOLIO_CROSS_MARGIN",
          "value": 3,
          "comment": [
            "Portfolio Cross Margin Mode: asset margin impact is analysed on portfolio level, the whole subaccount shares a single margin"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "OrderRejectReason",
      "values": [
        {
          "name": "CLIENT_CANCEL",
          "value": 1,
          "comment": ["client called a Cancel API"]
        },
        {
          "name": "CLIENT_BULK_CANCEL",
          "value": 2,
          "comment": ["client called a Bulk Cancel API"]
        },
        {
          "name": "CLIENT_SESSION_END",
          "value": 3,
          "comment": [
            "client called a Session Cancel API, or set the WebSocket connection to 'cancelOrdersOnTerminate'"
          ]
        },
        {
          "name": "MARKET_CANCEL",
          "value": 4,
          "comment": [
            "the market order was cancelled after no/partial fill. Takes precedence over other TimeInForce cancel reasons"
          ]
        },
        {
          "name": "IOC_CANCEL",
          "value": 5,
          "comment": ["the IOC order was cancelled after no/partial fill"]
        },
        {
          "name": "AON_CANCEL",
          "value": 6,
          "comment": [
            "the AON order was cancelled as it could not be fully matched"
          ]
        },
        {
          "name": "FOK_CANCEL",
          "value": 7,
          "comment": [
            "the FOK order was cancelled as it could not be fully matched"
          ]
        },
        {
          "name": "EXPIRED",
          "value": 8,
          "comment": ["the order was cancelled as it has expired"]
        },
        {
          "name": "FAIL_POST_ONLY",
          "value": 9,
          "comment": [
            "the post-only order could not be posted into the orderbook"
          ]
        },
        {
          "name": "FAIL_REDUCE_ONLY",
          "value": 10,
          "comment": [
            "the reduce-only order would have caused position size to increase"
          ]
        },
        {
          "name": "MM_PROTECTION",
          "value": 11,
          "comment": [
            "the order was cancelled due to market maker protection trigger"
          ]
        },
        {
          "name": "SELF_TRADE_PROTECTION",
          "value": 12,
          "comment": [
            "the order was cancelled due to self-trade protection trigger"
          ]
        },
        {
          "name": "SELF_MATCHED_SUBACCOUNT",
          "value": 13,
          "comment": [
            "the order matched with another order from the same sub account"
          ]
        },
        {
          "name": "OVERLAPPING_CLIENT_ORDER_ID",
          "value": 14,
          "comment": [
            "an active order on your sub account shares the same clientOrderId"
          ]
        },
        {
          "name": "BELOW_MARGIN",
          "value": 15,
          "comment": [
            "the order will bring the sub account below initial margin requirement"
          ]
        },
        {
          "name": "LIQUIDATION",
          "value": 16,
          "comment": [
            "the sub account is liquidated (and all open orders are cancelled by Gravity)"
          ]
        },
        {
          "name": "INSTRUMENT_INVALID",
          "value": 17,
          "comment": ["instrument is invalid or not found on Gravity"]
        },
        {
          "name": "INSTRUMENT_DEACTIVATED",
          "value": 18,
          "comment": [
            "instrument is no longer tradable on Gravity. (typically due to a market halt, or instrument expiry)"
          ]
        },
        {
          "name": "SYSTEM_FAILOVER",
          "value": 19,
          "comment": ["system failover resulting in loss of order state"]
        },
        {
          "name": "UNAUTHORISED",
          "value": 20,
          "comment": [
            "the credentials used (userSession/apiKeySession/walletSignature) is not authorised to perform the action"
          ]
        },
        {
          "name": "SESSION_KEY_EXPIRED",
          "value": 21,
          "comment": ["the session key used to sign the order expired"]
        },
        {
          "name": "SUB_ACCOUNT_NOT_FOUND",
          "value": 22,
          "comment": ["the subaccount does not exist"]
        },
        {
          "name": "NO_TRADE_PERMISSION",
          "value": 23,
          "comment": [
            "the signature used to sign the order has no trade permission"
          ]
        },
        {
          "name": "UNSUPPORTED_TIME_IN_FORCE",
          "value": 24,
          "comment": [
            "the order payload does not contain a supported TimeInForce value"
          ]
        },
        {
          "name": "MULTI_LEGGED_ORDER",
          "value": 25,
          "comment": [
            "the order has multiple legs, but multiple legs are not supported by this venue"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "OrderStateFilter",
      "values": [
        {
          "name": "C",
          "value": 1,
          "comment": ["create only filter"]
        },
        {
          "name": "U",
          "value": 2,
          "comment": ["update only filter"]
        },
        {
          "name": "A",
          "value": 3,
          "comment": ["create and update filter"]
        }
      ],
      "comment": []
    },
    {
      "name": "OrderStatus",
      "values": [
        {
          "name": "PENDING",
          "value": 1,
          "comment": ["Order is waiting for Trigger Condition to be hit"]
        },
        {
          "name": "OPEN",
          "value": 2,
          "comment": [
            "Order is actively matching on the orderbook, could be unfilled or partially filled"
          ]
        },
        {
          "name": "FILLED",
          "value": 3,
          "comment": ["Order is fully filled and hence closed"]
        },
        {
          "name": "REJECTED",
          "value": 4,
          "comment": [
            "Order is rejected by GRVT Backend since if fails a particular check (See OrderRejectReason)"
          ]
        },
        {
          "name": "CANCELLED",
          "value": 5,
          "comment": [
            "Order is cancelled by the user using one of the supported APIs (See OrderRejectReason)"
          ]
        }
      ],
      "comment": []
    },
    {
      "name": "SubAccountTradeInterval",
      "values": [
        {
          "name": "SAT_1_MO",
          "value": 1,
          "comment": ["1 month"]
        },
        {
          "name": "SAT_1_D",
          "value": 2,
          "comment": ["1 day"]
        }
      ],
      "comment": []
    },
    {
      "name": "TimeInForce",
      "values": [
        {
          "name": "GOOD_TILL_TIME",
          "value": 1,
          "comment": ["GTT - Remains open until it is cancelled, or expired"]
        },
        {
          "name": "ALL_OR_NONE",
          "value": 2,
          "comment": [
            "AON - Either fill the whole order or none of it (Block Trades Only)"
          ]
        },
        {
          "name": "IMMEDIATE_OR_CANCEL",
          "value": 3,
          "comment": [
            "IOC - Fill the order as much as possible, when hitting the orderbook. Then cancel it"
          ]
        },
        {
          "name": "FILL_OR_KILL",
          "value": 4,
          "comment": [
            "FOK - Both AoN and IoC. Either fill the full order when hitting the orderbook, or cancel it"
          ]
        }
      ],
      "comment": [
        "|                       | Must Fill All | Can Fill Partial |",
        "| -                     | -             | -                |",
        "| Must Fill Immediately | FOK           | IOC              |",
        "| Can Fill Till Time    | AON           | GTC              |",
        ""
      ]
    },
    {
      "name": "Venue",
      "values": [
        {
          "name": "ORDERBOOK",
          "value": 1,
          "comment": ["the trade is cleared on the orderbook venue"]
        }
      ],
      "comment": [
        "The list of Trading Venues that are supported on the GRVT exchange"
      ]
    }
  ]
}
